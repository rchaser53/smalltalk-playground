OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-07-29T14:12:08.252761+09:00' ],		#prior : OmReference [ 'Pharo.7b3llxw8u9vbortrt38ksv0ag', '4643' ],		#self : OmReference [ '1' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ConfigurationOfTeapot-TorstenBergmann.16'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ],		#time : DateAndTime [ '2017-07-29T14:12:08.388174+09:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ConfigurationOfTeapot\r\tinstanceVariableNames: \'project\'\r\tclassVariableNames: \'LastVersionLoad\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ConfigurationOfTeapot,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfTeapot,						#isMetaSide : false					},					#name : #project,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConfigurationOfTeapot class\r\tinstanceVariableNames: \'\''				},				#name : #'ConfigurationOfTeapot class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConfigurationOfTeapot,					#isMetaSide : false				},				#parent : @7,				#content : 'Configuration for Teapot micro web framework.\r\rSee http://smalltalkhub.com/#!/~zeroflag/Teapot',				#stamp : 'TorstenBergmann 10/12/2015 10:01'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfTeapot,						#isMetaSide : false					},					#name : #LastVersionLoad,					#parent : @7				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Configuration for Teapot micro web framework.\r\rSee http://smalltalkhub.com/#!/~zeroflag/Teapot',		#newStamp : 'TorstenBergmann 10/12/2015 10:01'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ],		#time : DateAndTime [ '2017-07-29T14:12:08.389146+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ConfigurationOfTeapot,		#affectedPackageName : #ConfigurationOfTeapot	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ],		#time : DateAndTime [ '2017-07-29T14:12:08.430756+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ConfigurationOfTeapot\r\tinstanceVariableNames: \'project\'\r\tclassVariableNames: \'LastVersionLoad\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ConfigurationOfTeapot\''			},			#name : #ConfigurationOfTeapot,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfTeapot,						#isMetaSide : false					},					#name : #project,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConfigurationOfTeapot class\r\tinstanceVariableNames: \'\''				},				#name : #'ConfigurationOfTeapot class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConfigurationOfTeapot,					#isMetaSide : false				},				#parent : @8,				#content : 'Configuration for Teapot micro web framework.\r\rSee http://smalltalkhub.com/#!/~zeroflag/Teapot',				#stamp : 'TorstenBergmann 10/12/2015 10:01'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfTeapot,						#isMetaSide : false					},					#name : #LastVersionLoad,					#parent : @8				}			],			#category : #ConfigurationOfTeapot,			#package : #ConfigurationOfTeapot,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ],		#time : DateAndTime [ '2017-07-29T14:12:08.504631+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #DevelopmentSupport,			#protocol : #'development support',			#sourceCode : 'DevelopmentSupport\r\r"See the methods in the \'development support\' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."\r\t<apiDocumentation>\r',			#stamp : 'AttilaMagyar 8/24/2014 18:38',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ],		#time : DateAndTime [ '2017-07-29T14:12:08.507375+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #'baseConfigurationClassIfAbsent:',			#protocol : #private,			#sourceCode : 'baseConfigurationClassIfAbsent: aBlock\r\r\t^Smalltalk\r\t\tat: #MetacelloBaseConfiguration\r\t\tifAbsent: [ \r\t\t\tself ensureMetacelloBaseConfiguration.\r\t\t\tSmalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].\r',			#stamp : 'AttilaMagyar 8/24/2014 18:38',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ],		#time : DateAndTime [ '2017-07-29T14:12:08.510253+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #catalogChangeLog,			#protocol : #catalog,			#sourceCode : 'catalogChangeLog\r\t"Returns a paragraph describing the most important changes in the configuration class."\r\t^ \' \'',			#stamp : 'TorstenBergmann 10/12/2015 10:02',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ],		#time : DateAndTime [ '2017-07-29T14:12:08.511974+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #catalogContactInfo,			#protocol : #catalog,			#sourceCode : 'catalogContactInfo\r\t"Returns a paragraph describing contact information such as email, mailing lists and website."\r\t^ \'Contact the authors on the Pharo developer list (http://lists.pharo.org)\'',			#stamp : 'TorstenBergmann 10/12/2015 10:01',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ],		#time : DateAndTime [ '2017-07-29T14:12:08.513636+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #catalogDescription,			#protocol : #catalog,			#sourceCode : 'catalogDescription\r\t"Returns a paragraph describing the project"\r\t^ \'Teapot is micro web framework on top of the Zinc HTTP components, that focuses on simplicity and ease of use.\'',			#stamp : 'TorstenBergmann 10/12/2015 10:02',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ],		#time : DateAndTime [ '2017-07-29T14:12:08.515294+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #catalogKeyClassesAndExample,			#protocol : #catalog,			#sourceCode : 'catalogKeyClassesAndExample\r\t"Returns a paragraph or more describing the key classes of your project. You can use Pillar/Pier syntax to layout out the text i.e., ==Code== and - for bullet."\r\t^ \'Checkout the class ==Teapot==\'',			#stamp : 'TorstenBergmann 10/12/2015 10:03',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ],		#time : DateAndTime [ '2017-07-29T14:12:08.517682+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #catalogKeywords,			#protocol : #catalog,			#sourceCode : 'catalogKeywords\r\t"Returns an array of symbols"\r\t^ #(micro web framework http sinatra) ',			#stamp : 'TorstenBergmann 10/12/2015 10:03',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ],		#time : DateAndTime [ '2017-07-29T14:12:08.519736+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #ensureMetacello,			#protocol : #private,			#sourceCode : 'ensureMetacello\r\r\t(self baseConfigurationClassIfAbsent: []) ensureMetacello',			#stamp : 'AttilaMagyar 8/24/2014 18:38',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ],		#time : DateAndTime [ '2017-07-29T14:12:08.522369+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #ensureMetacelloBaseConfiguration,			#protocol : #private,			#sourceCode : 'ensureMetacelloBaseConfiguration\r\r\tSmalltalk\r\t\tat: #MetacelloBaseConfiguration\r\t\tifAbsent: [ \r\t\t\t| repository version |\r\t\t\trepository := MCHttpRepository location: \'http://seaside.gemstone.com/ss/metacello\' user: \'\' password: \'\'.\r\t\t\trepository\r\t\t\t\tversionReaderForFileNamed: \'Metacello-Base-DaleHenrichs.2.mcz\'\r\t\t\t\tdo: [ :reader | \r\t\t\t\t\tversion := reader version.\r\t\t\t\t\tversion load.\r\t\t\t\t\tversion workingCopy repositoryGroup addRepository: repository ] ]',			#stamp : 'AttilaMagyar 8/24/2014 18:38',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ],		#time : DateAndTime [ '2017-07-29T14:12:08.524783+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #isMetacelloConfig,			#protocol : #'metacello tool support',			#sourceCode : 'isMetacelloConfig\r\t"Answer true and the Metacello tools will operate on you"\r\t\r\t^true',			#stamp : 'AttilaMagyar 8/24/2014 18:38',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ],		#time : DateAndTime [ '2017-07-29T14:12:08.527896+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #load,			#protocol : #loading,			#sourceCode : 'load\r\t"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."\r\r\t"self load"\r\r\t<apiDocumentation>\r\t^(self project version: #stable) load',			#stamp : 'AttilaMagyar 8/24/2014 18:38',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ],		#time : DateAndTime [ '2017-07-29T14:12:08.529874+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #loadBleedingEdge,			#protocol : #loading,			#sourceCode : 'loadBleedingEdge\r\t"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."\r\r\t"self loadBleedingEdge"\r\r\t<apiDocumentation>\r\t^(self project version: #bleedingEdge) load',			#stamp : 'AttilaMagyar 8/24/2014 18:38',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ],		#time : DateAndTime [ '2017-07-29T14:12:08.531752+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #loadDevelopment,			#protocol : #loading,			#sourceCode : 'loadDevelopment\r\t"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."\r\r\t"self loadDevelopment"\r\r\t<apiDocumentation>\r\t^(self project version: #development) load',			#stamp : 'AttilaMagyar 8/24/2014 18:38',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ],		#time : DateAndTime [ '2017-07-29T14:12:08.533441+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #project,			#protocol : #accessing,			#sourceCode : 'project\r\r\t^self new project',			#stamp : 'AttilaMagyar 8/24/2014 18:38',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ],		#time : DateAndTime [ '2017-07-29T14:12:08.53595+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfTeapot class',				#isMetaSide : true			},			#name : #validate,			#protocol : #'development support',			#sourceCode : 'validate\r\t"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). \r\tErrors identify specification issues that will result in unexpected behaviour when you load the configuration. \r\tCritical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.\r\tWarnings identify specification issues that are technically correct, but are worth take a look at."\r\r\t"self validate"\r\r\t<apiDocumentation>\r\tself ensureMetacello.\r\t^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore',			#stamp : 'AttilaMagyar 8/24/2014 18:38',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ],		#time : DateAndTime [ '2017-07-29T14:12:08.537801+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'baseline01:',			#protocol : #baselines,			#sourceCode : 'baseline01: spec\r\t<version: \'0.1-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://smalltalkhub.com/mc/zeroflag/Teapot/main/\'.\r\t\tspec package: \'Teapot-Core\'. ].\r',			#stamp : 'AttilaMagyar 8/24/2014 18:40',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ],		#time : DateAndTime [ '2017-07-29T14:12:08.539922+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'baseline20:',			#protocol : #baselines,			#sourceCode : 'baseline20: spec\r\t<version: \'2.0-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://smalltalkhub.com/mc/zeroflag/Teapot/main/\'.\r\t\tspec project: \'NeoJSON\' with: [\r\t\t\t\tspec\r\t\t\t\t\tclassName: #ConfigurationOfNeoJSON;\r\t\t\t\t\tversionString: #\'stable\';\r\t\t\t\t\trepository: \'http://mc.stfx.eu/Neo\' ].\r\t\t\t\t\r\t\tspec \r\t\t\tpackage: \'Teapot-Core\' with: [\r\t\t\t\tspec requires: #(\'NeoJSON\' ). ];\r\t\t\tpackage: \'Teapot-Tools\' with: [\r\t\t\t\tspec requires: #(\'Teapot-Core\' ). ];\r\t\t\tpackage: \'Teapot-Tests\' with: [\r\t\t\t\tspec requires: #(\'Teapot-Core\' ). ].\r\t\tspec \r\t\t\tgroup: \'Core\' with: #(\'Teapot-Core\' );\r\t\t\tgroup: \'Tools\' with: #(\'Teapot-Tools\' );\r\t\t\tgroup: \'Tests\' with: #(\'Teapot-Tests\' );\r\t\t\tgroup: \'default\' with: #(\'Tools\' \'Tests\' ). ].\r',			#stamp : 'TorstenBergmann 10/12/2015 13:26',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ],		#time : DateAndTime [ '2017-07-29T14:12:08.542045+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'baseline21:',			#protocol : #baselines,			#sourceCode : 'baseline21: spec\r\t<version: \'2.1-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://smalltalkhub.com/mc/zeroflag/Teapot/main/\'.\r\t\tspec \r\t\t\tproject: \'NeoJSON\' with: [\r\t\t\t\tspec\r\t\t\t\t\tclassName: #ConfigurationOfNeoJSON;\r\t\t\t\t\tversionString: #\'stable\';\r\t\t\t\t\trepository: \'http://mc.stfx.eu/Neo\' ];\r\t\t\tproject: \'WebBrowser\' with: [\r\t\t\t\tspec\r\t\t\t\t\tclassName: #ConfigurationOfWebBrowser;\r\t\t\t\t\tversionString: #\'stable\';\r\t\t\t\t\trepository: \'http://smalltalkhub.com/mc/TorstenBergmann/WebBrowser/main/\' ].\r\t\tspec \r\t\t\tpackage: \'Teapot-Core\' with: [\r\t\t\t\tspec requires: #(\'NeoJSON\' ). ];\r\t\t\tpackage: \'Teapot-Tools\' with: [\r\t\t\t\tspec requires: #(\'Teapot-Core\' \'WebBrowser\' ). ];\r\t\t\tpackage: \'Teapot-Tests\' with: [\r\t\t\t\tspec requires: #(\'Teapot-Core\' ). ].\r\t\tspec \r\t\t\tgroup: \'Core\' with: #(\'Teapot-Core\' );\r\t\t\tgroup: \'Tools\' with: #(\'Teapot-Tools\' );\r\t\t\tgroup: \'Tests\' with: #(\'Teapot-Tests\' );\r\t\t\tgroup: \'default\' with: #(\'Tools\' \'Tests\' ). ].\r',			#stamp : 'TorstenBergmann 4/13/2016 22:08',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ],		#time : DateAndTime [ '2017-07-29T14:12:08.545088+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'baseline22:',			#protocol : #baselines,			#sourceCode : 'baseline22: spec\r\t<version: \'2.2-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://smalltalkhub.com/mc/zeroflag/Teapot/main/\'.\r\t\tspec \r\t\t\tproject: \'NeoJSON\' with: [\r\t\t\t\tspec\r\t\t\t\t\tclassName: #ConfigurationOfNeoJSON;\r\t\t\t\t\tversionString: #\'stable\';\r\t\t\t\t\trepository: \'http://mc.stfx.eu/Neo\' ];\r\t\t\tproject: \'WebBrowser\' with: [\r\t\t\t\tspec\r\t\t\t\t\tclassName: #ConfigurationOfWebBrowser;\r\t\t\t\t\tversionString: #\'stable\';\r\t\t\t\t\trepository: \'http://smalltalkhub.com/mc/TorstenBergmann/WebBrowser/main/\' ].\r\t\tspec \r\t\t\tpackage: \'Teapot-Core\' with: [\r\t\t\t\tspec requires: #(\'NeoJSON\' ). ];\r\t\t\tpackage: \'Teapot-Tools\' with: [\r\t\t\t\tspec requires: #(\'Teapot-Core\' \'WebBrowser\' ). ];\r\t\t\tpackage: \'Teapot-Tests\' with: [\r\t\t\t\tspec requires: #(\'Teapot-Core\' ). ].\r\t\tspec \r\t\t\tgroup: \'Core\' with: #(\'Teapot-Core\' );\r\t\t\tgroup: \'Tools\' with: #(\'Teapot-Tools\' );\r\t\t\tgroup: \'Tests\' with: #(\'Teapot-Tests\' );\r\t\t\tgroup: \'default\' with: #(\'Tools\' \'Tests\' ). ].\r',			#stamp : 'TorstenBergmann 4/13/2016 22:10',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ],		#time : DateAndTime [ '2017-07-29T14:12:08.547251+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'baseline23:',			#protocol : #baselines,			#sourceCode : 'baseline23: spec\r\t<version: \'2.3-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://smalltalkhub.com/mc/zeroflag/Teapot/main/\'.\r\t\tspec \r\t\t\tproject: \'NeoJSON\' with: [\r\t\t\t\tspec\r\t\t\t\t\tclassName: #ConfigurationOfNeoJSON;\r\t\t\t\t\tversionString: #\'stable\';\r\t\t\t\t\trepository: \'http://mc.stfx.eu/Neo\' ];\r\t\t\tproject: \'WebBrowser\' with: [\r\t\t\t\tspec\r\t\t\t\t\tclassName: #ConfigurationOfWebBrowser;\r\t\t\t\t\tversionString: #\'stable\';\r\t\t\t\t\trepository: \'http://smalltalkhub.com/mc/TorstenBergmann/WebBrowser/main/\' ].\r\t\tspec \r\t\t\tpackage: \'Teapot-Core\' with: [\r\t\t\t\tspec requires: #(\'NeoJSON\' ). ];\r\t\t\tpackage: \'Teapot-Tools\' with: [\r\t\t\t\tspec requires: #(\'Teapot-Core\' \'WebBrowser\' ). ];\r\t\t\tpackage: \'Teapot-Tests\' with: [\r\t\t\t\tspec requires: #(\'Teapot-Core\' ). ].\r\t\tspec \r\t\t\tgroup: \'Core\' with: #(\'Teapot-Core\' );\r\t\t\tgroup: \'Tools\' with: #(\'Teapot-Tools\' );\r\t\t\tgroup: \'Tests\' with: #(\'Teapot-Tests\' );\r\t\t\tgroup: \'default\' with: #(\'Tools\' \'Tests\' ). ].\r',			#stamp : 'TorstenBergmann 10/5/2016 22:14',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ],		#time : DateAndTime [ '2017-07-29T14:12:08.549363+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'baseline24:',			#protocol : #baselines,			#sourceCode : 'baseline24: spec\r\t<version: \'2.4-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://smalltalkhub.com/mc/zeroflag/Teapot/main/\'.\r\t\tspec \r\t\t\tproject: \'NeoJSON\' with: [\r\t\t\t\tspec\r\t\t\t\t\tclassName: #ConfigurationOfNeoJSON;\r\t\t\t\t\tversionString: #\'stable\';\r\t\t\t\t\trepository: \'http://mc.stfx.eu/Neo\' ];\r\t\t\tproject: \'WebBrowser\' with: [\r\t\t\t\tspec\r\t\t\t\t\tclassName: #ConfigurationOfWebBrowser;\r\t\t\t\t\tversionString: #\'stable\';\r\t\t\t\t\trepository: \'http://smalltalkhub.com/mc/TorstenBergmann/WebBrowser/main/\' ].\r\t\tspec \r\t\t\tpackage: \'Teapot-Core\' with: [\r\t\t\t\tspec requires: #(\'NeoJSON\' ). ];\r\t\t\tpackage: \'Teapot-Tools\' with: [\r\t\t\t\tspec requires: #(\'Teapot-Core\' \'WebBrowser\' ). ];\r\t\t\tpackage: \'Teapot-Tests\' with: [\r\t\t\t\tspec requires: #(\'Teapot-Core\' ). ].\r\t\tspec \r\t\t\tgroup: \'Core\' with: #(\'Teapot-Core\' );\r\t\t\tgroup: \'Tools\' with: #(\'Teapot-Tools\' );\r\t\t\tgroup: \'Tests\' with: #(\'Teapot-Tests\' );\r\t\t\tgroup: \'default\' with: #(\'Tools\' \'Tests\' ). ].\r',			#stamp : 'TorstenBergmann 10/5/2016 22:14',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ],		#time : DateAndTime [ '2017-07-29T14:12:08.552471+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #customProjectAttributes,			#protocol : #accessing,			#sourceCode : 'customProjectAttributes\r\t "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #\'Condition1\' with: #\'Condition2.\r\tFor more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"\r\r\t^ #().',			#stamp : 'AttilaMagyar 8/24/2014 18:38',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ],		#time : DateAndTime [ '2017-07-29T14:12:08.554561+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'development:',			#protocol : #'symbolic versions',			#sourceCode : 'development: spec\r\t<symbolicVersion: #\'development\'>\r\r\tspec for: #\'common\' version: \'2.4-baseline\'.\r',			#stamp : 'TorstenBergmann 10/5/2016 22:14',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ],		#time : DateAndTime [ '2017-07-29T14:12:08.556636+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #project,			#protocol : #accessing,			#sourceCode : 'project\r\r\t^ project ifNil: [ \r\t\t"Bootstrap Metacello if it is not already loaded"\r\t\t(self class baseConfigurationClassIfAbsent: []) ensureMetacello.\r\t\t"Construct Metacello project"\r\t\tproject := MetacelloMCProject new projectAttributes: self customProjectAttributes. \r\t\t(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.\r\t\tproject loadType: #linear. "change to #atomic if desired"\r\t\tproject ]',			#stamp : 'AttilaMagyar 8/24/2014 18:38',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ],		#time : DateAndTime [ '2017-07-29T14:12:08.5587+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'stable:',			#protocol : #'symbolic versions',			#sourceCode : 'stable: spec\r\t<symbolicVersion: #\'stable\'>\r\r\tspec for: #\'common\' version: \'2.3\'.\r',			#stamp : 'TorstenBergmann 10/5/2016 22:20',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ],		#time : DateAndTime [ '2017-07-29T14:12:08.561632+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'version08:',			#protocol : #versions,			#sourceCode : 'version08: spec\r\t<version: \'0.8\' imports: #(\'0.1-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'stable\'.\r\t\tspec description: \'version 0.8\'.\r\t\tspec author: \'AttilaMagyar\'.\r\t\tspec timestamp: \'8/24/2014 20:01\'.\r\t\tspec package: \'Teapot-Core\' with: \'Teapot-Core-AttilaMagyar.52\'. ].\r',			#stamp : 'AttilaMagyar 8/24/2014 20:01',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ],		#time : DateAndTime [ '2017-07-29T14:12:08.563704+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'version091:',			#protocol : #versions,			#sourceCode : 'version091: spec\r\t<version: \'0.91\' imports: #(\'0.1-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'stable\'.\r\t\tspec description: \'version 0.91\'.\r\t\tspec author: \'AttilaMagyar\'.\r\t\tspec timestamp: \'5/9/2015 18:18\'.\r\t\tspec package: \'Teapot-Core\' with: \'Teapot-Core-AttilaMagyar.76\'. ].\r',			#stamp : 'AttilaMagyar 5/9/2015 20:40',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ],		#time : DateAndTime [ '2017-07-29T14:12:08.56577+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'version09:',			#protocol : #versions,			#sourceCode : 'version09: spec\r\t<version: \'0.9\' imports: #(\'0.1-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'stable\'.\r\t\tspec description: \'version 0.9\'.\r\t\tspec author: \'AttilaMagyar\'.\r\t\tspec timestamp: \'1/3/2015 20:01\'.\r\t\tspec package: \'Teapot-Core\' with: \'Teapot-Core-AttilaMagyar.69\'. ].\r',			#stamp : 'AttilaMagyar 3/1/2015 20:57',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ],		#time : DateAndTime [ '2017-07-29T14:12:08.568793+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'version20:',			#protocol : #versions,			#sourceCode : 'version20: spec\r\t<version: \'2.0\' imports: #(\'2.0-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'stable\'.\r\t\tspec description: \'version 2.0\'.\r\t\tspec author: \'TorstenBergmann\'.\r\t\tspec timestamp: \'10/12/2015 13:11\'.\r\t\tspec project: \'NeoJSON\' with: #\'stable\'.\r\t\tspec \r\t\t\tpackage: \'Teapot-Core\' with: \'Teapot-Core-TorstenBergmann.80\';\r\t\t\tpackage: \'Teapot-Tools\' with: \'Teapot-Tools-TorstenBergmann.4\';\r\t\t\tpackage: \'Teapot-Tests\' with: \'Teapot-Tests-AttilaMagyar.53\'. ].\r',			#stamp : 'TorstenBergmann 10/12/2015 14:07',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ],		#time : DateAndTime [ '2017-07-29T14:12:08.570889+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'version21:',			#protocol : #versions,			#sourceCode : 'version21: spec\r\t<version: \'2.1\' imports: #(\'2.1-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'stable\'.\r\t\tspec description: \'version 2.1\'.\r\t\tspec author: \'TorstenBergmann\'.\r\t\tspec timestamp: \'4/13/2016 22:09\'.\r\t\tspec \r\t\t\tproject: \'NeoJSON\' with: #\'stable\';\r\t\t\tproject: \'WebBrowser\' with: #\'stable\'.\r\t\tspec \r\t\t\tpackage: \'Teapot-Core\' with: \'Teapot-Core-TorstenBergmann.80\';\r\t\t\tpackage: \'Teapot-Tools\' with: \'Teapot-Tools-TorstenBergmann.5\';\r\t\t\tpackage: \'Teapot-Tests\' with: \'Teapot-Tests-AttilaMagyar.53\'. ].\r',			#stamp : 'TorstenBergmann 4/13/2016 22:09',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ],		#time : DateAndTime [ '2017-07-29T14:12:08.573114+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'version22:',			#protocol : #versions,			#sourceCode : 'version22: spec\r\t<version: \'2.2\' imports: #(\'2.2-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'stable\'.\r\t\tspec description: \'version 2.2\'.\r\t\tspec author: \'AttilaMagyar\'.\r\t\tspec timestamp: \'11/7/2016 21:45\'.\r\t\tspec \r\t\t\tproject: \'NeoJSON\' with: #\'stable\';\r\t\t\tproject: \'WebBrowser\' with: #\'stable\'.\r\t\tspec \r\t\t\tpackage: \'Teapot-Core\' with: \'Teapot-Core-AttilaMagyar.84\';\r\t\t\tpackage: \'Teapot-Tools\' with: \'Teapot-Tools-AttilaMagyar.14\';\r\t\t\tpackage: \'Teapot-Tests\' with: \'Teapot-Tests-AttilaMagyar.54\'. ].\r',			#stamp : 'AttilaMagyar 7/11/2016 21:48',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ],		#time : DateAndTime [ '2017-07-29T14:12:08.576086+09:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfTeapot,				#isMetaSide : false			},			#name : #'version23:',			#protocol : #versions,			#sourceCode : 'version23: spec\r\t<version: \'2.3\' imports: #(\'2.2-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'stable\'.\r\t\tspec description: \'version 2.3\'.\r\t\tspec author: \'TorstenBergmann\'.\r\t\tspec timestamp: \'05/10/2016 21:45\'.\r\t\tspec \r\t\t\tproject: \'NeoJSON\' with: #\'stable\';\r\t\t\tproject: \'WebBrowser\' with: #\'stable\'.\r\t\tspec \r\t\t\tpackage: \'Teapot-Core\' with: \'Teapot-Core-AttilaMagyar.84\';\r\t\t\tpackage: \'Teapot-Tools\' with: \'Teapot-Tools-TorstenBergmann.19\';\r\t\t\tpackage: \'Teapot-Tests\' with: \'Teapot-Tests-AttilaMagyar.54\'. ].\r',			#stamp : 'TorstenBergmann 10/7/2016 23:08',			#package : #ConfigurationOfTeapot		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-07-29T14:12:10.784599+09:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ConfigurationOfNeoJSON-SvenVanCaekenberghe.21'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ],		#time : DateAndTime [ '2017-07-29T14:12:11.022021+09:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ConfigurationOfNeoJSON\r\tinstanceVariableNames: \'project\'\r\tclassVariableNames: \'LastVersionLoad\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ConfigurationOfNeoJSON,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfNeoJSON,						#isMetaSide : false					},					#name : #project,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConfigurationOfNeoJSON class\r\tinstanceVariableNames: \'\''				},				#name : #'ConfigurationOfNeoJSON class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConfigurationOfNeoJSON,					#isMetaSide : false				},				#parent : @7,				#content : 'I am ConfigurationOfNeoJSON, a Metacello configuration for NeoJSON.\r\rNeoJSON is a flexible and efficient reader and writer for JSON.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfNeoJSON,						#isMetaSide : false					},					#name : #LastVersionLoad,					#parent : @7				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am ConfigurationOfNeoJSON, a Metacello configuration for NeoJSON.\r\rNeoJSON is a flexible and efficient reader and writer for JSON.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ],		#time : DateAndTime [ '2017-07-29T14:12:11.023003+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ConfigurationOfNeoJSON,		#affectedPackageName : #ConfigurationOfNeoJSON	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ],		#time : DateAndTime [ '2017-07-29T14:12:11.062592+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ConfigurationOfNeoJSON\r\tinstanceVariableNames: \'project\'\r\tclassVariableNames: \'LastVersionLoad\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ConfigurationOfNeoJSON\''			},			#name : #ConfigurationOfNeoJSON,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfNeoJSON,						#isMetaSide : false					},					#name : #project,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConfigurationOfNeoJSON class\r\tinstanceVariableNames: \'\''				},				#name : #'ConfigurationOfNeoJSON class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConfigurationOfNeoJSON,					#isMetaSide : false				},				#parent : @8,				#content : 'I am ConfigurationOfNeoJSON, a Metacello configuration for NeoJSON.\r\rNeoJSON is a flexible and efficient reader and writer for JSON.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfNeoJSON,						#isMetaSide : false					},					#name : #LastVersionLoad,					#parent : @8				}			],			#category : #ConfigurationOfNeoJSON,			#package : #ConfigurationOfNeoJSON,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ],		#time : DateAndTime [ '2017-07-29T14:12:11.134544+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfNeoJSON class',				#isMetaSide : true			},			#name : #DevelopmentSupport,			#protocol : #'development support',			#sourceCode : 'DevelopmentSupport\r\r"See the methods in the \'development support\' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."\r\t<apiDocumentation>\r',			#stamp : 'SvenVanCaekenberghe 6/22/2012 16:48',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ],		#time : DateAndTime [ '2017-07-29T14:12:11.138348+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfNeoJSON class',				#isMetaSide : true			},			#name : #'baseConfigurationClassIfAbsent:',			#protocol : #private,			#sourceCode : 'baseConfigurationClassIfAbsent: aBlock\r\r\t^Smalltalk\r\t\tat: #MetacelloBaseConfiguration\r\t\tifAbsent: [ \r\t\t\tself ensureMetacelloBaseConfiguration.\r\t\t\tSmalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].\r',			#stamp : 'SvenVanCaekenberghe 6/22/2012 16:48',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ],		#time : DateAndTime [ '2017-07-29T14:12:11.14007+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfNeoJSON class',				#isMetaSide : true			},			#name : #catalogContactInfo,			#protocol : #accessing,			#sourceCode : 'catalogContactInfo\r\t^ \'Written and maintained by Sven Van Caekenberghe (http://stfx.eu) and the community. Discussions on the Pharo mailing lists.\'',			#stamp : 'SvenVanCaekenberghe 1/5/2016 09:38',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ],		#time : DateAndTime [ '2017-07-29T14:12:11.141641+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfNeoJSON class',				#isMetaSide : true			},			#name : #catalogDescription,			#protocol : #accessing,			#sourceCode : 'catalogDescription\r\t^ \'JSON (JavaScript Object Notation) is a popular data-interchange format. NeoJSON is an elegant and efficient standalone Smalltalk framework to read and write JSON converting to or from Smalltalk objects.\'',			#stamp : 'SvenVanCaekenberghe 1/5/2016 09:39',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ],		#time : DateAndTime [ '2017-07-29T14:12:11.143147+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfNeoJSON class',				#isMetaSide : true			},			#name : #catalogKeywords,			#protocol : #accessing,			#sourceCode : 'catalogKeywords\r\t^ #(format input output json serialization encoding text javascript)',			#stamp : 'SvenVanCaekenberghe 1/5/2016 09:39',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ],		#time : DateAndTime [ '2017-07-29T14:12:11.145127+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfNeoJSON class',				#isMetaSide : true			},			#name : #ensureMetacello,			#protocol : #private,			#sourceCode : 'ensureMetacello\r\r\t(self baseConfigurationClassIfAbsent: []) ensureMetacello',			#stamp : 'SvenVanCaekenberghe 6/22/2012 16:48',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ],		#time : DateAndTime [ '2017-07-29T14:12:11.146718+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfNeoJSON class',				#isMetaSide : true			},			#name : #ensureMetacelloBaseConfiguration,			#protocol : #private,			#sourceCode : 'ensureMetacelloBaseConfiguration\r\r\tSmalltalk\r\t\tat: #MetacelloBaseConfiguration\r\t\tifAbsent: [ \r\t\t\t| repository version |\r\t\t\trepository := MCHttpRepository location: \'http://seaside.gemstone.com/ss/metacello\' user: \'\' password: \'\'.\r\t\t\trepository\r\t\t\t\tversionReaderForFileNamed: \'Metacello-Base-DaleHenrichs.2.mcz\'\r\t\t\t\tdo: [ :reader | \r\t\t\t\t\tversion := reader version.\r\t\t\t\t\tversion load.\r\t\t\t\t\tversion workingCopy repositoryGroup addRepository: repository ] ]',			#stamp : 'SvenVanCaekenberghe 6/22/2012 16:48',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ],		#time : DateAndTime [ '2017-07-29T14:12:11.148205+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfNeoJSON class',				#isMetaSide : true			},			#name : #isMetacelloConfig,			#protocol : #'metacello tool support',			#sourceCode : 'isMetacelloConfig\r\t"Answer true and the Metacello tools will operate on you"\r\t\r\t^true',			#stamp : 'SvenVanCaekenberghe 6/22/2012 16:48',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ],		#time : DateAndTime [ '2017-07-29T14:12:11.149719+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfNeoJSON class',				#isMetaSide : true			},			#name : #load,			#protocol : #loading,			#sourceCode : 'load\r\t"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."\r\r\t"self load"\r\r\t<apiDocumentation>\r\t^(self project version: #stable) load',			#stamp : 'SvenVanCaekenberghe 6/22/2012 16:48',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ],		#time : DateAndTime [ '2017-07-29T14:12:11.152021+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfNeoJSON class',				#isMetaSide : true			},			#name : #loadBleedingEdge,			#protocol : #loading,			#sourceCode : 'loadBleedingEdge\r\t"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."\r\r\t"self loadBleedingEdge"\r\r\t<apiDocumentation>\r\t^(self project version: #bleedingEdge) load',			#stamp : 'SvenVanCaekenberghe 6/22/2012 16:48',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ],		#time : DateAndTime [ '2017-07-29T14:12:11.153562+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfNeoJSON class',				#isMetaSide : true			},			#name : #loadDevelopment,			#protocol : #loading,			#sourceCode : 'loadDevelopment\r\t"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."\r\r\t"self loadDevelopment"\r\r\t<apiDocumentation>\r\t^(self project version: #development) load',			#stamp : 'SvenVanCaekenberghe 6/22/2012 16:48',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ],		#time : DateAndTime [ '2017-07-29T14:12:11.155027+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfNeoJSON class',				#isMetaSide : true			},			#name : #project,			#protocol : #accessing,			#sourceCode : 'project\r\r\t^self new project',			#stamp : 'SvenVanCaekenberghe 6/22/2012 16:48',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ],		#time : DateAndTime [ '2017-07-29T14:12:11.156514+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfNeoJSON class',				#isMetaSide : true			},			#name : #validate,			#protocol : #'development support',			#sourceCode : 'validate\r\t"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). \r\tErrors identify specification issues that will result in unexpected behaviour when you load the configuration. \r\tCritical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.\r\tWarnings identify specification issues that are technically correct, but are worth take a look at."\r\r\t"self validate"\r\r\t<apiDocumentation>\r\tself ensureMetacello.\r\t^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore',			#stamp : 'SvenVanCaekenberghe 6/22/2012 16:48',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ],		#time : DateAndTime [ '2017-07-29T14:12:11.158137+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'baseline1:',			#protocol : #baselines,			#sourceCode : 'baseline1: spec\r\t<version: \'1-baseline\'>\r\t\r\tspec for: #common do: [\r\t\tspec \r\t\t\tblessing: #baseline;\r\t\t\trepository: \'http://mc.stfx.eu/Neo\';\r\t\t\tpackage: \'Neo-JSON-Core\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: [ spec requires: \'Neo-JSON-Core\' ];\r\t\t\tgroup: \'default\' with: #(\'Neo-JSON-Core\' \'Neo-JSON-Tests\');\r\t\t\tgroup: \'Core\' with: #(\'Neo-JSON-Core\');\r\t\t\tgroup: \'Tests\' with: #(\'Neo-JSON-Tests\') ]',			#stamp : 'SvenVanCaekenberghe 6/22/2012 16:53',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ],		#time : DateAndTime [ '2017-07-29T14:12:11.160756+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'baseline2:',			#protocol : #baselines,			#sourceCode : 'baseline2: spec\r\t<version: \'2-baseline\'>\r\tspec\r\t\tfor: #common\r\t\tdo: [ \r\t\t\tspec\r\t\t\t\tblessing: #baseline;\r\t\t\t\trepository: \'http://mc.stfx.eu/Neo\';\r\t\t\t\tpackage: \'Neo-JSON-Core\';\r\t\t\t\tpackage: \'Neo-JSON-Tests\' with: [ spec requires: \'Neo-JSON-Core\' ];\r\t\t\t\tgroup: \'default\' with: #(\'Neo-JSON-Core\' \'Neo-JSON-Tests\');\r\t\t\t\tgroup: \'Core\' with: #(\'Neo-JSON-Core\');\r\t\t\t\tgroup: \'Tests\' with: #(\'Neo-JSON-Tests\') ].\r\tspec\r\t\tfor: #gemstone\r\t\tdo: [ \r\t\t\tspec\r\t\t\t\tbaseline: \'NeoJSON\' with: [ spec repository: \'github://GsDevKit/NeoJSON:master/repository\' ];\r\t\t\t\timport: \'NeoJSON\' ]',			#stamp : 'PaulDeBruicker 11/2/2014 20:39',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ],		#time : DateAndTime [ '2017-07-29T14:12:11.162586+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'bleedingEdge:',			#protocol : #'symbolic versions',			#sourceCode : 'bleedingEdge: spec\r\t<symbolicVersion: #\'bleedingEdge\'>',			#stamp : 'SvenVanCaekenberghe 7/11/2016 10:22',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ],		#time : DateAndTime [ '2017-07-29T14:12:11.164337+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'development:',			#protocol : #'symbolic versions',			#sourceCode : 'development: spec\r\t<symbolicVersion: #\'development\'>',			#stamp : 'SvenVanCaekenberghe 7/11/2016 10:22',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ],		#time : DateAndTime [ '2017-07-29T14:12:11.166962+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #project,			#protocol : #accessing,			#sourceCode : 'project\r\r\t^ project ifNil: [ | constructor |\r\t\t"Bootstrap Metacello if it is not already loaded"\r\t\t(self class baseConfigurationClassIfAbsent: []) ensureMetacello.\r\t\t"Construct Metacello project"\r\t\tconstructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.\r\t\tproject := constructor project.\r\t\tproject loadType: #linear. "change to #atomic if desired"\r\t\tproject ]',			#stamp : 'SvenVanCaekenberghe 6/22/2012 16:48',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ],		#time : DateAndTime [ '2017-07-29T14:12:11.168892+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'stable:',			#protocol : #'symbolic versions',			#sourceCode : 'stable: spec\r\t<symbolicVersion: #\'stable\'>\r\t\r\tspec for: #common version: \'16\'.\r\t\r\tspec for: #gemstone version: \'13\'.',			#stamp : 'SvenVanCaekenberghe 5/29/2017 14:40',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ],		#time : DateAndTime [ '2017-07-29T14:12:11.170678+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version10:',			#protocol : #versions,			#sourceCode : 'version10: spec\r\t<version: \'10\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.29\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.26\' ]',			#stamp : 'SvenVanCaekenberghe 3/29/2015 11:39',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ],		#time : DateAndTime [ '2017-07-29T14:12:11.172505+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version11:',			#protocol : #versions,			#sourceCode : 'version11: spec\r\t<version: \'11\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.30\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.30\' ]',			#stamp : 'SvenVanCaekenberghe 11/25/2015 09:34',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ],		#time : DateAndTime [ '2017-07-29T14:12:11.175054+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version12:',			#protocol : #versions,			#sourceCode : 'version12: spec\r\t<version: \'12\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.31\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.31\' ]',			#stamp : 'SvenVanCaekenberghe 1/22/2016 12:58',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ],		#time : DateAndTime [ '2017-07-29T14:12:11.176866+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version13:',			#protocol : #versions,			#sourceCode : 'version13: spec\r\t<version: \'13\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.33\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.33\' ]',			#stamp : 'SvenVanCaekenberghe 7/4/2016 14:58',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ],		#time : DateAndTime [ '2017-07-29T14:12:11.178651+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version14:',			#protocol : #versions,			#sourceCode : 'version14: spec\r\t<version: \'14\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.37\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.35\' ]',			#stamp : 'SvenVanCaekenberghe 2/2/2017 13:46',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ],		#time : DateAndTime [ '2017-07-29T14:12:11.181171+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version15:',			#protocol : #versions,			#sourceCode : 'version15: spec\r\t<version: \'15\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.37\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.36\' ]',			#stamp : 'SvenVanCaekenberghe 2/2/2017 13:50',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ],		#time : DateAndTime [ '2017-07-29T14:12:11.183286+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version16:',			#protocol : #versions,			#sourceCode : 'version16: spec\r\t<version: \'16\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.42\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.39\' ]',			#stamp : 'SvenVanCaekenberghe 5/29/2017 14:40',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ],		#time : DateAndTime [ '2017-07-29T14:12:11.185655+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version1:',			#protocol : #versions,			#sourceCode : 'version1: spec\r\t<version: \'1\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.17\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.15\' ]',			#stamp : 'SvenVanCaekenberghe 9/27/2012 20:29',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ],		#time : DateAndTime [ '2017-07-29T14:12:11.187633+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version2:',			#protocol : #versions,			#sourceCode : 'version2: spec\r\t<version: \'2\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.19\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.16\' ]',			#stamp : 'SvenVanCaekenberghe 12/18/2012 10:27',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ],		#time : DateAndTime [ '2017-07-29T14:12:11.190352+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version3:',			#protocol : #versions,			#sourceCode : 'version3: spec\r\t<version: \'3\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.20\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.16\' ]',			#stamp : 'SvenVanCaekenberghe 5/29/2013 15:54',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ],		#time : DateAndTime [ '2017-07-29T14:12:11.192222+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version4:',			#protocol : #versions,			#sourceCode : 'version4: spec\r\t<version: \'4\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.23\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.18\' ]',			#stamp : 'SvenVanCaekenberghe 8/30/2013 11:12',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ],		#time : DateAndTime [ '2017-07-29T14:12:11.194037+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version5:',			#protocol : #versions,			#sourceCode : 'version5: spec\r\t<version: \'5\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.24\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.19\' ]',			#stamp : 'SvenVanCaekenberghe 9/3/2013 12:22',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ],		#time : DateAndTime [ '2017-07-29T14:12:11.195852+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version6:',			#protocol : #versions,			#sourceCode : 'version6: spec\r\t<version: \'6\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.24\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.20\' ]',			#stamp : 'SvenVanCaekenberghe 12/27/2013 19:02',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ],		#time : DateAndTime [ '2017-07-29T14:12:11.198537+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version7:',			#protocol : #versions,			#sourceCode : 'version7: spec\r\t<version: \'7\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.24\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.21\' ]',			#stamp : 'SvenVanCaekenberghe 12/27/2013 21:44',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ],		#time : DateAndTime [ '2017-07-29T14:12:11.200428+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version8:',			#protocol : #versions,			#sourceCode : 'version8: spec\r\t<version: \'8\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.24\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.22\' ]',			#stamp : 'SvenVanCaekenberghe 1/21/2014 20:08',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ],		#time : DateAndTime [ '2017-07-29T14:12:11.202271+09:00' ],		#trigger : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfNeoJSON,				#isMetaSide : false			},			#name : #'version9:',			#protocol : #versions,			#sourceCode : 'version9: spec\r\t<version: \'9\' imports: #(\'1-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tblessing: #release;\r\t\t\tpackage: \'Neo-JSON-Core\' with: \'Neo-JSON-Core-SvenVanCaekenberghe.27\';\r\t\t\tpackage: \'Neo-JSON-Tests\' with: \'Neo-JSON-Tests-SvenVanCaekenberghe.24\' ]',			#stamp : 'SvenVanCaekenberghe 4/24/2014 13:29',			#package : #ConfigurationOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-07-29T14:12:13.183311+09:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ConfigurationOfWebBrowser-TorstenBergmann.5'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ],		#time : DateAndTime [ '2017-07-29T14:12:13.305069+09:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ConfigurationOfWebBrowser\r\tinstanceVariableNames: \'project\'\r\tclassVariableNames: \'LastVersionLoad\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ConfigurationOfWebBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfWebBrowser,						#isMetaSide : false					},					#name : #project,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConfigurationOfWebBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'ConfigurationOfWebBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConfigurationOfWebBrowser,					#isMetaSide : false				},				#parent : @7,				#content : 'General and platform independent WebBrowser access for Pharo 5.0 onwards based on UFFI',				#stamp : 'TorstenBergmann 4/13/2016 08:47'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfWebBrowser,						#isMetaSide : false					},					#name : #LastVersionLoad,					#parent : @7				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'General and platform independent WebBrowser access for Pharo 5.0 onwards based on UFFI',		#newStamp : 'TorstenBergmann 4/13/2016 08:47'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ],		#time : DateAndTime [ '2017-07-29T14:12:13.307064+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ConfigurationOfWebBrowser,		#affectedPackageName : #ConfigurationOfWebBrowser	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ],		#time : DateAndTime [ '2017-07-29T14:12:13.348374+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ConfigurationOfWebBrowser\r\tinstanceVariableNames: \'project\'\r\tclassVariableNames: \'LastVersionLoad\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ConfigurationOfWebBrowser\''			},			#name : #ConfigurationOfWebBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfWebBrowser,						#isMetaSide : false					},					#name : #project,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConfigurationOfWebBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'ConfigurationOfWebBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConfigurationOfWebBrowser,					#isMetaSide : false				},				#parent : @8,				#content : 'General and platform independent WebBrowser access for Pharo 5.0 onwards based on UFFI',				#stamp : 'TorstenBergmann 4/13/2016 08:47'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfWebBrowser,						#isMetaSide : false					},					#name : #LastVersionLoad,					#parent : @8				}			],			#category : #ConfigurationOfWebBrowser,			#package : #ConfigurationOfWebBrowser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ],		#time : DateAndTime [ '2017-07-29T14:12:13.416075+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #DevelopmentSupport,			#protocol : #'development support',			#sourceCode : 'DevelopmentSupport\r\r"See the methods in the \'development support\' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."\r\t<apiDocumentation>',			#stamp : 'TorstenBergmann 4/13/2016 08:45',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ],		#time : DateAndTime [ '2017-07-29T14:12:13.418349+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #'baseConfigurationClassIfAbsent:',			#protocol : #private,			#sourceCode : 'baseConfigurationClassIfAbsent: aBlock\r\r\t^Smalltalk\r\t\tat: #\'ConfigurationOf\'\r\t\tifAbsent: [ \r\t\t\tself ensureMetacelloBaseConfiguration.\r\t\t\tSmalltalk at: #\'ConfigurationOf\' ifAbsent: aBlock ].',			#stamp : 'TorstenBergmann 4/13/2016 08:45',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ],		#time : DateAndTime [ '2017-07-29T14:12:13.422486+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #catalogChangeLog,			#protocol : #catalog,			#sourceCode : 'catalogChangeLog\r\t"Returns a paragraph describing the most important changes in the configuration class."\r\t^ \'\'',			#stamp : 'TorstenBergmann 4/13/2016 08:48',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ],		#time : DateAndTime [ '2017-07-29T14:12:13.424033+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #catalogContactInfo,			#protocol : #catalog,			#sourceCode : 'catalogContactInfo\r\t"Returns a paragraph describing contact information such as email, mailing lists and website."\r\t^ \'You can get in contact with the author on the Pharo mailinglist (http://lists.pharo.org)\'',			#stamp : 'TorstenBergmann 4/13/2016 08:49',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ],		#time : DateAndTime [ '2017-07-29T14:12:13.425288+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #catalogDescription,			#protocol : #catalog,			#sourceCode : 'catalogDescription\r\t"Returns a paragraph describing the project"\r\t^ \'General and platform independent WebBrowser access for Pharo 4.0 onwards based on NativeBoost, for Pharo 5.0 onwards based on UFFI\'',			#stamp : 'TorstenBergmann 4/13/2016 09:22',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ],		#time : DateAndTime [ '2017-07-29T14:12:13.426553+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #catalogKeyClassesAndExample,			#protocol : #catalog,			#sourceCode : 'catalogKeyClassesAndExample\r\t"Returns a paragraph or more describing the key classes of your project. You can use Pillar/Pier syntax to layout out the text i.e., ==Code== and - for bullet."\r\t^ \'Check the example on the class side of class ==WebBrowser==.\'',			#stamp : 'TorstenBergmann 4/13/2016 08:49',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ],		#time : DateAndTime [ '2017-07-29T14:12:13.427771+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #catalogKeywords,			#protocol : #catalog,			#sourceCode : 'catalogKeywords\r\t"Returns an array of symbols"\r\t^ #(webbrowser utility url platform web internet) ',			#stamp : 'TorstenBergmann 4/13/2016 08:50',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ],		#time : DateAndTime [ '2017-07-29T14:12:13.429123+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #ensureMetacello,			#protocol : #private,			#sourceCode : 'ensureMetacello\r\r\t(self baseConfigurationClassIfAbsent: []) ensureMetacello',			#stamp : 'TorstenBergmann 4/13/2016 08:45',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ],		#time : DateAndTime [ '2017-07-29T14:12:13.431686+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #ensureMetacelloBaseConfiguration,			#protocol : #private,			#sourceCode : 'ensureMetacelloBaseConfiguration\r  Smalltalk\r    at: #\'ConfigurationOf\'\r    ifAbsent: [ \r      | repository version |\r      repository := MCHttpRepository\r        location: \'http://smalltalkhub.com/mc/dkh/metacello/main\'\r        user: \'\'\r        password: \'\'.\r      repository\r        versionReaderForFileNamed: \'Metacello-Base-dkh.107\'\r        do: [ :reader | \r          version := reader version.\r          version load.\r          version workingCopy repositoryGroup addRepository: repository ] ]',			#stamp : 'TorstenBergmann 4/13/2016 08:45',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ],		#time : DateAndTime [ '2017-07-29T14:12:13.432956+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #isMetacelloConfig,			#protocol : #'metacello tool support',			#sourceCode : 'isMetacelloConfig\r\t"Answer true and the Metacello tools will operate on you"\r\t\r\t^true',			#stamp : 'TorstenBergmann 4/13/2016 08:45',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ],		#time : DateAndTime [ '2017-07-29T14:12:13.434271+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #load,			#protocol : #loading,			#sourceCode : 'load\r\t"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."\r\r\t"self load"\r\r\t<apiDocumentation>\r\t^(self project version: #stable) load',			#stamp : 'TorstenBergmann 4/13/2016 08:45',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ],		#time : DateAndTime [ '2017-07-29T14:12:13.435993+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #loadBleedingEdge,			#protocol : #loading,			#sourceCode : 'loadBleedingEdge\r\t"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."\r\r\t"self loadBleedingEdge"\r\r\t<apiDocumentation>\r\t^(self project version: #bleedingEdge) load',			#stamp : 'TorstenBergmann 4/13/2016 08:45',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ],		#time : DateAndTime [ '2017-07-29T14:12:13.437616+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #loadDevelopment,			#protocol : #loading,			#sourceCode : 'loadDevelopment\r\t"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."\r\r\t"self loadDevelopment"\r\r\t<apiDocumentation>\r\t^(self project version: #development) load',			#stamp : 'TorstenBergmann 4/13/2016 08:45',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ],		#time : DateAndTime [ '2017-07-29T14:12:13.440749+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #project,			#protocol : #accessing,			#sourceCode : 'project\r\r\t^self new project',			#stamp : 'TorstenBergmann 4/13/2016 08:45',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ],		#time : DateAndTime [ '2017-07-29T14:12:13.442417+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWebBrowser class',				#isMetaSide : true			},			#name : #validate,			#protocol : #'development support',			#sourceCode : 'validate\r\t"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). \r\tErrors identify specification issues that will result in unexpected behaviour when you load the configuration. \r\tCritical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.\r\tWarnings identify specification issues that are technically correct, but are worth take a look at."\r\r\t"self validate"\r\r\t<apiDocumentation>\r\tself ensureMetacello.\r\t^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore',			#stamp : 'TorstenBergmann 4/13/2016 08:45',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ],		#time : DateAndTime [ '2017-07-29T14:12:13.444064+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWebBrowser,				#isMetaSide : false			},			#name : #'baseline01:',			#protocol : #baselines,			#sourceCode : 'baseline01: spec\r\t<version: \'0.1-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://smalltalkhub.com/mc/TorstenBergmann/WebBrowser/main/\'.\r\t\tspec package: #\'WebBrowser-Core\'.\r\t\tspec \r\t\t\tgroup: \'Core\' with: #(#\'WebBrowser-Core\' );\r\t\t\tgroup: \'all\' with: #(\'Core\' );\r\t\t\tgroup: \'default\' with: #(\'all\' ). ].\r',			#stamp : 'TorstenBergmann 4/13/2016 08:46',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ],		#time : DateAndTime [ '2017-07-29T14:12:13.445653+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWebBrowser,				#isMetaSide : false			},			#name : #'baseline02:',			#protocol : #baselines,			#sourceCode : 'baseline02: spec\r\t<version: \'0.2-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://smalltalkhub.com/mc/TorstenBergmann/WebBrowser/main/\'.\r\t\tspec package: #\'WebBrowser-Core\'.\r\t\tspec \r\t\t\tgroup: \'Core\' with: #(#\'WebBrowser-Core\' );\r\t\t\tgroup: \'all\' with: #(\'Core\' );\r\t\t\tgroup: \'default\' with: #(\'all\' ). ].\r',			#stamp : 'TorstenBergmann 4/13/2016 09:47',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ],		#time : DateAndTime [ '2017-07-29T14:12:13.447068+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWebBrowser,				#isMetaSide : false			},			#name : #'baseline03:',			#protocol : #baselines,			#sourceCode : 'baseline03: spec\r\t<version: \'0.3-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://smalltalkhub.com/mc/TorstenBergmann/WebBrowser/main/\'.\r\t\tspec package: #\'WebBrowser-Core\'.\r\t\tspec \r\t\t\tgroup: \'Core\' with: #(#\'WebBrowser-Core\' );\r\t\t\tgroup: \'all\' with: #(\'Core\' );\r\t\t\tgroup: \'default\' with: #(\'all\' ). ].\r',			#stamp : 'TorstenBergmann 4/13/2016 09:48',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ],		#time : DateAndTime [ '2017-07-29T14:12:13.448346+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWebBrowser,				#isMetaSide : false			},			#name : #customProjectAttributes,			#protocol : #accessing,			#sourceCode : 'customProjectAttributes\r    "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #\'Condition1\' with: #\'Condition2.\r\tFor more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes "\r\r    ^ #()',			#stamp : 'TorstenBergmann 4/13/2016 08:45',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ],		#time : DateAndTime [ '2017-07-29T14:12:13.44975+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWebBrowser,				#isMetaSide : false			},			#name : #'development:',			#protocol : #'symbolic versions',			#sourceCode : 'development: spec\r\t<symbolicVersion: #\'development\'>\r\r\tspec for: #\'common\' version: \'0.3-baseline\'.\r',			#stamp : 'TorstenBergmann 4/13/2016 09:48',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ],		#time : DateAndTime [ '2017-07-29T14:12:13.451075+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWebBrowser,				#isMetaSide : false			},			#name : #project,			#protocol : #accessing,			#sourceCode : 'project\r    ^ project\r        ifNil: [ \r            "Bootstrap Metacello if it is not already loaded"\r            self class ensureMetacello.\r            project := MetacelloMCProject new projectAttributes: self customProjectAttributes.\t"Create the Metacello project"\r            (Smalltalk at: #\'MetacelloVersionConstructor\') on: self project: project.\t"Construct the project"\r            project loadType: #\'linear\'.\t"change to #atomic if desired"\r            project ]',			#stamp : 'TorstenBergmann 4/13/2016 08:45',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ],		#time : DateAndTime [ '2017-07-29T14:12:13.4524+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWebBrowser,				#isMetaSide : false			},			#name : #'stable:',			#protocol : #'symbolic versions',			#sourceCode : 'stable: spec\r\t<symbolicVersion: #\'stable\'>\r\r\tspec for: #\'pharo4.x\' version: \'0.1.0\'.\r\tspec for: #\'common\' version: \'0.2.0\'.\r',			#stamp : 'TorstenBergmann 4/13/2016 09:48',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ],		#time : DateAndTime [ '2017-07-29T14:12:13.454405+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWebBrowser,				#isMetaSide : false			},			#name : #'version010:',			#protocol : #versions,			#sourceCode : 'version010: spec\r\t<version: \'0.1.0\' imports: #(\'0.1-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'stable\'.\r\t\tspec description: \'Version 0.1.0 for Pharo 4 based on NB\'.\r\t\tspec author: \'TorstenBergmann\'.\r\t\tspec timestamp: \'4/13/2016 08:46\'.\r\t\tspec package: #\'WebBrowser-Core\' with: \'WebBrowser-Core-TorstenBergmann.1\'. ].\r',			#stamp : 'TorstenBergmann 4/13/2016 09:22',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ],		#time : DateAndTime [ '2017-07-29T14:12:13.455763+09:00' ],		#trigger : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWebBrowser,				#isMetaSide : false			},			#name : #'version020:',			#protocol : #versions,			#sourceCode : 'version020: spec\r\t<version: \'0.2.0\' imports: #(\'0.2-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'stable\'.\r\t\tspec description: \'Version 0.2.0 for Pharo 5 based on UFFI\'.\r\t\tspec author: \'TorstenBergmann\'.\r\t\tspec timestamp: \'4/13/2016 08:46\'.\r\t\tspec package: #\'WebBrowser-Core\' with: \'WebBrowser-Core-TorstenBergmann.5\'. ].\r',			#stamp : 'TorstenBergmann 4/13/2016 09:47',			#package : #ConfigurationOfWebBrowser		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-07-29T14:12:21.218474+09:00' ],		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Neo-JSON-Core-SvenVanCaekenberghe.42'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ],		#time : DateAndTime [ '2017-07-29T14:12:21.363133+09:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONMapper\r\tinstanceVariableNames: \'mappings\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONMapper,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONMapper,						#isMetaSide : false					},					#name : #mappings,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMapper class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMapper class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMapper,					#isMetaSide : false				},				#parent : @7,				#content : 'I am NeoJSONMapper.\rI hold a mapping from schema identifiers to objects that known how to read or write instances from or to JSON.\r\rSchema identifiers are either Smalltalk classes or Symbols.\r\rI offer a builder interface to construct mappings. \r\rThe standard object mapping represents a Smalltalk object as a map, mapping some or all instance variables, or a set of accessors (getter/setter methods). Furthermore, for each value an optional schema can be specified.\r\rUsing a custom mapping, a reader and/or writer block can deal with special cases such as specific collection types with an optional schema for the elements, or a direct mapping of semi primitive types such as Date or DateAndTime.\r\rA mapping can be specified explicitely on a mapper, or can be resolved using the #neoJsonMapping: class method.\r\rHere are some examples:\r\r\tmapper mapAllInstVarsFor: Point.\r\tmapper for: TestObject do: [ :mapping |\r\t\tmapping mapInstVars: #(id name).\r\t\t(mapping mapInstVar: #timestamp to: \'created-at\') valueSchema: DateAndTime.\r\t\t(mapping mapInstVar: #points) valueSchema: #ArrayOfPoints.\r\t\t(mapping mapInstVar: #bytes) valueSchema: ByteArray ].\r\tmapper for: DateAndTime customDo: [ :mapping |\r\t\tmapping decoder: [ :string | DateAndTime fromString: string ].\r\t\tmapping encoder: [ :dateAndTime | dateAndTime printString ] ].\r\tmapper for: #ArrayOfPoints customDo: [ :mapping |\r\t\tmapping listOfElementSchema: Point ].  \r\tmapper for: ByteArray customDo: [ :mapping |\r\t\tmapping listOfType: ByteArray ]\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONMapper.\rI hold a mapping from schema identifiers to objects that known how to read or write instances from or to JSON.\r\rSchema identifiers are either Smalltalk classes or Symbols.\r\rI offer a builder interface to construct mappings. \r\rThe standard object mapping represents a Smalltalk object as a map, mapping some or all instance variables, or a set of accessors (getter/setter methods). Furthermore, for each value an optional schema can be specified.\r\rUsing a custom mapping, a reader and/or writer block can deal with special cases such as specific collection types with an optional schema for the elements, or a direct mapping of semi primitive types such as Date or DateAndTime.\r\rA mapping can be specified explicitely on a mapper, or can be resolved using the #neoJsonMapping: class method.\r\rHere are some examples:\r\r\tmapper mapAllInstVarsFor: Point.\r\tmapper for: TestObject do: [ :mapping |\r\t\tmapping mapInstVars: #(id name).\r\t\t(mapping mapInstVar: #timestamp to: \'created-at\') valueSchema: DateAndTime.\r\t\t(mapping mapInstVar: #points) valueSchema: #ArrayOfPoints.\r\t\t(mapping mapInstVar: #bytes) valueSchema: ByteArray ].\r\tmapper for: DateAndTime customDo: [ :mapping |\r\t\tmapping decoder: [ :string | DateAndTime fromString: string ].\r\t\tmapping encoder: [ :dateAndTime | dateAndTime printString ] ].\r\tmapper for: #ArrayOfPoints customDo: [ :mapping |\r\t\tmapping listOfElementSchema: Point ].  \r\tmapper for: ByteArray customDo: [ :mapping |\r\t\tmapping listOfType: ByteArray ]\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ],		#time : DateAndTime [ '2017-07-29T14:12:21.364023+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Neo-JSON-Core,		#affectedPackageName : #Neo-JSON-Core	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ],		#time : DateAndTime [ '2017-07-29T14:12:21.403877+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONMapper\r\tinstanceVariableNames: \'mappings\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONMapper,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONMapper,						#isMetaSide : false					},					#name : #mappings,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMapper class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMapper class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMapper,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONMapper.\rI hold a mapping from schema identifiers to objects that known how to read or write instances from or to JSON.\r\rSchema identifiers are either Smalltalk classes or Symbols.\r\rI offer a builder interface to construct mappings. \r\rThe standard object mapping represents a Smalltalk object as a map, mapping some or all instance variables, or a set of accessors (getter/setter methods). Furthermore, for each value an optional schema can be specified.\r\rUsing a custom mapping, a reader and/or writer block can deal with special cases such as specific collection types with an optional schema for the elements, or a direct mapping of semi primitive types such as Date or DateAndTime.\r\rA mapping can be specified explicitely on a mapper, or can be resolved using the #neoJsonMapping: class method.\r\rHere are some examples:\r\r\tmapper mapAllInstVarsFor: Point.\r\tmapper for: TestObject do: [ :mapping |\r\t\tmapping mapInstVars: #(id name).\r\t\t(mapping mapInstVar: #timestamp to: \'created-at\') valueSchema: DateAndTime.\r\t\t(mapping mapInstVar: #points) valueSchema: #ArrayOfPoints.\r\t\t(mapping mapInstVar: #bytes) valueSchema: ByteArray ].\r\tmapper for: DateAndTime customDo: [ :mapping |\r\t\tmapping decoder: [ :string | DateAndTime fromString: string ].\r\t\tmapping encoder: [ :dateAndTime | dateAndTime printString ] ].\r\tmapper for: #ArrayOfPoints customDo: [ :mapping |\r\t\tmapping listOfElementSchema: Point ].  \r\tmapper for: ByteArray customDo: [ :mapping |\r\t\tmapping listOfType: ByteArray ]\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ],		#time : DateAndTime [ '2017-07-29T14:12:21.429354+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapper',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapper subclass: #NeoJSONReader\r\tinstanceVariableNames: \'readStream stringStream listClass mapClass propertyNamesAsSymbols\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONReader,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #readStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #stringStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #listClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #mapClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #propertyNamesAsSymbols,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONReader class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONReader class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONReader,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONReader.\rI am a NeoJSONMapper.\rI parse a JSON representation from a textual stream into Smalltalk objects.\r\rPrimitive types are automatically mapped to their Smalltalk counterpart: Numbers, Strings, Booleans and UndefinedObject.\rWhen parsing using #next, lists normally become Arrays and maps become Dictionaries.\rAn alternative listClass or mapClass can be specified.\r\rWhen parsing using #nextAs: a schema can be specified. This schema defines a mapping to be used.\r\rHere are some examples:\r\r\tNeoJSONReader fromString: \' [ 1,2,3 ] \'.\r\tNeoJSONReader fromString: \' [ 3.14159, true, false, null, "string" ] \'.\r\tNeoJSONReader fromString: \' { "x" : 1, "y" : 2 } \'.\r\t\r\t(NeoJSONReader on: \' { "x" : 1, "y" : 2 } \' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tnextAs: Point.\t\r\t\t\t\r\t(NeoJSONReader on: \'[ { "x" : 1, "y" : 2 }, { "x" : 3, "y" : 4 } ]\' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tfor: #ArrayOfPoints customDo: [ :mapping |\r\t\t\tmapping listOfElementSchema: Point ];\r\t\tnextAs: #ArrayOfPoints.\r\r\t(NeoJSONReader on: \'[ { "x" : 1, "y" : 2 }, { "x" : 3, "y" : 4 } ]\' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tnextListAs: Point.',				#stamp : 'SvenVanCaekenberghe 3/16/2016 11:23'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONReader.\rI am a NeoJSONMapper.\rI parse a JSON representation from a textual stream into Smalltalk objects.\r\rPrimitive types are automatically mapped to their Smalltalk counterpart: Numbers, Strings, Booleans and UndefinedObject.\rWhen parsing using #next, lists normally become Arrays and maps become Dictionaries.\rAn alternative listClass or mapClass can be specified.\r\rWhen parsing using #nextAs: a schema can be specified. This schema defines a mapping to be used.\r\rHere are some examples:\r\r\tNeoJSONReader fromString: \' [ 1,2,3 ] \'.\r\tNeoJSONReader fromString: \' [ 3.14159, true, false, null, "string" ] \'.\r\tNeoJSONReader fromString: \' { "x" : 1, "y" : 2 } \'.\r\t\r\t(NeoJSONReader on: \' { "x" : 1, "y" : 2 } \' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tnextAs: Point.\t\r\t\t\t\r\t(NeoJSONReader on: \'[ { "x" : 1, "y" : 2 }, { "x" : 3, "y" : 4 } ]\' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tfor: #ArrayOfPoints customDo: [ :mapping |\r\t\t\tmapping listOfElementSchema: Point ];\r\t\tnextAs: #ArrayOfPoints.\r\r\t(NeoJSONReader on: \'[ { "x" : 1, "y" : 2 }, { "x" : 3, "y" : 4 } ]\' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tnextListAs: Point.',		#newStamp : 'SvenVanCaekenberghe 3/16/2016 11:23'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ],		#time : DateAndTime [ '2017-07-29T14:12:21.43197+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapper',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapper subclass: #NeoJSONReader\r\tinstanceVariableNames: \'readStream stringStream listClass mapClass propertyNamesAsSymbols\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONReader,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #readStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #stringStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #listClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #mapClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #propertyNamesAsSymbols,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONReader class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONReader class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONReader,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONReader.\rI am a NeoJSONMapper.\rI parse a JSON representation from a textual stream into Smalltalk objects.\r\rPrimitive types are automatically mapped to their Smalltalk counterpart: Numbers, Strings, Booleans and UndefinedObject.\rWhen parsing using #next, lists normally become Arrays and maps become Dictionaries.\rAn alternative listClass or mapClass can be specified.\r\rWhen parsing using #nextAs: a schema can be specified. This schema defines a mapping to be used.\r\rHere are some examples:\r\r\tNeoJSONReader fromString: \' [ 1,2,3 ] \'.\r\tNeoJSONReader fromString: \' [ 3.14159, true, false, null, "string" ] \'.\r\tNeoJSONReader fromString: \' { "x" : 1, "y" : 2 } \'.\r\t\r\t(NeoJSONReader on: \' { "x" : 1, "y" : 2 } \' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tnextAs: Point.\t\r\t\t\t\r\t(NeoJSONReader on: \'[ { "x" : 1, "y" : 2 }, { "x" : 3, "y" : 4 } ]\' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tfor: #ArrayOfPoints customDo: [ :mapping |\r\t\t\tmapping listOfElementSchema: Point ];\r\t\tnextAs: #ArrayOfPoints.\r\r\t(NeoJSONReader on: \'[ { "x" : 1, "y" : 2 }, { "x" : 3, "y" : 4 } ]\' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tnextListAs: Point.',				#stamp : 'SvenVanCaekenberghe 3/16/2016 11:23'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ],		#time : DateAndTime [ '2017-07-29T14:12:21.436143+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapper',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapper subclass: #NeoJSONWriter\r\tinstanceVariableNames: \'writeStream prettyPrint level newLine asciiOnly writeNil\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #writeStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #prettyPrint,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #level,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #newLine,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #asciiOnly,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #writeNil,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriter.\rI am a NeoJSONMapper.\rI write a JSON representation of Smalltalk objects to a textual stream.\r\rObjects implementing #neoJsonOn: can be encoded.\rA number of primitive types, like Strings, Numbers, Booleans and UndefinedObject are treated specially.\rCollection are encoded as lists, except for Dictionaries that are encoded as maps.\r\rAll other objects need a mapping to help in doing the encoding.\r\rHere are some examples:\r\r\tNeoJSONWriter toString: #(1 2 3).\r\tNeoJSONWriter toString: { Float pi. true. false. \'string\' }.\r\tNeoJSONWriter toStringPretty: (Dictionary new at: #x put: 1; at: #y put: 2; yourself).\r\t\r\tString streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream)\r\t\t\tprettyPrint: true;\r\t\t\tmapInstVarsFor: Point;\r\t\t\tnextPut: (Array with: 1@3 with: -1@3) ].\r\t',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONWriter.\rI am a NeoJSONMapper.\rI write a JSON representation of Smalltalk objects to a textual stream.\r\rObjects implementing #neoJsonOn: can be encoded.\rA number of primitive types, like Strings, Numbers, Booleans and UndefinedObject are treated specially.\rCollection are encoded as lists, except for Dictionaries that are encoded as maps.\r\rAll other objects need a mapping to help in doing the encoding.\r\rHere are some examples:\r\r\tNeoJSONWriter toString: #(1 2 3).\r\tNeoJSONWriter toString: { Float pi. true. false. \'string\' }.\r\tNeoJSONWriter toStringPretty: (Dictionary new at: #x put: 1; at: #y put: 2; yourself).\r\t\r\tString streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream)\r\t\t\tprettyPrint: true;\r\t\t\tmapInstVarsFor: Point;\r\t\t\tnextPut: (Array with: 1@3 with: -1@3) ].\r\t',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ],		#time : DateAndTime [ '2017-07-29T14:12:21.438486+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapper',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapper subclass: #NeoJSONWriter\r\tinstanceVariableNames: \'writeStream prettyPrint level newLine asciiOnly writeNil\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #writeStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #prettyPrint,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #level,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #newLine,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #asciiOnly,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #writeNil,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriter.\rI am a NeoJSONMapper.\rI write a JSON representation of Smalltalk objects to a textual stream.\r\rObjects implementing #neoJsonOn: can be encoded.\rA number of primitive types, like Strings, Numbers, Booleans and UndefinedObject are treated specially.\rCollection are encoded as lists, except for Dictionaries that are encoded as maps.\r\rAll other objects need a mapping to help in doing the encoding.\r\rHere are some examples:\r\r\tNeoJSONWriter toString: #(1 2 3).\r\tNeoJSONWriter toString: { Float pi. true. false. \'string\' }.\r\tNeoJSONWriter toStringPretty: (Dictionary new at: #x put: 1; at: #y put: 2; yourself).\r\t\r\tString streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream)\r\t\t\tprettyPrint: true;\r\t\t\tmapInstVarsFor: Point;\r\t\t\tnextPut: (Array with: 1@3 with: -1@3) ].\r\t',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ],		#time : DateAndTime [ '2017-07-29T14:12:21.441942+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONMapping\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMapping,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONMapping, an abstract superclass for mapping definitions.\r',				#stamp : 'SvenVanCaekenberghe 3/23/2014 19:22'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONMapping, an abstract superclass for mapping definitions.\r',		#newStamp : 'SvenVanCaekenberghe 3/23/2014 19:22'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ],		#time : DateAndTime [ '2017-07-29T14:12:21.443299+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONMapping\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMapping,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONMapping, an abstract superclass for mapping definitions.\r',				#stamp : 'SvenVanCaekenberghe 3/23/2014 19:22'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ],		#time : DateAndTime [ '2017-07-29T14:12:21.447246+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapping',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapping subclass: #NeoJSONCustomMapping\r\tinstanceVariableNames: \'schemaName reader writer\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONCustomMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONCustomMapping,						#isMetaSide : false					},					#name : #schemaName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONCustomMapping,						#isMetaSide : false					},					#name : #reader,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONCustomMapping,						#isMetaSide : false					},					#name : #writer,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONCustomMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONCustomMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONCustomMapping,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONCustomMapping.\r\rI read the next JSON value and turn it into a Smalltalk object using a converter block.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONCustomMapping.\r\rI read the next JSON value and turn it into a Smalltalk object using a converter block.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ],		#time : DateAndTime [ '2017-07-29T14:12:21.448626+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapping',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapping subclass: #NeoJSONCustomMapping\r\tinstanceVariableNames: \'schemaName reader writer\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONCustomMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONCustomMapping,						#isMetaSide : false					},					#name : #schemaName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONCustomMapping,						#isMetaSide : false					},					#name : #reader,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONCustomMapping,						#isMetaSide : false					},					#name : #writer,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONCustomMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONCustomMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONCustomMapping,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONCustomMapping.\r\rI read the next JSON value and turn it into a Smalltalk object using a converter block.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ],		#time : DateAndTime [ '2017-07-29T14:12:21.452195+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapping',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapping subclass: #NeoJSONObjectMapping\r\tinstanceVariableNames: \'subjectClass properties allowNil\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONObjectMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONObjectMapping,						#isMetaSide : false					},					#name : #subjectClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONObjectMapping,						#isMetaSide : false					},					#name : #properties,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONObjectMapping,						#isMetaSide : false					},					#name : #allowNil,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONObjectMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONObjectMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONObjectMapping,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONObjectMapping.\rI describe how instances of a Smalltalk class are mapped to a JSON map.\r\rI do this using set of NeoJSONPropertyMappings.\r\rI know the Smalltalk class that I am a mapping for. This class is the schema identifier and is used to instanciate new objects.\r\rA mapping can be based on any combination of instance variables or accessors (getter/setter pairs). \r\rI offer a builder interface to constuct property mappings.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONObjectMapping.\rI describe how instances of a Smalltalk class are mapped to a JSON map.\r\rI do this using set of NeoJSONPropertyMappings.\r\rI know the Smalltalk class that I am a mapping for. This class is the schema identifier and is used to instanciate new objects.\r\rA mapping can be based on any combination of instance variables or accessors (getter/setter pairs). \r\rI offer a builder interface to constuct property mappings.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ],		#time : DateAndTime [ '2017-07-29T14:12:21.453549+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapping',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapping subclass: #NeoJSONObjectMapping\r\tinstanceVariableNames: \'subjectClass properties allowNil\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONObjectMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONObjectMapping,						#isMetaSide : false					},					#name : #subjectClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONObjectMapping,						#isMetaSide : false					},					#name : #properties,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONObjectMapping,						#isMetaSide : false					},					#name : #allowNil,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONObjectMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONObjectMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONObjectMapping,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONObjectMapping.\rI describe how instances of a Smalltalk class are mapped to a JSON map.\r\rI do this using set of NeoJSONPropertyMappings.\r\rI know the Smalltalk class that I am a mapping for. This class is the schema identifier and is used to instanciate new objects.\r\rA mapping can be based on any combination of instance variables or accessors (getter/setter pairs). \r\rI offer a builder interface to constuct property mappings.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ],		#time : DateAndTime [ '2017-07-29T14:12:21.457819+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONPropertyMapping\r\tinstanceVariableNames: \'propertyName valueSchema getter setter\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONPropertyMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #propertyName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #valueSchema,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #getter,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #setter,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONPropertyMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONPropertyMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONPropertyMapping,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONPropertyMapping.\rI describe how a property of a Smalltalk class maps to a JSON property.\r\rA property is either an instance variable or getter/setter pair.\rI hold a getter and setter block to do the actual work. The property name is used in JSON.\r\rOptionally, the schema for the value of my property can be specified. This is then used recursively.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONPropertyMapping.\rI describe how a property of a Smalltalk class maps to a JSON property.\r\rA property is either an instance variable or getter/setter pair.\rI hold a getter and setter block to do the actual work. The property name is used in JSON.\r\rOptionally, the schema for the value of my property can be specified. This is then used recursively.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ],		#time : DateAndTime [ '2017-07-29T14:12:21.459924+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONPropertyMapping\r\tinstanceVariableNames: \'propertyName valueSchema getter setter\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONPropertyMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #propertyName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #valueSchema,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #getter,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #setter,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONPropertyMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONPropertyMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONPropertyMapping,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONPropertyMapping.\rI describe how a property of a Smalltalk class maps to a JSON property.\r\rA property is either an instance variable or getter/setter pair.\rI hold a getter and setter block to do the actual work. The property name is used in JSON.\r\rOptionally, the schema for the value of my property can be specified. This is then used recursively.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ],		#time : DateAndTime [ '2017-07-29T14:12:21.464367+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONStreamingWriter\r\tinstanceVariableNames: \'jsonWriter first\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONStreamingWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONStreamingWriter,						#isMetaSide : false					},					#name : #jsonWriter,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONStreamingWriter,						#isMetaSide : false					},					#name : #first,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONStreamingWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONStreamingWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONStreamingWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONStreamingWriter.\rI help in writing streamed maps and lists.\r\rThis is an internal class used by NeoJSONWriter to deal with interleaving elements and separators as well as pretty printing.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONStreamingWriter.\rI help in writing streamed maps and lists.\r\rThis is an internal class used by NeoJSONWriter to deal with interleaving elements and separators as well as pretty printing.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ],		#time : DateAndTime [ '2017-07-29T14:12:21.465911+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONStreamingWriter\r\tinstanceVariableNames: \'jsonWriter first\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONStreamingWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONStreamingWriter,						#isMetaSide : false					},					#name : #jsonWriter,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONStreamingWriter,						#isMetaSide : false					},					#name : #first,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONStreamingWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONStreamingWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONStreamingWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONStreamingWriter.\rI help in writing streamed maps and lists.\r\rThis is an internal class used by NeoJSONWriter to deal with interleaving elements and separators as well as pretty printing.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ],		#time : DateAndTime [ '2017-07-29T14:12:21.472426+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Dictionary',				#traitCompositionSource : '{}',				#definitionSource : 'Dictionary subclass: #NeoJSONObject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONObject class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONObject,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONObject.\rI am a Dictionary.\r\rI behave more like a JavaScript object. I return nil for missing keys. I allow any property to be read or set by using a normal accessor message.\r\rThe following are equivalent:\r\r\tself foo.\r\tself at: #foo.\r\rAs are the following\r\r\tself foo: 1. \r\tself at: #foo put: 1.\r\t\rExcept that in the first case, self is returned.\r\rI can optionally be used by NeoJSONReader as mapClass (see #mapClass:).\r\rFor output, I act just like my superclass (it is thus not necessary to do any conversions).\r\rExample:\r\r\tNeoJSONObject fromString: \'{"foo":1,"bar":-2}\'.\r\tNeoJSONObject new foo: 1; bar: -2.\r\t{ #x -> 100. #y -> 200 } as: NeoJSONObject.\r\t(NeoJSONObject new data: (NeoJSONObject new id: #sensor1; value: 37.5)) asString.\r\rI use JSON as my printed representation. To convert me to JSON, use #printString or #asString.\r\rAdditionally, I support path access for nested instances of me, using #atPath: and #atPath:put:\r\rThe first is special because it returns nil as soon as a key is missing. The second is special because it creates extra levels (instances of me) as needed to follow the path of keys.\r\r\tNeoJSONObject new atPath: #(one two three) put: 42; yourself.\r\tNeoJSONObject new atPath: #(one two three) put: 42; atPath: #(one two three).\r\t\t',				#stamp : 'SvenVanCaekenberghe 4/26/2017 10:53'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONObject.\rI am a Dictionary.\r\rI behave more like a JavaScript object. I return nil for missing keys. I allow any property to be read or set by using a normal accessor message.\r\rThe following are equivalent:\r\r\tself foo.\r\tself at: #foo.\r\rAs are the following\r\r\tself foo: 1. \r\tself at: #foo put: 1.\r\t\rExcept that in the first case, self is returned.\r\rI can optionally be used by NeoJSONReader as mapClass (see #mapClass:).\r\rFor output, I act just like my superclass (it is thus not necessary to do any conversions).\r\rExample:\r\r\tNeoJSONObject fromString: \'{"foo":1,"bar":-2}\'.\r\tNeoJSONObject new foo: 1; bar: -2.\r\t{ #x -> 100. #y -> 200 } as: NeoJSONObject.\r\t(NeoJSONObject new data: (NeoJSONObject new id: #sensor1; value: 37.5)) asString.\r\rI use JSON as my printed representation. To convert me to JSON, use #printString or #asString.\r\rAdditionally, I support path access for nested instances of me, using #atPath: and #atPath:put:\r\rThe first is special because it returns nil as soon as a key is missing. The second is special because it creates extra levels (instances of me) as needed to follow the path of keys.\r\r\tNeoJSONObject new atPath: #(one two three) put: 42; yourself.\r\tNeoJSONObject new atPath: #(one two three) put: 42; atPath: #(one two three).\r\t\t',		#newStamp : 'SvenVanCaekenberghe 4/26/2017 10:53'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ],		#time : DateAndTime [ '2017-07-29T14:12:21.473742+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Dictionary',				#traitCompositionSource : '{}',				#definitionSource : 'Dictionary subclass: #NeoJSONObject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONObject class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONObject,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONObject.\rI am a Dictionary.\r\rI behave more like a JavaScript object. I return nil for missing keys. I allow any property to be read or set by using a normal accessor message.\r\rThe following are equivalent:\r\r\tself foo.\r\tself at: #foo.\r\rAs are the following\r\r\tself foo: 1. \r\tself at: #foo put: 1.\r\t\rExcept that in the first case, self is returned.\r\rI can optionally be used by NeoJSONReader as mapClass (see #mapClass:).\r\rFor output, I act just like my superclass (it is thus not necessary to do any conversions).\r\rExample:\r\r\tNeoJSONObject fromString: \'{"foo":1,"bar":-2}\'.\r\tNeoJSONObject new foo: 1; bar: -2.\r\t{ #x -> 100. #y -> 200 } as: NeoJSONObject.\r\t(NeoJSONObject new data: (NeoJSONObject new id: #sensor1; value: 37.5)) asString.\r\rI use JSON as my printed representation. To convert me to JSON, use #printString or #asString.\r\rAdditionally, I support path access for nested instances of me, using #atPath: and #atPath:put:\r\rThe first is special because it returns nil as soon as a key is missing. The second is special because it creates extra levels (instances of me) as needed to follow the path of keys.\r\r\tNeoJSONObject new atPath: #(one two three) put: 42; yourself.\r\tNeoJSONObject new atPath: #(one two three) put: 42; atPath: #(one two three).\r\t\t',				#stamp : 'SvenVanCaekenberghe 4/26/2017 10:53'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ],		#time : DateAndTime [ '2017-07-29T14:12:21.476987+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Error',				#traitCompositionSource : '{}',				#definitionSource : 'Error subclass: #NeoJSONParseError\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONParseError,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONParseError class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONParseError class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONParseError,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONParseError.\rI am an Error.\r\rI am signalled when JSON input is not valid while parsing.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONParseError.\rI am an Error.\r\rI am signalled when JSON input is not valid while parsing.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ],		#time : DateAndTime [ '2017-07-29T14:12:21.478232+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Error',				#traitCompositionSource : '{}',				#definitionSource : 'Error subclass: #NeoJSONParseError\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONParseError,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONParseError class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONParseError class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONParseError,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONParseError.\rI am an Error.\r\rI am signalled when JSON input is not valid while parsing.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ],		#time : DateAndTime [ '2017-07-29T14:12:21.481361+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NotFound',				#traitCompositionSource : '{}',				#definitionSource : 'NotFound subclass: #NeoJSONMappingNotFound\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONMappingNotFound,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMappingNotFound class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMappingNotFound class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMappingNotFound,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONMappingNotFound.\rI am a NotFound exception.\r\rI am signalled when no mapping is found for a schema.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONMappingNotFound.\rI am a NotFound exception.\r\rI am signalled when no mapping is found for a schema.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ],		#time : DateAndTime [ '2017-07-29T14:12:21.48327+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NotFound',				#traitCompositionSource : '{}',				#definitionSource : 'NotFound subclass: #NeoJSONMappingNotFound\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONMappingNotFound,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMappingNotFound class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMappingNotFound class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMappingNotFound,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONMappingNotFound.\rI am a NotFound exception.\r\rI am signalled when no mapping is found for a schema.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ],		#time : DateAndTime [ '2017-07-29T14:12:21.593926+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'customMappingFor:',			#protocol : #private,			#sourceCode : 'customMappingFor: schemaName\r\t^ self mappings\r\t\tat: schemaName\r\t\tifAbsentPut: [ \r\t\t\tNeoJSONCustomMapping new\r\t\t\t\tschemaName: schemaName;\r\t\t\t\tyourself ]',			#stamp : 'SvenVanCaekenberghe 3/22/2014 10:57',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ],		#time : DateAndTime [ '2017-07-29T14:12:21.602026+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'for:customDo:',			#protocol : #mapping,			#sourceCode : 'for: schemaName customDo: block\r\t"Execute the code in block to further customize the mapping for schemaName.\r\tCreate and add a new custom mapping for schemaName if necessary."\r\t\r\t| mapping |\r\tmapping := self customMappingFor: schemaName.\r\tblock value: mapping.\r\t^ mapping',			#stamp : 'SvenVanCaekenberghe 3/22/2014 10:56',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ],		#time : DateAndTime [ '2017-07-29T14:12:21.603306+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'for:do:',			#protocol : #mapping,			#sourceCode : 'for: smalltalkClass do: block\r\t"Execute the code in block to further customize the mapping for schemaName.\r\tCreate and add a new standard object mapping for schemaName if necessary."\r\t\r\t| mapping |\r\tmapping := self objectMappingFor: smalltalkClass.\r\tblock value: mapping.\r\t^ mapping',			#stamp : 'SvenVanCaekenberghe 3/22/2014 10:57',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ],		#time : DateAndTime [ '2017-07-29T14:12:21.604338+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'mapAllInstVarsFor:',			#protocol : #convencience,			#sourceCode : 'mapAllInstVarsFor: smalltalkClass\r\t"Map the instance variables of smalltalkClass and all its super classes"\r\r\t| mapping |\r\tmapping := self objectMappingFor: smalltalkClass.\r\tmapping mapAllInstVars.\r\t^ mapping',			#stamp : 'SvenVanCaekenberghe 3/22/2014 10:54',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ],		#time : DateAndTime [ '2017-07-29T14:12:21.605221+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'mapInstVarsFor:',			#protocol : #convencience,			#sourceCode : 'mapInstVarsFor: smalltalkClass\r\t"Map the instance variables of smalltalkClass"\r\r\t| mapping |\r\tmapping := self objectMappingFor: smalltalkClass.\r\tmapping mapInstVars.\r\t^ mapping',			#stamp : 'SvenVanCaekenberghe 3/22/2014 10:54',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ],		#time : DateAndTime [ '2017-07-29T14:12:21.606105+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'mappingFor:',			#protocol : #accessing,			#sourceCode : 'mappingFor: schema\r\t^ self \r\t\tmappingFor: schema \r\t\tifAbsent: [ NeoJSONMappingNotFound signalFor: schema in: self ]',			#stamp : 'SvenVanCaekenberghe 6/12/2012 15:48',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ],		#time : DateAndTime [ '2017-07-29T14:12:21.606937+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'mappingFor:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'mappingFor: schema ifAbsent: block\r\t(self mappings includesKey: schema)\r\t\tifFalse: [ self resolveMappingFor: schema ].\r\t^ self mappings\r\t\tat: schema\r\t\tifAbsent: block',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:24',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ],		#time : DateAndTime [ '2017-07-29T14:12:21.607782+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #mappings,			#protocol : #private,			#sourceCode : 'mappings\r\t^ mappings\r\t\tifNil: [ mappings := Dictionary new ]',			#stamp : 'SvenVanCaekenberghe 6/7/2012 14:55',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ],		#time : DateAndTime [ '2017-07-29T14:12:21.609187+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'objectMappingFor:',			#protocol : #private,			#sourceCode : 'objectMappingFor: smalltalkClass\r\t^ self mappings\r\t\tat: smalltalkClass\r\t\tifAbsentPut: [ \r\t\t\tNeoJSONObjectMapping new\r\t\t\t\tsubjectClass: smalltalkClass;\r\t\t\t\tyourself ]',			#stamp : 'SvenVanCaekenberghe 3/22/2014 10:54',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ],		#time : DateAndTime [ '2017-07-29T14:12:21.610071+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'resolveMappingFor:',			#protocol : #private,			#sourceCode : 'resolveMappingFor: class\r\t(class respondsTo: #neoJsonMapping:)\r\t\tifTrue: [ \r\t\t\tclass perform: #neoJsonMapping: with: self ]',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:29',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ],		#time : DateAndTime [ '2017-07-29T14:12:21.611071+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONReader class',				#isMetaSide : true			},			#name : #'fromString:',			#protocol : #convenience,			#sourceCode : 'fromString: string\r\t^ (self on: string readStream) next',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:26',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ],		#time : DateAndTime [ '2017-07-29T14:12:21.611977+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONReader class',				#isMetaSide : true			},			#name : #'fromString:as:',			#protocol : #convenience,			#sourceCode : 'fromString: string as: schema\r\t^ (self on: string readStream) nextAs: schema',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:30',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ],		#time : DateAndTime [ '2017-07-29T14:12:21.61293+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONReader class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: readStream\r\t"Initialize on readStream, which should be a character stream that \r\timplements #next, #peek, #atEnd and (optionally) #close."\r\r\t^ self new\r\t\ton: readStream;\r\t\tyourself',			#stamp : 'SvenVanCaekenberghe 6/13/2012 16:10',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ],		#time : DateAndTime [ '2017-07-29T14:12:21.613667+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #testing,			#sourceCode : 'atEnd\r\t^ readStream atEnd',			#stamp : 'SvenVanCaekenberghe 3/6/2013 14:46',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ],		#time : DateAndTime [ '2017-07-29T14:12:21.614506+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #close,			#protocol : #initialize-release,			#sourceCode : 'close\r\treadStream ifNotNil: [\r\t\treadStream close.\r\t\treadStream := nil ]',			#stamp : 'SvenVanCaekenberghe 6/2/2012 13:50',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ],		#time : DateAndTime [ '2017-07-29T14:12:21.615354+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #consumeWhitespace,			#protocol : #private,			#sourceCode : 'consumeWhitespace\r\t"Strip whitespaces from the input stream."\r\r\t[ readStream atEnd not and: [ readStream peek isSeparator ] ]\r\t\twhileTrue: [ \r\t\t\treadStream next ]',			#stamp : 'SvenVanCaekenberghe 6/2/2012 21:26',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ],		#time : DateAndTime [ '2017-07-29T14:12:21.616196+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'error:',			#protocol : #private,			#sourceCode : 'error: text\r\tNeoJSONParseError signal: text',			#stamp : 'SvenVanCaekenberghe 6/12/2012 15:54',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ],		#time : DateAndTime [ '2017-07-29T14:12:21.617654+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'expectChar:',			#protocol : #private,			#sourceCode : 'expectChar: character\r\t"Expect character and consume input and optional whitespace at the end,\r\t throw an error otherwise."\r\r\t(self matchChar: character)\r\t\tifFalse: [ self error: character asString, \' expected\' ]',			#stamp : 'SvenVanCaekenberghe 6/2/2012 14:01',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ],		#time : DateAndTime [ '2017-07-29T14:12:21.61855+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #failIfNotAtEnd,			#protocol : #parsing,			#sourceCode : 'failIfNotAtEnd\r\tself atEnd\r\t\tifFalse: [ self error: \'extraneous input detected\' ]',			#stamp : 'SvenVanCaekenberghe 5/29/2017 09:38',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ],		#time : DateAndTime [ '2017-07-29T14:12:21.619509+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize \r\tsuper initialize.\r\tpropertyNamesAsSymbols := false',			#stamp : 'SvenVanCaekenberghe 6/13/2012 09:39',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ],		#time : DateAndTime [ '2017-07-29T14:12:21.620349+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #listClass,			#protocol : #accessing,			#sourceCode : 'listClass\r\t"Return the collection type to use for JSON lists"\r\t\r\t^ listClass ifNil: [ Array ]',			#stamp : 'SvenVanCaekenberghe 6/13/2012 09:37',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ],		#time : DateAndTime [ '2017-07-29T14:12:21.621188+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'listClass:',			#protocol : #initialize-release,			#sourceCode : 'listClass: collectionClass\r\tlistClass := collectionClass',			#stamp : 'SvenVanCaekenberghe 6/13/2012 09:38',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ],		#time : DateAndTime [ '2017-07-29T14:12:21.622063+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #mapClass,			#protocol : #accessing,			#sourceCode : 'mapClass\r\t"Return the collection type to use for JSON maps"\r\t\r\t^ mapClass ifNil: [ Dictionary ]',			#stamp : 'SvenVanCaekenberghe 6/13/2012 09:37',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ],		#time : DateAndTime [ '2017-07-29T14:12:21.622896+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'mapClass:',			#protocol : #initialize-release,			#sourceCode : 'mapClass: collectionClass\r\tmapClass := collectionClass',			#stamp : 'SvenVanCaekenberghe 6/13/2012 09:38',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ],		#time : DateAndTime [ '2017-07-29T14:12:21.62373+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'match:do:',			#protocol : #private,			#sourceCode : 'match: string do: block\r\t"Try to read and consume string and execute block if successful.\r\tElse do nothing (but do not back up)"\r\r\t(string allSatisfy: [ :each | readStream peekFor: each ])\r\t\tifTrue: [ \r\t\t\tself consumeWhitespace.\r\t\t\tblock value ]',			#stamp : 'SvenVanCaekenberghe 12/3/2012 10:57',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ],		#time : DateAndTime [ '2017-07-29T14:12:21.624579+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'matchChar:',			#protocol : #private,			#sourceCode : 'matchChar: character\r\t"Tries to match character, consume input and \r\tanswer true if successful and consumes whitespace at the end.\r\tWhen character does not match, return false and leave stream untouched."\r\r\t^ (readStream peekFor: character)\r\t\tifTrue: [ \r\t\t\tself consumeWhitespace.\r\t\t\ttrue ]\r\t\tifFalse: [ false ]',			#stamp : 'SvenVanCaekenberghe 12/3/2012 10:51',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ],		#time : DateAndTime [ '2017-07-29T14:12:21.626044+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #next,			#protocol : #accessing,			#sourceCode : 'next\r\t"Primary interface to parse a JSON value.\r\tReturn either primitives, a listClass or a mapClass instance."\r\t\r\t^ self \r\t\tconsumeWhitespace; \r\t\tparseValue',			#stamp : 'SvenVanCaekenberghe 6/7/2012 16:56',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ],		#time : DateAndTime [ '2017-07-29T14:12:21.626976+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'nextAs:',			#protocol : #accessing,			#sourceCode : 'nextAs: schema\r\t"Secondary interface to parse JSON.\r\tReturn an object according to schema.\r\tIf schema is nil, act like #next"\r\t\r\t| mapping |\r\tschema ifNil: [ ^ self next ].\r\tself consumeWhitespace.\r\tmapping := self mappingFor: schema.\r\t^ mapping readFrom: self',			#stamp : 'SvenVanCaekenberghe 3/16/2016 11:21',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ],		#time : DateAndTime [ '2017-07-29T14:12:21.627842+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'nextListAs:',			#protocol : #accessing,			#sourceCode : 'nextListAs: schema\r\t"Secondary interface to parse JSON.\r\tReturn a list of objects, each element according to schema."\r\t\r\t^ self listClass streamContents: [ :stream |\r\t\t\tself parseListDo: [ \r\t\t\t\tstream nextPut: (self nextAs: schema) ] ]',			#stamp : 'SvenVanCaekenberghe 3/16/2016 10:58',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ],		#time : DateAndTime [ '2017-07-29T14:12:21.628697+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'on:',			#protocol : #initialize-release,			#sourceCode : 'on: aReadStream\r\t"Initialize on aReadStream, which should be a character stream that \r\timplements #next, #peek, #atEnd and (optionally) #close."\r\t\r\treadStream := aReadStream',			#stamp : 'SvenVanCaekenberghe 6/13/2012 16:10',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ],		#time : DateAndTime [ '2017-07-29T14:12:21.629554+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseCharacter,			#protocol : #parsing,			#sourceCode : 'parseCharacter\r\t| char |\r\t(char := readStream next) = $\\ \r\t\tifFalse: [ ^ char ].\r\t(\'/"\\\' includes: (char := readStream next))\r\t\tifTrue: [ ^ char ].\r\t(\'bfnrt\' includes: char)\r\t\tifTrue: [ ^ self unescapeChar: char ].\r\tchar = $u\r\t\tifTrue: [ ^ self parseCharacterHex ].\r\tchar \r\t\tifNil: [ self error: \'invalid escape, end of file\' ]\r\t\tifNotNil: [ self error: \'invalid escape character \\\' , char asString ]',			#stamp : 'SvenVanCaekenberghe 5/29/2017 10:25',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ],		#time : DateAndTime [ '2017-07-29T14:12:21.630431+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseCharacterHex,			#protocol : #private,			#sourceCode : 'parseCharacterHex\r\t| value codePoint |\r\tvalue := self parseCharacterHex4Value.\r\t(value < 16rD800 or: [ value > 16rDBFF ])\r\t\tifTrue: [ codePoint := value ]\r\t\tifFalse: [ | leadSurrogate trailSurrogate |\r\t\t\t"Characters not in the Basic Multilingual Plane are encoded as a UTF-16 surrogate pair"\r\t\t\t"See https://tools.ietf.org/html/rfc7159#section-7"\r\t\t\tleadSurrogate := value.\r\t\t\ttrailSurrogate := self parseTrailingSurrogateHexEscape.\r\t\t\tcodePoint := (leadSurrogate - 16rD800) * 16r400 + (trailSurrogate - 16rDC00).\r\t\t\tcodePoint := 16r10000 + codePoint ].\r\t^ Character codePoint: codePoint',			#stamp : 'SvenVanCaekenberghe 2/24/2016 14:48',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ],		#time : DateAndTime [ '2017-07-29T14:12:21.631303+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseCharacterHex4Value,			#protocol : #private,			#sourceCode : 'parseCharacterHex4Value\r\t| value |\r\tvalue := self parseCharacterHexDigit.\r\t3 timesRepeat: [ \r\t\tvalue := (value << 4) + self parseCharacterHexDigit ].\r\t^ value',			#stamp : 'SvenVanCaekenberghe 2/24/2016 14:41',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ],		#time : DateAndTime [ '2017-07-29T14:12:21.632266+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseCharacterHexDigit,			#protocol : #private,			#sourceCode : 'parseCharacterHexDigit\r\t| digit |\r\treadStream atEnd \r\t\tifFalse: [ \r\t\t\tdigit := readStream next asInteger.\r\t\t\t(digit between: "$0" 48 and: "$9" 57)\r\t\t\t\tifTrue: [ ^ digit - 48 ].\r\t\t\t(digit between: "$A" 65 and: "$F" 70)\r\t\t\t\tifTrue: [ ^ digit - 55 ].\r\t\t\t(digit between: "$a" 97 and: "$f" 102)\r\t\t\t\tifTrue: [ ^ digit - 87 ] ].\r\tself error: \'hex-digit expected\'',			#stamp : 'SvenVanCaekenberghe 6/2/2012 14:21',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ],		#time : DateAndTime [ '2017-07-29T14:12:21.633824+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'parseConstantDo:',			#protocol : #private,			#sourceCode : 'parseConstantDo: block\r\t"Parse and consume either true|false|nil|null and execute block \r\tor else do nothing (but do not back up).\r\tHand written implementation to avoid the use of #position:"\r\t\r\t(readStream peek = $t)\r\t\tifTrue: [\r\t\t\t^ self match: \'true\' do: [ block value: true ] ].\r\t(readStream peek = $f)\r\t\tifTrue: [\r\t\t\t^ self match: \'false\' do: [ block value: false ] ].\r\t(readStream peek = $n)\r\t\tifTrue: [\r\t\t\t^ self match: \'null\' do: [ block value: nil ] ]\r',			#stamp : 'SvenVanCaekenberghe 6/2/2012 14:16',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ],		#time : DateAndTime [ '2017-07-29T14:12:21.634766+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseList,			#protocol : #parsing,			#sourceCode : 'parseList\r\t^ self listClass \r\t\tstreamContents: [ :stream |\r\t\t\tself parseListElementsDo: [ :each |\r\t\t\t\tstream nextPut: each ] ]\r\r\t\t',			#stamp : 'SvenVanCaekenberghe 6/7/2012 17:17',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ],		#time : DateAndTime [ '2017-07-29T14:12:21.635631+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'parseListDo:',			#protocol : #parsing,			#sourceCode : 'parseListDo: block\r\tself expectChar: $[.\r\t(self matchChar: $]) \r\t\tifTrue: [ ^ self ].\r\t[ readStream atEnd ] \r\t\twhileFalse: [\r\t\t\tblock value.\r\t\t\t(self matchChar: $]) \r\t\t\t\tifTrue: [ ^ self ].\r\t\t\t(self matchChar: $,)\r\t\t\t\tifFalse: [ self error: \', or ] expected\' ] ].\r\tself error: \'incomplete list\'',			#stamp : 'SvenVanCaekenberghe 5/29/2017 10:56',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ],		#time : DateAndTime [ '2017-07-29T14:12:21.636515+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'parseListElementsDo:',			#protocol : #parsing,			#sourceCode : 'parseListElementsDo: block\r\tself parseListDo: [ \r\t\tblock value: self parseValue ]',			#stamp : 'SvenVanCaekenberghe 6/7/2012 17:16',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ],		#time : DateAndTime [ '2017-07-29T14:12:21.63741+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseMap,			#protocol : #parsing,			#sourceCode : 'parseMap\r\t| map |\r\tmap := self mapClass new.\r\tself parseMapKeysAndValuesDo: [ :key :value |\r\t\tmap at: key put: value ].\r\t^ map',			#stamp : 'SvenVanCaekenberghe 6/7/2012 17:23',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ],		#time : DateAndTime [ '2017-07-29T14:12:21.638266+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'parseMapDo:',			#protocol : #parsing,			#sourceCode : 'parseMapDo: block\r\tself expectChar: ${.\r\t(self matchChar: $})\r\t\tifTrue: [ ^ self ].\r\t[ readStream atEnd ] whileFalse: [\r\t\tblock value.\r\t\t(self matchChar: $}) \r\t\t\tifTrue: [ ^ self ].\r\t\t(self matchChar: $,)\r\t\t\tifFalse: [ self error: \', or } expected\' ] ].\r\tself error: \'incomplete map\'',			#stamp : 'SvenVanCaekenberghe 5/29/2017 10:56',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ],		#time : DateAndTime [ '2017-07-29T14:12:21.639168+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'parseMapKeysAndValuesDo:',			#protocol : #parsing,			#sourceCode : 'parseMapKeysAndValuesDo: block\r\tself parseMapKeysDo: [ :key |\r\t\tblock value: key value: self parseValue ]',			#stamp : 'SvenVanCaekenberghe 6/7/2012 17:22',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ],		#time : DateAndTime [ '2017-07-29T14:12:21.640016+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'parseMapKeysDo:',			#protocol : #parsing,			#sourceCode : 'parseMapKeysDo: block\r\tself parseMapDo: [ | key |\r\t\tkey := self parsePropertyName.\r\t\tself expectChar: $:.\r\t\tblock value: key ]',			#stamp : 'SvenVanCaekenberghe 6/7/2012 17:23',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ],		#time : DateAndTime [ '2017-07-29T14:12:21.641469+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseNumber,			#protocol : #parsing,			#sourceCode : 'parseNumber\r\t| negated number |\r\tnegated := readStream peekFor: $-.\r\tnumber := self parseNumberInteger.\r\t(readStream peekFor: $.)\r\t\tifTrue: [ number := number + self parseNumberFraction ].\r\t((readStream peekFor: $e) or: [ readStream peekFor: $E ])\r\t\tifTrue: [ number := number * self parseNumberExponent ].\r\tnegated\r\t\tifTrue: [ number := number negated ].\r\tself consumeWhitespace.\r\t^ number',			#stamp : 'SvenVanCaekenberghe 12/3/2012 11:08',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ],		#time : DateAndTime [ '2017-07-29T14:12:21.642368+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseNumberExponent,			#protocol : #parsing,			#sourceCode : 'parseNumberExponent\r\t| number negated |\r\tnumber := 0.\r\t(negated := readStream peekFor: $-)\r\t\tifFalse: [ readStream peekFor: $+ ].\r\t(readStream atEnd or: [ readStream peek isDigit not ])\r\t\tifTrue: [ self error: \'number exponent expected\' ].\r\t[ readStream atEnd not and: [ readStream peek isDigit ] ]\r\t\twhileTrue: [ number := 10 * number + readStream next digitValue ].\r\tnegated\r\t\tifTrue: [ number := number negated ].\r\tnumber positive \r\t\tifTrue: [ number > Float emax ifTrue: [ self error: \'number exponent too large\' ] ]\r\t\tifFalse: [ number < Float emin ifTrue: [ self error: \'number exponent too small\' ] ].\r\t^ 10 raisedTo: number',			#stamp : 'SvenVanCaekenberghe 5/29/2017 09:45',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ],		#time : DateAndTime [ '2017-07-29T14:12:21.643335+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseNumberFraction,			#protocol : #parsing,			#sourceCode : 'parseNumberFraction\r\t| number power |\r\tnumber := 0.\r\tpower := 1.0.\r\t[ readStream atEnd not and: [ readStream peek isDigit ] ] \r\t\twhileTrue: [\r\t\t\tnumber := 10 * number + readStream next digitValue.\r\t\t\tpower := power * 10.0 ].\r\t^ number / power',			#stamp : 'SvenVanCaekenberghe 6/2/2012 14:00',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ],		#time : DateAndTime [ '2017-07-29T14:12:21.644214+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseNumberInteger,			#protocol : #parsing,			#sourceCode : 'parseNumberInteger\r\t| number |\r\tnumber := nil.\r\t[ readStream atEnd not and: [ readStream peek isDigit ] ] \r\t\twhileTrue: [ \r\t\t\tnumber := 10 * (number ifNil: [ 0 ]) + readStream next digitValue ].\r\tnumber ifNil: [ self error: \'Integer digit expected\' ].\r\t^ number',			#stamp : 'SvenVanCaekenberghe 6/12/2012 16:15',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ],		#time : DateAndTime [ '2017-07-29T14:12:21.645092+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parsePropertyName,			#protocol : #parsing,			#sourceCode : 'parsePropertyName\r\t| name |\r\tname := self parseValue.\r\t^ name isString\r\t\tifTrue: [ \r\t\t\tpropertyNamesAsSymbols \r\t\t\t\tifTrue: [ name asSymbol ]\r\t\t\t\tifFalse: [ name ] ]\r\t\tifFalse: [ \r\t\t\tself error: \'property name must be a string, not \', name asString ]',			#stamp : 'SvenVanCaekenberghe 6/13/2012 09:40',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ],		#time : DateAndTime [ '2017-07-29T14:12:21.645975+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseString,			#protocol : #parsing,			#sourceCode : 'parseString\r\t| result |\r\t(readStream peekFor: $")\r\t\tifFalse: [ self error: \'" expected\' ].\r\tresult := self stringStreamContents: [ :stream | \r\t\t[ readStream atEnd or: [ readStream peek = $" ] ] \r\t\t\twhileFalse: [ stream nextPut: self parseCharacter ] ].\r\tself expectChar: $".\r\t^ result',			#stamp : 'SvenVanCaekenberghe 3/10/2017 13:51',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ],		#time : DateAndTime [ '2017-07-29T14:12:21.646887+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseTrailingSurrogateHexEscape,			#protocol : #private,			#sourceCode : 'parseTrailingSurrogateHexEscape\r\t(readStream next = $\\ and: [ readStream next = $u ])\r\t\tifTrue: [ ^ self parseCharacterHex4Value ]\r\t\tifFalse: [ self error: \'trailing surrogate hex escape expected\' ]',			#stamp : 'SvenVanCaekenberghe 2/24/2016 14:49',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ],		#time : DateAndTime [ '2017-07-29T14:12:21.647753+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseValue,			#protocol : #parsing,			#sourceCode : 'parseValue\r\t| char |\r\treadStream atEnd ifFalse: [ \r\t\tchar := readStream peek.\r\t\tchar = ${\r\t\t\tifTrue: [ ^ self parseMap ].\r\t\tchar = $[\r\t\t\tifTrue: [ ^ self parseList ].\r\t\tchar = $"\r\t\t\tifTrue: [ ^ self parseString ].\r\t\t(char = $- or: [ char isDigit ])\r\t\t\tifTrue: [ ^ self parseNumber ].\r\t\tself parseConstantDo: [ :value | ^ value ] ].\r\tself error: \'invalid input: \', char asString',			#stamp : 'SvenVanCaekenberghe 6/12/2012 15:56',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ],		#time : DateAndTime [ '2017-07-29T14:12:21.64924+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'propertyNamesAsSymbols:',			#protocol : #initialize-release,			#sourceCode : 'propertyNamesAsSymbols: boolean\r\tpropertyNamesAsSymbols := boolean',			#stamp : 'SvenVanCaekenberghe 6/13/2012 09:39',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ],		#time : DateAndTime [ '2017-07-29T14:12:21.650146+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'stringStreamContents:',			#protocol : #private,			#sourceCode : 'stringStreamContents: block\r\t"Like String streamContents: block\r\tbut reusing the underlying buffer for improved efficiency"\r\t\r\tstringStream \r\t\tifNil: [ \r\t\t\tstringStream := (String new: 32) writeStream ].\r\tstringStream reset.\r\tblock value: stringStream.\r\t^ stringStream contents',			#stamp : 'SvenVanCaekenberghe 6/7/2012 16:54',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ],		#time : DateAndTime [ '2017-07-29T14:12:21.651+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'unescapeChar:',			#protocol : #private,			#sourceCode : 'unescapeChar: char\r\t"Handle one of the named character escapes, b, f, n, r or t. Else fail."\r\t\r\tchar = $b\r\t\tifTrue: [ ^ Character backspace ].\r\tchar = $f\r\t\tifTrue: [ ^ Character newPage ].\r\tchar = $n\r\t\tifTrue: [ ^ Character lf ].\r\tchar = $r\r\t\tifTrue: [ ^ Character cr ].\r\tchar = $t\r\t\tifTrue: [ ^ Character tab ].\r\tself error: \'Unknown escape char: \', (String with: char)',			#stamp : 'SvenVanCaekenberghe 6/7/2012 16:55',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ],		#time : DateAndTime [ '2017-07-29T14:12:21.65186+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONWriter class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: writeStream\r\t"Initialize on writeStream, which should be a character stream that \r\timplements #nextPut:, #nextPutAll:, #space and (optionally) #close."\r\r\t^ self new\r\t\ton: writeStream;\r\t\tyourself',			#stamp : 'SvenVanCaekenberghe 6/14/2012 09:54',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ],		#time : DateAndTime [ '2017-07-29T14:12:21.652691+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONWriter class',				#isMetaSide : true			},			#name : #'toString:',			#protocol : #convenience,			#sourceCode : 'toString: object\r\t^ String streamContents: [ :stream |\r\t\t\t(self on: stream) nextPut: object ]',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:27',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '182' ],		#self : OmReference [ '183' ],		#time : DateAndTime [ '2017-07-29T14:12:21.653772+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONWriter class',				#isMetaSide : true			},			#name : #'toStringPretty:',			#protocol : #convenience,			#sourceCode : 'toStringPretty: object\r\t^ String streamContents: [ :stream |\r\t\t\t(self on: stream)\r\t\t\t\tprettyPrint: true; \r\t\t\t\tnextPut: object ]',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:28',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '183' ],		#self : OmReference [ '184' ],		#time : DateAndTime [ '2017-07-29T14:12:21.65456+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'asciiOnly:',			#protocol : #initialize-release,			#sourceCode : 'asciiOnly: boolean\r\tasciiOnly := boolean',			#stamp : 'SvenVanCaekenberghe 9/3/2013 12:00',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '184' ],		#self : OmReference [ '185' ],		#time : DateAndTime [ '2017-07-29T14:12:21.655437+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #close,			#protocol : #initialize-release,			#sourceCode : 'close\r\twriteStream ifNotNil: [\r\t\twriteStream close.\r\t\twriteStream := nil ]',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:06',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '185' ],		#self : OmReference [ '186' ],		#time : DateAndTime [ '2017-07-29T14:12:21.656262+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'doesCodePointNeedEscaping:',			#protocol : #private,			#sourceCode : 'doesCodePointNeedEscaping: code\r\tcode < 32 ifTrue: [ ^ true ].\r\t( code = 34 or: [ code = 92 ]) ifTrue: [ ^ true ].\r\t^ asciiOnly and: [ code > 126 ]\t',			#stamp : 'SvenVanCaekenberghe 9/3/2013 11:58',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '186' ],		#self : OmReference [ '187' ],		#time : DateAndTime [ '2017-07-29T14:12:21.657727+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'encodeChar:',			#protocol : #private,			#sourceCode : 'encodeChar: char\r\t| code |\r\tcode := char codePoint.\r\t(self doesCodePointNeedEscaping: code)\r\t\tifTrue: [ self escapeChar: code ]\r\t\tifFalse: [ writeStream nextPut: char ]',			#stamp : 'SvenVanCaekenberghe 9/3/2013 11:55',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '187' ],		#self : OmReference [ '188' ],		#time : DateAndTime [ '2017-07-29T14:12:21.658595+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'encodeKey:value:',			#protocol : #private,			#sourceCode : 'encodeKey: key value: value\r\tself nextPut: key.\r\tself prettyPrintSpace.\r\twriteStream nextPut: $:.\r\tself prettyPrintSpace.\r\tself nextPut: value',			#stamp : 'SvenVanCaekenberghe 6/3/2012 19:41',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '188' ],		#self : OmReference [ '189' ],		#time : DateAndTime [ '2017-07-29T14:12:21.659417+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'encodeKey:value:as:',			#protocol : #private,			#sourceCode : 'encodeKey: key value: value as: valueSchema\r\tself nextPut: key.\r\tself prettyPrintSpace.\r\twriteStream nextPut: $:.\r\tself prettyPrintSpace.\r\tself nextPut: value as: valueSchema',			#stamp : 'SvenVanCaekenberghe 3/23/2014 21:53',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '189' ],		#self : OmReference [ '190' ],		#time : DateAndTime [ '2017-07-29T14:12:21.660265+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'escapeChar:',			#protocol : #private,			#sourceCode : 'escapeChar: code\r\tcode = 34\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\"\' ].\r\tcode = 92\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\\\\' ].\r\tcode = 47\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\/\' ].\r\tcode = 8\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\b\' ].\r\tcode = 12\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\f\' ].\t\t\r\tcode = 10\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\n\' ].\t\t\r\tcode = 13\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\r\' ].\t\t\r\tcode = 9\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\t\' ].\t\t\r\tself escapeUnicode: code',			#stamp : 'SvenVanCaekenberghe 2/24/2016 14:17',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '190' ],		#self : OmReference [ '191' ],		#time : DateAndTime [ '2017-07-29T14:12:21.661095+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'escapeUnicode4:',			#protocol : #private,			#sourceCode : 'escapeUnicode4: codePoint\r\twriteStream nextPutAll: \'\\u\'.\r\tcodePoint printOn: writeStream base: 16 nDigits: 4',			#stamp : 'SvenVanCaekenberghe 2/24/2016 14:29',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '191' ],		#self : OmReference [ '192' ],		#time : DateAndTime [ '2017-07-29T14:12:21.661939+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'escapeUnicode:',			#protocol : #private,			#sourceCode : 'escapeUnicode: codePoint\r\tcodePoint <= 16rFFFF\r\t\tifTrue: [ self escapeUnicode4: codePoint ]\r\t\tifFalse: [ \r\t\t\tcodePoint <= 16r10FFFF\r\t\t\t\tifTrue: [ | leadSurrogate trailSurrogate shifted |\r\t\t\t\t\t"Characters not in the Basic Multilingual Plane are encoded as a UTF-16 surrogate pair"\r\t\t\t\t\t"See https://tools.ietf.org/html/rfc7159#section-7"\r\t\t\t\t\tshifted := codePoint - 16r10000.\r\t\t\t\t\tleadSurrogate := 16rD800 + (shifted // 16r400).\r\t\t\t\t\ttrailSurrogate := 16rDC00 + (shifted \\\\ 16r400).\r\t\t\t\t\tself escapeUnicode4: leadSurrogate.\r\t\t\t\t\tself escapeUnicode4: trailSurrogate ]\r\t\t\t\tifFalse: [ self error: \'Character Unicode code point outside encoder range\' ] ]',			#stamp : 'SvenVanCaekenberghe 11/24/2016 10:06',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '192' ],		#self : OmReference [ '193' ],		#time : DateAndTime [ '2017-07-29T14:12:21.662796+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'indentedDo:',			#protocol : #private,			#sourceCode : 'indentedDo: block\r\tlevel := level + 1.\r\tblock value.\r\tlevel := level - 1',			#stamp : 'SvenVanCaekenberghe 6/3/2012 19:31',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '193' ],		#self : OmReference [ '194' ],		#time : DateAndTime [ '2017-07-29T14:12:21.663616+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tsuper initialize.\r\tself newLine: String cr.\r\tself prettyPrint: false.\r\tself asciiOnly: false.\r\tself writeNil: false.\r\tlevel := 0',			#stamp : 'SvenVanCaekenberghe 5/28/2014 20:43',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '194' ],		#self : OmReference [ '195' ],		#time : DateAndTime [ '2017-07-29T14:12:21.665039+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #listElementSeparator,			#protocol : #private,			#sourceCode : 'listElementSeparator\r\twriteStream nextPut: $,.\r\tself newlineIndent\r',			#stamp : 'SvenVanCaekenberghe 6/3/2012 19:32',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '195' ],		#self : OmReference [ '196' ],		#time : DateAndTime [ '2017-07-29T14:12:21.665901+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #mapElementSeparator,			#protocol : #private,			#sourceCode : 'mapElementSeparator\r\twriteStream nextPut: $,.\r\tself newlineIndent\r',			#stamp : 'SvenVanCaekenberghe 6/3/2012 19:32',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '196' ],		#self : OmReference [ '197' ],		#time : DateAndTime [ '2017-07-29T14:12:21.666774+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'newLine:',			#protocol : #initialize-release,			#sourceCode : 'newLine: string\r\tnewLine := string',			#stamp : 'SvenVanCaekenberghe 12/10/2012 16:27',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '197' ],		#self : OmReference [ '198' ],		#time : DateAndTime [ '2017-07-29T14:12:21.667658+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #newline,			#protocol : #accessing,			#sourceCode : 'newline\r\t"Write a newline on the stream that I wrap.\r\tWhat gets written depends on the configuration, see #newLine:"\r\t\r\twriteStream nextPutAll: newLine',			#stamp : 'SvenVanCaekenberghe 4/17/2014 11:58',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '198' ],		#self : OmReference [ '199' ],		#time : DateAndTime [ '2017-07-29T14:12:21.668813+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #newlineIndent,			#protocol : #private,			#sourceCode : 'newlineIndent\r\tprettyPrint\r\t\tifTrue: [ \r\t\t\tself newline.\r\t\t\tlevel timesRepeat: [ writeStream nextPut: Character tab ] ]',			#stamp : 'SvenVanCaekenberghe 4/17/2014 11:55',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '199' ],		#self : OmReference [ '200' ],		#time : DateAndTime [ '2017-07-29T14:12:21.669941+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'nextPut:',			#protocol : #accessing,			#sourceCode : 'nextPut: anObject\r\tanObject neoJsonOn: self',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:11',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '200' ],		#self : OmReference [ '201' ],		#time : DateAndTime [ '2017-07-29T14:12:21.670748+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'nextPut:as:',			#protocol : #accessing,			#sourceCode : 'nextPut: anObject as: schema\r\t"Secondary interface to write JSON.\r\tWrite objects according to schema."\r\t\r\t| mapping |\r\tschema ifNil: [ ^ self nextPut: anObject ].\r\tmapping := self mappingFor: schema.\r\t^ mapping writeObject: anObject on: self',			#stamp : 'SvenVanCaekenberghe 3/23/2014 21:57',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '201' ],		#self : OmReference [ '202' ],		#time : DateAndTime [ '2017-07-29T14:12:21.671604+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'on:',			#protocol : #initialize-release,			#sourceCode : 'on: aWriteStream\r\t"Initialize on aWriteStream, which should be a character stream that \r\timplements #nextPut:, #nextPutAll:, #space and (optionally) #close."\r\r\twriteStream := aWriteStream\r',			#stamp : 'SvenVanCaekenberghe 6/14/2012 09:54',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '202' ],		#self : OmReference [ '203' ],		#time : DateAndTime [ '2017-07-29T14:12:21.672491+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'prettyPrint:',			#protocol : #initialize-release,			#sourceCode : 'prettyPrint: boolean\r\tprettyPrint := boolean',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:06',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '203' ],		#self : OmReference [ '204' ],		#time : DateAndTime [ '2017-07-29T14:12:21.674002+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #prettyPrintSpace,			#protocol : #private,			#sourceCode : 'prettyPrintSpace\r\tprettyPrint\r\t\tifTrue: [ writeStream nextPut: Character space ]',			#stamp : 'SvenVanCaekenberghe 12/10/2012 16:33',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '204' ],		#self : OmReference [ '205' ],		#time : DateAndTime [ '2017-07-29T14:12:21.67485+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeBoolean:',			#protocol : #writing,			#sourceCode : 'writeBoolean: boolean\r\tboolean printOn: writeStream',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:18',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '205' ],		#self : OmReference [ '206' ],		#time : DateAndTime [ '2017-07-29T14:12:21.675666+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeFloat:',			#protocol : #writing,			#sourceCode : 'writeFloat: float\r\tfloat printOn: writeStream',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:19',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '206' ],		#self : OmReference [ '207' ],		#time : DateAndTime [ '2017-07-29T14:12:21.676499+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeInteger:',			#protocol : #writing,			#sourceCode : 'writeInteger: integer\r\tinteger printOn: writeStream\r\t',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:18',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '207' ],		#self : OmReference [ '208' ],		#time : DateAndTime [ '2017-07-29T14:12:21.677311+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeList:',			#protocol : #writing,			#sourceCode : 'writeList: collection\r\tself writeListStreamingDo: [ :jsonListWriter |\r\t\tcollection do: [ :each |\r\t\t\tjsonListWriter writeElement: each ] ]',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:20',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '208' ],		#self : OmReference [ '209' ],		#time : DateAndTime [ '2017-07-29T14:12:21.678138+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeListStreamingDo:',			#protocol : #writing,			#sourceCode : 'writeListStreamingDo: block\r\twriteStream nextPut: $[.\r\tself writeStreamingDo: block.\r\twriteStream nextPut: $]',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:19',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '209' ],		#self : OmReference [ '210' ],		#time : DateAndTime [ '2017-07-29T14:12:21.67897+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeMap:',			#protocol : #writing,			#sourceCode : 'writeMap: keyValueCollection\r\tself writeMapStreamingDo: [ :jsonMapWriter |\r\t\tkeyValueCollection keysAndValuesDo: [ :key :value |\r\t\t\tjsonMapWriter writeKey: key value: value ] ]',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:04',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '210' ],		#self : OmReference [ '211' ],		#time : DateAndTime [ '2017-07-29T14:12:21.679788+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeMapStreamingDo:',			#protocol : #writing,			#sourceCode : 'writeMapStreamingDo: block\r\twriteStream nextPut: ${.\r\tself writeStreamingDo: block.\r\twriteStream nextPut: $}',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:19',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '211' ],		#self : OmReference [ '212' ],		#time : DateAndTime [ '2017-07-29T14:12:21.681131+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #writeNil,			#protocol : #accessing,			#sourceCode : 'writeNil\r\t^ writeNil',			#stamp : 'SvenVanCaekenberghe 5/28/2014 20:44',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '212' ],		#self : OmReference [ '213' ],		#time : DateAndTime [ '2017-07-29T14:12:21.681997+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeNil:',			#protocol : #initialize-release,			#sourceCode : 'writeNil: boolean\r\twriteNil := boolean',			#stamp : 'SvenVanCaekenberghe 5/28/2014 20:43',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '213' ],		#self : OmReference [ '214' ],		#time : DateAndTime [ '2017-07-29T14:12:21.682849+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #writeNull,			#protocol : #writing,			#sourceCode : 'writeNull\r\twriteStream nextPutAll: \'null\'',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:15',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '214' ],		#self : OmReference [ '215' ],		#time : DateAndTime [ '2017-07-29T14:12:21.683731+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeObject:',			#protocol : #writing,			#sourceCode : 'writeObject: anObject\r\t| mapping |\r\tmapping := self mappingFor: anObject class.\r\tmapping\r\t\twriteObject: anObject\r\t\ton: self',			#stamp : 'SvenVanCaekenberghe 6/7/2012 15:55',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '215' ],		#self : OmReference [ '216' ],		#time : DateAndTime [ '2017-07-29T14:12:21.684822+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeStreamingDo:',			#protocol : #writing,			#sourceCode : 'writeStreamingDo: block\r\t| mapWriter |\r\tmapWriter := NeoJSONStreamingWriter on: self.\r\tself indentedDo: [\r\t\tblock value: mapWriter ].\r\tmapWriter wasUsed\r\t\tifTrue: [ self newlineIndent ]\r\t\tifFalse: [ self prettyPrintSpace ]',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:19',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '216' ],		#self : OmReference [ '217' ],		#time : DateAndTime [ '2017-07-29T14:12:21.685856+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeString:',			#protocol : #writing,			#sourceCode : 'writeString: string\r\twriteStream nextPut: $".\r\t1 to: string size do: [ :index |\r\t\tself encodeChar: (string at: index) ].\r\twriteStream nextPut: $"',			#stamp : 'MaxLeske 4/30/2017 13:40',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '217' ],		#self : OmReference [ '218' ],		#time : DateAndTime [ '2017-07-29T14:12:21.686799+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'decoder:',			#protocol : #mapping,			#sourceCode : 'decoder: block\r\t"Set a decoder block that accepts the next object representation read \r\tand converts it into the actual object to be returned."\r\r\tself reader: [ :jsonReader | | representation |\r\t\trepresentation := jsonReader next.\r\t\tblock value: representation ]',			#stamp : 'SvenVanCaekenberghe 6/13/2012 11:14',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '218' ],		#self : OmReference [ '219' ],		#time : DateAndTime [ '2017-07-29T14:12:21.687894+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'encoder:',			#protocol : #mapping,			#sourceCode : 'encoder: block\r\t"Set a encoder block that accepts the next object to be written \r\tand converts it into the actual representation to be written."\r\r\tself writer: [ :jsonWriter :anObject | | representation |\r\t\trepresentation := block value: anObject.\r\t\tjsonWriter nextPut: representation ]',			#stamp : 'SvenVanCaekenberghe 6/13/2012 11:14',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '219' ],		#self : OmReference [ '220' ],		#time : DateAndTime [ '2017-07-29T14:12:21.688945+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #identifier,			#protocol : #accessing,			#sourceCode : 'identifier\r\t^ schemaName ',			#stamp : 'SvenVanCaekenberghe 3/23/2014 19:24',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '220' ],		#self : OmReference [ '221' ],		#time : DateAndTime [ '2017-07-29T14:12:21.690526+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'listOfElementSchema:',			#protocol : #mapping,			#sourceCode : 'listOfElementSchema: elementSchema\r\t"Set the reader to a block that will create an instance of the\r\tstandard listClass while reading a list of elements of type elementSchema"\r\r\tself reader: [ :jsonReader |\r\t\tjsonReader listClass streamContents: [ :stream |\r\t\t\tjsonReader parseListDo: [ | element |\r\t\t\t\telement := jsonReader nextAs: elementSchema.\r\t\t\t\tstream nextPut: element ] ] ]\r\t"we do not set a writer, #neoJsonOn: should be sufficient"\r',			#stamp : 'SvenVanCaekenberghe 6/13/2012 11:38',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '221' ],		#self : OmReference [ '222' ],		#time : DateAndTime [ '2017-07-29T14:12:21.691542+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'listOfType:',			#protocol : #mapping,			#sourceCode : 'listOfType: collectionClass\r\t"Set the reader to a block that will create an instance of collectionClass \r\tusing #streamContents: while reading a list of elements"\r\r\tself reader: [ :jsonReader |\r\t\tcollectionClass streamContents: [ :stream |\r\t\t\tjsonReader parseListDo: [ | element |\r\t\t\t\telement := jsonReader next.\r\t\t\t\tstream nextPut: element ] ] ]\r\t"we do not set a writer, #neoJsonOn: should be sufficient"\r',			#stamp : 'SvenVanCaekenberghe 6/13/2012 11:25',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '222' ],		#self : OmReference [ '223' ],		#time : DateAndTime [ '2017-07-29T14:12:21.692611+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'listOfType:andElementSchema:',			#protocol : #mapping,			#sourceCode : 'listOfType: collectionClass andElementSchema: elementSchema\r\t"Set the reader to a block that will create an instance of collectionClass \r\tusing #streamContents: while reading a list of elements of type elementSchema"\r\r\tself reader: [ :jsonReader |\r\t\tcollectionClass streamContents: [ :stream |\r\t\t\tjsonReader parseListDo: [ | element |\r\t\t\t\telement := jsonReader nextAs: elementSchema.\r\t\t\t\tstream nextPut: element ] ] ]\r\t"we do not set a writer, #neoJsonOn: should be sufficient"\r',			#stamp : 'SvenVanCaekenberghe 6/13/2012 11:39',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '223' ],		#self : OmReference [ '224' ],		#time : DateAndTime [ '2017-07-29T14:12:21.693652+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'mapWithValueSchema:',			#protocol : #mapping,			#sourceCode : 'mapWithValueSchema: valueSchema\r\t"Set the reader to a block that will create an instance of the\r\tstandard mapClass while reading values of type valueSchema,\r\twith standard keys"\r\r\tself reader: [ :jsonReader | | map |\r\t\tmap := jsonReader mapClass new.\r\t\tjsonReader parseMapKeysDo: [ :key | | value |\r\t\t\t\tvalue := jsonReader nextAs: valueSchema.\r\t\t\t\tmap at: key put: value ].\r\t\tmap ]\r\t"we do not set a writer, #neoJsonOn: should be sufficient"\r',			#stamp : 'SvenVanCaekenberghe 8/30/2013 11:04',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '224' ],		#self : OmReference [ '225' ],		#time : DateAndTime [ '2017-07-29T14:12:21.69465+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'readFrom:',			#protocol : #parsing,			#sourceCode : 'readFrom: jsonReader\r\t^ reader \r\t\tifNil: [ jsonReader next ]\r\t\tifNotNil: [ reader value: jsonReader ]',			#stamp : 'SvenVanCaekenberghe 3/24/2014 10:34',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '225' ],		#self : OmReference [ '226' ],		#time : DateAndTime [ '2017-07-29T14:12:21.6956+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'reader:',			#protocol : #accessing,			#sourceCode : 'reader: block\r\t"Set the reader to block, a 1 argument block that when given \r\ta jsonReader as argument reads the object that I represent.\r\tWhen there is no reader block, the default #next will be used."\r\t\r\treader := block',			#stamp : 'SvenVanCaekenberghe 3/24/2014 10:36',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '226' ],		#self : OmReference [ '227' ],		#time : DateAndTime [ '2017-07-29T14:12:21.696524+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'schemaName:',			#protocol : #accessing,			#sourceCode : 'schemaName: schema\r\tschemaName := schema',			#stamp : 'SvenVanCaekenberghe 6/8/2012 21:09',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '227' ],		#self : OmReference [ '228' ],		#time : DateAndTime [ '2017-07-29T14:12:21.697423+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'writeObject:on:',			#protocol : #writing,			#sourceCode : 'writeObject: anObject on: jsonWriter\r\twriter \r\t\tifNil: [ anObject neoJsonOn: jsonWriter ]\r\t\tifNotNil: [ writer value: jsonWriter value: anObject ]',			#stamp : 'SvenVanCaekenberghe 3/23/2014 22:10',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '228' ],		#self : OmReference [ '229' ],		#time : DateAndTime [ '2017-07-29T14:12:21.698965+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'writer:',			#protocol : #accessing,			#sourceCode : 'writer: block\r\t"Set the writer to block, a 2 argument block that when given: a jsonWriter \r\tand the object to write will write the object that I represent.\r\tWhen there is no writer block, the default #neoJsonOn: will be used."\r\t\r\twriter := block',			#stamp : 'SvenVanCaekenberghe 3/23/2014 22:12',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '229' ],		#self : OmReference [ '230' ],		#time : DateAndTime [ '2017-07-29T14:12:21.699814+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapping,				#isMetaSide : false			},			#name : #identifier,			#protocol : #accessing,			#sourceCode : 'identifier\r\tself subclassResponsibility ',			#stamp : 'SvenVanCaekenberghe 3/23/2014 19:22',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '230' ],		#self : OmReference [ '231' ],		#time : DateAndTime [ '2017-07-29T14:12:21.700958+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapping,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: stream\r\tsuper printOn: stream.\r\tstream nextPut: $(; print: self identifier; nextPut: $)',			#stamp : 'SvenVanCaekenberghe 3/23/2014 19:24',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '231' ],		#self : OmReference [ '232' ],		#time : DateAndTime [ '2017-07-29T14:12:21.702207+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapping,				#isMetaSide : false			},			#name : #'readFrom:',			#protocol : #parsing,			#sourceCode : 'readFrom: jsonReader\r\tself subclassResponsibility ',			#stamp : 'SvenVanCaekenberghe 3/23/2014 19:23',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '232' ],		#self : OmReference [ '233' ],		#time : DateAndTime [ '2017-07-29T14:12:21.703182+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapping,				#isMetaSide : false			},			#name : #'writeObject:on:',			#protocol : #writing,			#sourceCode : 'writeObject: anObject on: jsonWriter\r\tself subclassResponsibility ',			#stamp : 'SvenVanCaekenberghe 3/23/2014 19:23',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '233' ],		#self : OmReference [ '234' ],		#time : DateAndTime [ '2017-07-29T14:12:21.70419+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #allowNil,			#protocol : #initialize-release,			#sourceCode : 'allowNil\r\tallowNil := true',			#stamp : 'SvenVanCaekenberghe 12/30/2015 11:44',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '234' ],		#self : OmReference [ '235' ],		#time : DateAndTime [ '2017-07-29T14:12:21.705187+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #identifier,			#protocol : #accessing,			#sourceCode : 'identifier\r\t^ subjectClass ',			#stamp : 'SvenVanCaekenberghe 3/23/2014 19:25',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '235' ],		#self : OmReference [ '236' ],		#time : DateAndTime [ '2017-07-29T14:12:21.706099+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tsuper initialize.\r\tproperties := OrderedCollection new.\r\tallowNil := false',			#stamp : 'SvenVanCaekenberghe 7/11/2016 10:54',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '236' ],		#self : OmReference [ '237' ],		#time : DateAndTime [ '2017-07-29T14:12:21.707071+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapAccessor:',			#protocol : #mapping,			#sourceCode : 'mapAccessor: accessor\r\t^ self mapAccessor: accessor to: accessor ',			#stamp : 'SvenVanCaekenberghe 6/12/2012 13:13',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '237' ],		#self : OmReference [ '238' ],		#time : DateAndTime [ '2017-07-29T14:12:21.708656+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapAccessor:mutator:to:',			#protocol : #mapping,			#sourceCode : 'mapAccessor: accessor mutator: mutator to: propertyName\r\t^ self \r\t\tmapProperty: propertyName\r\t\tgetter: [ :object | object perform: accessor ]\r\t\tsetter: [ :object :value | object perform: mutator with: value ] ',			#stamp : 'SvenVanCaekenberghe 6/12/2012 13:12',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '238' ],		#self : OmReference [ '239' ],		#time : DateAndTime [ '2017-07-29T14:12:21.70957+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapAccessor:to:',			#protocol : #mapping,			#sourceCode : 'mapAccessor: accessor to: propertyName\r\t^ self \r\t\tmapProperty: propertyName\r\t\tgetter: [ :object | object perform: accessor ]\r\t\tsetter: [ :object :value | object perform: accessor asMutator with: value ] ',			#stamp : 'SvenVanCaekenberghe 6/12/2012 13:13',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '239' ],		#self : OmReference [ '240' ],		#time : DateAndTime [ '2017-07-29T14:12:21.710469+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapAccessors:',			#protocol : #mapping,			#sourceCode : 'mapAccessors: accessors\r\taccessors do: [ :each |\r\t\tself mapAccessor: each ]',			#stamp : 'SvenVanCaekenberghe 6/12/2012 13:14',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '240' ],		#self : OmReference [ '241' ],		#time : DateAndTime [ '2017-07-29T14:12:21.711337+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #mapAllInstVars,			#protocol : #convenience,			#sourceCode : 'mapAllInstVars\r\tself mapInstVars: subjectClass allInstVarNames',			#stamp : 'SvenVanCaekenberghe 6/6/2012 16:00',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '241' ],		#self : OmReference [ '242' ],		#time : DateAndTime [ '2017-07-29T14:12:21.712217+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapInstVar:',			#protocol : #mapping,			#sourceCode : 'mapInstVar: instVarName\r\t^ self mapInstVar: instVarName to: instVarName ',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:37',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '242' ],		#self : OmReference [ '243' ],		#time : DateAndTime [ '2017-07-29T14:12:21.713106+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapInstVar:to:',			#protocol : #mapping,			#sourceCode : 'mapInstVar: instVarName to: propertyName\r\t| index |\r\tindex := subjectClass \r\t\tinstVarIndexFor: instVarName \r\t\tifAbsent: [ self error: \'Inst var not found: \', instVarName printString ].\r\t^ self \r\t\tmapProperty: propertyName\r\t\tgetter: [ :object | object instVarAt: index ]\r\t\tsetter: [ :object :value | object instVarAt: index put: value ] ',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:36',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '243' ],		#self : OmReference [ '244' ],		#time : DateAndTime [ '2017-07-29T14:12:21.714071+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #mapInstVars,			#protocol : #convenience,			#sourceCode : 'mapInstVars\r\tself mapInstVars: subjectClass instVarNames',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:59',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '244' ],		#self : OmReference [ '245' ],		#time : DateAndTime [ '2017-07-29T14:12:21.714998+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapInstVars:',			#protocol : #mapping,			#sourceCode : 'mapInstVars: instVarNames\r\tinstVarNames do: [ :each |\r\t\tself mapInstVar: each ]',			#stamp : 'SvenVanCaekenberghe 6/6/2012 16:00',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '245' ],		#self : OmReference [ '246' ],		#time : DateAndTime [ '2017-07-29T14:12:21.716433+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapProperty:getter:setter:',			#protocol : #mapping,			#sourceCode : 'mapProperty: propertyName getter: readBlock setter: writeBlock\r\t| propertyMapping |\r\tpropertyMapping := NeoJSONPropertyMapping new.\r\tpropertyMapping \r\t\tpropertyName: propertyName;\r\t\tgetter: readBlock;\r\t\tsetter: writeBlock.\r\tproperties removeAllSuchThat: [ :each | each propertyName = propertyName ].\r\tproperties addLast: propertyMapping.\r\t^ propertyMapping ',			#stamp : 'SvenVanCaekenberghe 7/11/2016 11:01',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '246' ],		#self : OmReference [ '247' ],		#time : DateAndTime [ '2017-07-29T14:12:21.717327+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'propertyNamed:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'propertyNamed: propertyName ifAbsent: block\r\t^ properties detect: [ :each | each propertyName = propertyName ] ifNone: block',			#stamp : 'SvenVanCaekenberghe 7/11/2016 10:58',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '247' ],		#self : OmReference [ '248' ],		#time : DateAndTime [ '2017-07-29T14:12:21.718263+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'readFrom:',			#protocol : #parsing,			#sourceCode : 'readFrom: jsonReader\r\t| anObject |\r\tanObject := subjectClass new.\r\tallowNil ifTrue: [ \r\t\tjsonReader parseConstantDo: [ :value | \r\t\t\t^ value ifNotNil: [ jsonReader error: \'Unexpected boolean constant\' ] ] ].\r\tjsonReader parseMapKeysDo: [ :key |\r\t\t(self propertyNamed: key ifAbsent: [ nil ])\r\t\t\tifNil: [\r\t\t\t\t"read, skip & ignore value"\r\t\t\t\tjsonReader next ]\r\t\t\tifNotNil: [ :mapping |\r\t\t\t\tmapping readObject: anObject from: jsonReader ] ].\r\t^ anObject',			#stamp : 'SvenVanCaekenberghe 12/30/2015 11:48',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '248' ],		#self : OmReference [ '249' ],		#time : DateAndTime [ '2017-07-29T14:12:21.719194+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'subjectClass:',			#protocol : #accessing,			#sourceCode : 'subjectClass: smalltalkClass\r\tsubjectClass := smalltalkClass',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:32',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '249' ],		#self : OmReference [ '250' ],		#time : DateAndTime [ '2017-07-29T14:12:21.72006+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'writeObject:on:',			#protocol : #writing,			#sourceCode : 'writeObject: anObject on: jsonWriter\r\tjsonWriter writeMapStreamingDo: [ :jsonMapWriter |\r\t\tproperties do: [ :each |\r\t\t\teach writeObject: anObject on: jsonMapWriter ] ]',			#stamp : 'SvenVanCaekenberghe 7/11/2016 10:54',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '250' ],		#self : OmReference [ '251' ],		#time : DateAndTime [ '2017-07-29T14:12:21.721038+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #'getter:',			#protocol : #accessing,			#sourceCode : 'getter: block\r\tgetter := block',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:34',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '251' ],		#self : OmReference [ '252' ],		#time : DateAndTime [ '2017-07-29T14:12:21.721979+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: stream\r\tsuper printOn: stream.\r\tstream nextPut: $(; print: propertyName; nextPut: $)',			#stamp : 'SvenVanCaekenberghe 7/4/2013 19:07',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '252' ],		#self : OmReference [ '253' ],		#time : DateAndTime [ '2017-07-29T14:12:21.722906+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #propertyName,			#protocol : #accessing,			#sourceCode : 'propertyName\r\t^ propertyName ',			#stamp : 'SvenVanCaekenberghe 7/11/2016 10:59',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '253' ],		#self : OmReference [ '254' ],		#time : DateAndTime [ '2017-07-29T14:12:21.723895+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #'propertyName:',			#protocol : #accessing,			#sourceCode : 'propertyName: string\r\tpropertyName := string',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:34',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '254' ],		#self : OmReference [ '255' ],		#time : DateAndTime [ '2017-07-29T14:12:21.725718+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #'readObject:from:',			#protocol : #parsing,			#sourceCode : 'readObject: anObject from: jsonReader\r\t| value |\r\tvalue := jsonReader nextAs: valueSchema.\r\tsetter value: anObject value: value',			#stamp : 'SvenVanCaekenberghe 6/8/2012 17:04',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '255' ],		#self : OmReference [ '256' ],		#time : DateAndTime [ '2017-07-29T14:12:21.726675+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #'setter:',			#protocol : #accessing,			#sourceCode : 'setter: block\r\tsetter := block',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:34',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '256' ],		#self : OmReference [ '257' ],		#time : DateAndTime [ '2017-07-29T14:12:21.727579+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #'valueSchema:',			#protocol : #accessing,			#sourceCode : 'valueSchema: schemaName\r\tvalueSchema := schemaName',			#stamp : 'SvenVanCaekenberghe 6/8/2012 17:01',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '257' ],		#self : OmReference [ '258' ],		#time : DateAndTime [ '2017-07-29T14:12:21.72848+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #'writeObject:on:',			#protocol : #writing,			#sourceCode : 'writeObject: anObject on: jsonMapWriter\r\t| value |\r\tvalue := getter value: anObject.\r\t(value notNil or: [ jsonMapWriter writeNil ])\r\t\tifTrue: [ jsonMapWriter writeKey: propertyName value: value as: valueSchema ] ',			#stamp : 'SvenVanCaekenberghe 5/28/2014 20:46',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '258' ],		#self : OmReference [ '259' ],		#time : DateAndTime [ '2017-07-29T14:12:21.729324+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONStreamingWriter class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: jsonWriter\r\t^ self new\r\t\ton: jsonWriter;\r\t\tyourself',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:05',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '259' ],		#self : OmReference [ '260' ],		#time : DateAndTime [ '2017-07-29T14:12:21.730136+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tsuper initialize.\r\tfirst := true',			#stamp : 'SvenVanCaekenberghe 6/6/2012 14:48',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '260' ],		#self : OmReference [ '261' ],		#time : DateAndTime [ '2017-07-29T14:12:21.73104+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #'on:',			#protocol : #initialize-release,			#sourceCode : 'on: aJSONWriter\r\tjsonWriter := aJSONWriter',			#stamp : 'SvenVanCaekenberghe 6/6/2012 14:49',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '261' ],		#self : OmReference [ '262' ],		#time : DateAndTime [ '2017-07-29T14:12:21.731932+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #wasUsed,			#protocol : #testing,			#sourceCode : 'wasUsed\r\t^ first not',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:00',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '262' ],		#self : OmReference [ '263' ],		#time : DateAndTime [ '2017-07-29T14:12:21.733525+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #'writeElement:',			#protocol : #writing,			#sourceCode : 'writeElement: value\r\tfirst \r\t\tifTrue: [ \r\t\t\tjsonWriter newlineIndent. \r\t\t\tfirst := false ]\r\t\tifFalse: [ \r\t\t\tjsonWriter listElementSeparator ].\r\tjsonWriter nextPut: value ',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:15',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '263' ],		#self : OmReference [ '264' ],		#time : DateAndTime [ '2017-07-29T14:12:21.734446+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #'writeKey:value:',			#protocol : #writing,			#sourceCode : 'writeKey: key value: value\r\tfirst \r\t\tifTrue: [ \r\t\t\tjsonWriter newlineIndent. \r\t\t\tfirst := false ]\r\t\tifFalse: [ \r\t\t\tjsonWriter mapElementSeparator ].\r\tjsonWriter encodeKey: key value: value ',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:01',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '264' ],		#self : OmReference [ '265' ],		#time : DateAndTime [ '2017-07-29T14:12:21.735358+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #'writeKey:value:as:',			#protocol : #writing,			#sourceCode : 'writeKey: key value: value as: valueSchema\r\tfirst \r\t\tifTrue: [ \r\t\t\tjsonWriter newlineIndent. \r\t\t\tfirst := false ]\r\t\tifFalse: [ \r\t\t\tjsonWriter mapElementSeparator ].\r\tjsonWriter encodeKey: key value: value as: valueSchema',			#stamp : 'SvenVanCaekenberghe 3/23/2014 21:53',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '265' ],		#self : OmReference [ '266' ],		#time : DateAndTime [ '2017-07-29T14:12:21.736971+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #writeNil,			#protocol : #accessing,			#sourceCode : 'writeNil\r\t^ jsonWriter writeNil',			#stamp : 'SvenVanCaekenberghe 5/28/2014 20:45',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '266' ],		#self : OmReference [ '267' ],		#time : DateAndTime [ '2017-07-29T14:12:21.739168+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Object,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeObject: self',			#stamp : 'SvenVanCaekenberghe 6/5/2012 22:29',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '267' ],		#self : OmReference [ '268' ],		#time : DateAndTime [ '2017-07-29T14:12:21.740309+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Number,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeFloat: self asFloat',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:17',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '268' ],		#self : OmReference [ '269' ],		#time : DateAndTime [ '2017-07-29T14:12:21.741681+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dictionary,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeMap: self',			#stamp : 'SvenVanCaekenberghe 6/3/2012 19:30',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '269' ],		#self : OmReference [ '270' ],		#time : DateAndTime [ '2017-07-29T14:12:21.742991+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONObject class',				#isMetaSide : true			},			#name : #'fromString:',			#protocol : #convenience,			#sourceCode : 'fromString: string\r\t"Parse string as JSON, so that maps become instances of me"\r\r\t^ (NeoJSONReader on: string readStream)\r\t\t\tmapClass: NeoJSONObject;\r\t\t\tpropertyNamesAsSymbols: true;\r\t\t\tnext',			#stamp : 'SvenVanCaekenberghe 9/8/2014 13:33',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '270' ],		#self : OmReference [ '271' ],		#time : DateAndTime [ '2017-07-29T14:12:21.744075+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObject,				#isMetaSide : false			},			#name : #'at:',			#protocol : #accessing,			#sourceCode : 'at: key\r\t"I return nil for missing keys.\r\tMy superclass would signal a KeyNotFound."\r\t\r\t^ self at: key ifAbsent: [ nil ]',			#stamp : 'SvenVanCaekenberghe 9/8/2014 11:43',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '271' ],		#self : OmReference [ '272' ],		#time : DateAndTime [ '2017-07-29T14:12:21.746277+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObject,				#isMetaSide : false			},			#name : #'atPath:',			#protocol : #accessing,			#sourceCode : 'atPath: keyCollection\r\t"Use each key in keyCollection recursively, stop when nil is encountered"\r\t\r\t| value |\r\tvalue := self.\r\tkeyCollection do: [ :each |\r\t\tvalue := value at: each.\r\t\tvalue ifNil: [ ^ nil ] ].\r\t^ value ',			#stamp : 'SvenVanCaekenberghe 4/26/2017 09:06',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '272' ],		#self : OmReference [ '273' ],		#time : DateAndTime [ '2017-07-29T14:12:21.747396+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObject,				#isMetaSide : false			},			#name : #'atPath:put:',			#protocol : #accessing,			#sourceCode : 'atPath: keyCollection put: newValue\r\t"Use each key in keyCollection recursively, create new levels when needed"\r\t\r\t| target |\r\tkeyCollection ifEmpty: [ ^ self ].\r\ttarget := self.\r\tkeyCollection allButLastDo: [ :each |\r\t\t(target at: each)\r\t\t\tifNil: [ target := target at: each put: target species new ]\r\t\t\tifNotNil: [ :subValue | target := subValue ] ].\r\t^ target at: keyCollection last put: newValue',			#stamp : 'SvenVanCaekenberghe 4/26/2017 11:29',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '273' ],		#self : OmReference [ '274' ],		#time : DateAndTime [ '2017-07-29T14:12:21.748543+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObject,				#isMetaSide : false			},			#name : #'doesNotUnderstand:',			#protocol : #'reflective operations',			#sourceCode : 'doesNotUnderstand: message\r\t"Overwritten so that \'self foo\' becomes \'self at: #foo\'\r\tand \'self foo: 1\' becomes \'self at: #foo put: 1\' except that self is returned"\r\t\r\t| key |\r\tkey := message selector.\r\tkey isUnary\r\t\tifTrue: [ ^ self at: key ].\r\t^ (key isKeyword and: [ key numArgs = 1 ])\r\t\tifTrue: [ self at: key allButLast asSymbol put: message arguments first; yourself ]\r\t\tifFalse: [ super doesNotUnderstand: message ]',			#stamp : 'SvenVanCaekenberghe 2/3/2017 14:29',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '274' ],		#self : OmReference [ '275' ],		#time : DateAndTime [ '2017-07-29T14:12:21.749552+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObject,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t"Overwritten to make this accessor available as key"\r\t\r\t^ self at: #name',			#stamp : 'SvenVanCaekenberghe 9/8/2014 11:46',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '275' ],		#self : OmReference [ '276' ],		#time : DateAndTime [ '2017-07-29T14:12:21.750474+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObject,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: stream\r\t"I use my JSON representation when printing myself"\r\t\r\t(NeoJSONWriter on: stream) nextPut: self',			#stamp : 'SvenVanCaekenberghe 9/8/2014 11:45',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '276' ],		#self : OmReference [ '277' ],		#time : DateAndTime [ '2017-07-29T14:12:21.751369+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObject,				#isMetaSide : false			},			#name : #value,			#protocol : #evaluating,			#sourceCode : 'value\r\t"Overwritten to make this accessor available as key"\r\t\r\t^ self at: #value',			#stamp : 'SvenVanCaekenberghe 9/8/2014 11:46',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '277' ],		#self : OmReference [ '278' ],		#time : DateAndTime [ '2017-07-29T14:12:21.75255+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UndefinedObject,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeNull',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:15',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '278' ],		#self : OmReference [ '279' ],		#time : DateAndTime [ '2017-07-29T14:12:21.75401+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeString: self',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:26',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '279' ],		#self : OmReference [ '280' ],		#time : DateAndTime [ '2017-07-29T14:12:21.755796+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Boolean,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeBoolean: self',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:14',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '280' ],		#self : OmReference [ '281' ],		#time : DateAndTime [ '2017-07-29T14:12:21.757025+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Integer,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeInteger: self',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:17',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '281' ],		#self : OmReference [ '282' ],		#time : DateAndTime [ '2017-07-29T14:12:21.758001+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OrderedDictionary,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeMap: self',			#stamp : 'SvenVanCaekenberghe 8/26/2015 12:03',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '282' ],		#self : OmReference [ '283' ],		#time : DateAndTime [ '2017-07-29T14:12:21.758997+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Collection,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeList: self',			#stamp : 'SvenVanCaekenberghe 6/3/2012 19:29',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '283' ],		#self : OmReference [ '284' ],		#time : DateAndTime [ '2017-07-29T14:12:21.759826+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SmallDictionary,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeMap: self',			#stamp : 'SvenVanCaekenberghe 6/3/2012 19:30',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '284' ],		#self : OmReference [ '285' ],		#time : DateAndTime [ '2017-07-29T14:12:21.760752+09:00' ],		#trigger : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMappingNotFound,				#isMetaSide : false			},			#name : #standardMessageText,			#protocol : #printing,			#sourceCode : 'standardMessageText\r\t^ String streamContents: [ :stream |\r\t\tstream << \'No mapping found for \'.\r\t\tstream print: self object.\r\t\tstream << \' in \'.\r\t\tstream print: self collection class ]',			#stamp : 'SvenVanCaekenberghe 6/12/2012 15:47',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-07-29T14:12:21.867475+09:00' ],		#prior : OmReference [ '285' ],		#self : OmReference [ '286' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Neo-JSON-Tests-SvenVanCaekenberghe.39'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '286' ],		#self : OmReference [ '287' ],		#time : DateAndTime [ '2017-07-29T14:12:22.033638+09:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONBenchmarkTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONBenchmarkTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONBenchmarkTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONBenchmarkTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONBenchmarkTests,					#isMetaSide : false				},				#parent : @7,				#content : 'I am NeoJSONBenchmarkTests.\r\rThis test is obviously dependent on hardware, but the margin is quite high.',				#stamp : 'SvenVanCaekenberghe 6/5/2012 10:05'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONBenchmarkTests.\r\rThis test is obviously dependent on hardware, but the margin is quite high.',		#newStamp : 'SvenVanCaekenberghe 6/5/2012 10:05'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '287' ],		#self : OmReference [ '288' ],		#time : DateAndTime [ '2017-07-29T14:12:22.034563+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Neo-JSON-Tests,		#affectedPackageName : #Neo-JSON-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '288' ],		#self : OmReference [ '289' ],		#time : DateAndTime [ '2017-07-29T14:12:22.073495+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONBenchmarkTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONBenchmarkTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONBenchmarkTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONBenchmarkTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONBenchmarkTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONBenchmarkTests.\r\rThis test is obviously dependent on hardware, but the margin is quite high.',				#stamp : 'SvenVanCaekenberghe 6/5/2012 10:05'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '289' ],		#self : OmReference [ '290' ],		#time : DateAndTime [ '2017-07-29T14:12:22.095763+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONObjectTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONObjectTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONObjectTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONObjectTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONObjectTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONObjectTests, I hold unit tests for NeoJSONObject.\r',				#stamp : 'SvenVanCaekenberghe 9/8/2014 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONObjectTests, I hold unit tests for NeoJSONObject.\r',		#newStamp : 'SvenVanCaekenberghe 9/8/2014 12:39'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '290' ],		#self : OmReference [ '291' ],		#time : DateAndTime [ '2017-07-29T14:12:22.097394+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONObjectTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONObjectTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONObjectTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONObjectTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONObjectTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONObjectTests, I hold unit tests for NeoJSONObject.\r',				#stamp : 'SvenVanCaekenberghe 9/8/2014 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '291' ],		#self : OmReference [ '292' ],		#time : DateAndTime [ '2017-07-29T14:12:22.100651+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONReaderTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONReaderTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONReaderTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONReaderTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONReaderTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONReaderTests, a test suite for NeoJSONReader.',				#stamp : 'SvenVanCaekenberghe 6/2/2012 14:02'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONReaderTests, a test suite for NeoJSONReader.',		#newStamp : 'SvenVanCaekenberghe 6/2/2012 14:02'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '292' ],		#self : OmReference [ '293' ],		#time : DateAndTime [ '2017-07-29T14:12:22.102004+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONReaderTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONReaderTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONReaderTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONReaderTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONReaderTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONReaderTests, a test suite for NeoJSONReader.',				#stamp : 'SvenVanCaekenberghe 6/2/2012 14:02'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '293' ],		#self : OmReference [ '294' ],		#time : DateAndTime [ '2017-07-29T14:12:22.105555+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONWriteReadTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONWriteReadTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriteReadTests.',				#stamp : 'SvenVanCaekenberghe 6/4/2012 15:34'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONWriteReadTests.',		#newStamp : 'SvenVanCaekenberghe 6/4/2012 15:34'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '294' ],		#self : OmReference [ '295' ],		#time : DateAndTime [ '2017-07-29T14:12:22.107072+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONWriteReadTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriteReadTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriteReadTests.',				#stamp : 'SvenVanCaekenberghe 6/4/2012 15:34'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '295' ],		#self : OmReference [ '296' ],		#time : DateAndTime [ '2017-07-29T14:12:22.111108+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONWriteReadTests',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONWriteReadTests subclass: #NeoJSONWriteReadAsciiOnlyTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONWriteReadAsciiOnlyTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadAsciiOnlyTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadAsciiOnlyTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadAsciiOnlyTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriteReadAsciiOnlyTests.',				#stamp : 'SvenVanCaekenberghe 11/24/2016 10:07'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONWriteReadAsciiOnlyTests.',		#newStamp : 'SvenVanCaekenberghe 11/24/2016 10:07'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '296' ],		#self : OmReference [ '297' ],		#time : DateAndTime [ '2017-07-29T14:12:22.1133+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONWriteReadTests',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONWriteReadTests subclass: #NeoJSONWriteReadAsciiOnlyTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriteReadAsciiOnlyTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadAsciiOnlyTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadAsciiOnlyTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadAsciiOnlyTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriteReadAsciiOnlyTests.',				#stamp : 'SvenVanCaekenberghe 11/24/2016 10:07'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '297' ],		#self : OmReference [ '298' ],		#time : DateAndTime [ '2017-07-29T14:12:22.116816+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONWriteReadTests',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONWriteReadTests subclass: #NeoJSONWriteReadMockStreamTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONWriteReadMockStreamTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadMockStreamTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadMockStreamTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadMockStreamTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriteReadMockStreamTests.',				#stamp : 'SvenVanCaekenberghe 11/24/2016 10:07'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONWriteReadMockStreamTests.',		#newStamp : 'SvenVanCaekenberghe 11/24/2016 10:07'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '298' ],		#self : OmReference [ '299' ],		#time : DateAndTime [ '2017-07-29T14:12:22.118221+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONWriteReadTests',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONWriteReadTests subclass: #NeoJSONWriteReadMockStreamTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriteReadMockStreamTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadMockStreamTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadMockStreamTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadMockStreamTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriteReadMockStreamTests.',				#stamp : 'SvenVanCaekenberghe 11/24/2016 10:07'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '299' ],		#self : OmReference [ '300' ],		#time : DateAndTime [ '2017-07-29T14:12:22.121402+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONWriteReadTests',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONWriteReadTests subclass: #NeoJSONWriteReadPrettyPrintedTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONWriteReadPrettyPrintedTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadPrettyPrintedTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadPrettyPrintedTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadPrettyPrintedTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriteReadPrettyPrintedTests.',				#stamp : 'SvenVanCaekenberghe 6/5/2012 09:50'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONWriteReadPrettyPrintedTests.',		#newStamp : 'SvenVanCaekenberghe 6/5/2012 09:50'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '300' ],		#self : OmReference [ '301' ],		#time : DateAndTime [ '2017-07-29T14:12:22.122694+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONWriteReadTests',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONWriteReadTests subclass: #NeoJSONWriteReadPrettyPrintedTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriteReadPrettyPrintedTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadPrettyPrintedTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadPrettyPrintedTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadPrettyPrintedTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriteReadPrettyPrintedTests.',				#stamp : 'SvenVanCaekenberghe 6/5/2012 09:50'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '301' ],		#self : OmReference [ '302' ],		#time : DateAndTime [ '2017-07-29T14:12:22.12583+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONWriterTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONWriterTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriterTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriterTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriterTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriterTests, a test suite for NeoJSONWriter.',				#stamp : 'SvenVanCaekenberghe 6/2/2012 22:20'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONWriterTests, a test suite for NeoJSONWriter.',		#newStamp : 'SvenVanCaekenberghe 6/2/2012 22:20'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '302' ],		#self : OmReference [ '303' ],		#time : DateAndTime [ '2017-07-29T14:12:22.12717+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONWriterTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriterTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriterTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriterTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriterTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriterTests, a test suite for NeoJSONWriter.',				#stamp : 'SvenVanCaekenberghe 6/2/2012 22:20'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '303' ],		#self : OmReference [ '304' ],		#time : DateAndTime [ '2017-07-29T14:12:22.131341+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONBenchmark\r\tinstanceVariableNames: \'objects json\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONBenchmark,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONBenchmark,						#isMetaSide : false					},					#name : #objects,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONBenchmark,						#isMetaSide : false					},					#name : #json,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONBenchmark class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONBenchmark class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONBenchmark,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONBenchmark.\rI hold 1000 objects of the form Dictionary(\'color\'->\'green\' \'enabled\'->false \'id\'->1 \'name\'->\'Name-1\' \'value\'->0.002 ) in an Array.\rI hold the JSON serialization of that as a String of the form \'[{"value":0.002,"enabled":false,"name":"Name-1","color":"green","id":1}, ...\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark read] bench.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark write] bench.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark read] timeToRun.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark write] timeToRun.',				#stamp : 'SvenVanCaekenberghe 6/5/2012 09:48'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONBenchmark.\rI hold 1000 objects of the form Dictionary(\'color\'->\'green\' \'enabled\'->false \'id\'->1 \'name\'->\'Name-1\' \'value\'->0.002 ) in an Array.\rI hold the JSON serialization of that as a String of the form \'[{"value":0.002,"enabled":false,"name":"Name-1","color":"green","id":1}, ...\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark read] bench.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark write] bench.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark read] timeToRun.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark write] timeToRun.',		#newStamp : 'SvenVanCaekenberghe 6/5/2012 09:48'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '304' ],		#self : OmReference [ '305' ],		#time : DateAndTime [ '2017-07-29T14:12:22.132801+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONBenchmark\r\tinstanceVariableNames: \'objects json\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONBenchmark,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONBenchmark,						#isMetaSide : false					},					#name : #objects,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONBenchmark,						#isMetaSide : false					},					#name : #json,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONBenchmark class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONBenchmark class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONBenchmark,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONBenchmark.\rI hold 1000 objects of the form Dictionary(\'color\'->\'green\' \'enabled\'->false \'id\'->1 \'name\'->\'Name-1\' \'value\'->0.002 ) in an Array.\rI hold the JSON serialization of that as a String of the form \'[{"value":0.002,"enabled":false,"name":"Name-1","color":"green","id":1}, ...\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark read] bench.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark write] bench.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark read] timeToRun.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark write] timeToRun.',				#stamp : 'SvenVanCaekenberghe 6/5/2012 09:48'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '305' ],		#self : OmReference [ '306' ],		#time : DateAndTime [ '2017-07-29T14:12:22.136365+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONMockStream\r\tinstanceVariableNames: \'stream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONMockStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONMockStream,						#isMetaSide : false					},					#name : #stream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMockStream class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMockStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMockStream,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONMockStream.\rI wrap another stream to validate the limited API used.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONMockStream.\rI wrap another stream to validate the limited API used.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '306' ],		#self : OmReference [ '307' ],		#time : DateAndTime [ '2017-07-29T14:12:22.137676+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONMockStream\r\tinstanceVariableNames: \'stream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONMockStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONMockStream,						#isMetaSide : false					},					#name : #stream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMockStream class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMockStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMockStream,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONMockStream.\rI wrap another stream to validate the limited API used.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '307' ],		#self : OmReference [ '308' ],		#time : DateAndTime [ '2017-07-29T14:12:22.144482+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONTestObject1\r\tinstanceVariableNames: \'id name timestamp points bytes\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONTestObject1,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #id,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #name,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #timestamp,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #points,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #bytes,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONTestObject1 class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONTestObject1 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONTestObject1,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONTestObject1.\r\rI repesent a domain model object.\rI have the following properties:\r\r- id <Integer>\r- name <String>\r- timestamp <DateAndTime>\r- points <Array of: Point>\r- bytes <ByteArray>\r\rMy JSON representation is like this:\r\r- id <Number>\r- name <String>\r- created-at <ISO8601 String>\r- points <Array of: <Map x,y>\r- bytes <Array of: Number>\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONTestObject1.\r\rI repesent a domain model object.\rI have the following properties:\r\r- id <Integer>\r- name <String>\r- timestamp <DateAndTime>\r- points <Array of: Point>\r- bytes <ByteArray>\r\rMy JSON representation is like this:\r\r- id <Number>\r- name <String>\r- created-at <ISO8601 String>\r- points <Array of: <Map x,y>\r- bytes <Array of: Number>\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '308' ],		#self : OmReference [ '309' ],		#time : DateAndTime [ '2017-07-29T14:12:22.14584+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONTestObject1\r\tinstanceVariableNames: \'id name timestamp points bytes\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONTestObject1,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #id,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #name,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #timestamp,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #points,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #bytes,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONTestObject1 class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONTestObject1 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONTestObject1,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONTestObject1.\r\rI repesent a domain model object.\rI have the following properties:\r\r- id <Integer>\r- name <String>\r- timestamp <DateAndTime>\r- points <Array of: Point>\r- bytes <ByteArray>\r\rMy JSON representation is like this:\r\r- id <Number>\r- name <String>\r- created-at <ISO8601 String>\r- points <Array of: <Map x,y>\r- bytes <Array of: Number>\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '309' ],		#self : OmReference [ '310' ],		#time : DateAndTime [ '2017-07-29T14:12:22.14892+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONTestObject2\r\tinstanceVariableNames: \'id width height data\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONTestObject2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #id,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #width,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #height,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #data,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONTestObject2 class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONTestObject2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONTestObject2,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONTestObject2.\r\rInstance Variables\r\tdata:\t\t<String>\r\theight:\t\t<Integer>\r\tid:\t\t\t<Integer>\r\twidth:\t\t<Integer>\r\rUsed for benchmarking and other tests.',				#stamp : 'SvenVanCaekenberghe 3/22/2014 09:36'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONTestObject2.\r\rInstance Variables\r\tdata:\t\t<String>\r\theight:\t\t<Integer>\r\tid:\t\t\t<Integer>\r\twidth:\t\t<Integer>\r\rUsed for benchmarking and other tests.',		#newStamp : 'SvenVanCaekenberghe 3/22/2014 09:36'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '310' ],		#self : OmReference [ '311' ],		#time : DateAndTime [ '2017-07-29T14:12:22.150187+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONTestObject2\r\tinstanceVariableNames: \'id width height data\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONTestObject2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #id,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #width,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #height,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #data,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONTestObject2 class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONTestObject2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONTestObject2,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONTestObject2.\r\rInstance Variables\r\tdata:\t\t<String>\r\theight:\t\t<Integer>\r\tid:\t\t\t<Integer>\r\twidth:\t\t<Integer>\r\rUsed for benchmarking and other tests.',				#stamp : 'SvenVanCaekenberghe 3/22/2014 09:36'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '311' ],		#self : OmReference [ '312' ],		#time : DateAndTime [ '2017-07-29T14:12:22.154298+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONTestObject2',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONTestObject2 subclass: #NeoJSONTestObject3\r\tinstanceVariableNames: \'color transparent\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONTestObject3,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject3,						#isMetaSide : false					},					#name : #color,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject3,						#isMetaSide : false					},					#name : #transparent,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONTestObject3 class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONTestObject3 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONTestObject3,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONTestObject3, a subclass of NeoJSONTestObject2.\r\rInstance Variables\r\tcolor:\t\t\t<String>\r\ttransparent :\t<Boolean>\r\rI am used for inheritance testing.\r',				#stamp : 'SvenVanCaekenberghe 3/22/2014 09:40'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONTestObject3, a subclass of NeoJSONTestObject2.\r\rInstance Variables\r\tcolor:\t\t\t<String>\r\ttransparent :\t<Boolean>\r\rI am used for inheritance testing.\r',		#newStamp : 'SvenVanCaekenberghe 3/22/2014 09:40'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '312' ],		#self : OmReference [ '313' ],		#time : DateAndTime [ '2017-07-29T14:12:22.155759+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONTestObject2',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONTestObject2 subclass: #NeoJSONTestObject3\r\tinstanceVariableNames: \'color transparent\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONTestObject3,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject3,						#isMetaSide : false					},					#name : #color,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject3,						#isMetaSide : false					},					#name : #transparent,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONTestObject3 class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONTestObject3 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONTestObject3,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONTestObject3, a subclass of NeoJSONTestObject2.\r\rInstance Variables\r\tcolor:\t\t\t<String>\r\ttransparent :\t<Boolean>\r\rI am used for inheritance testing.\r',				#stamp : 'SvenVanCaekenberghe 3/22/2014 09:40'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '313' ],		#self : OmReference [ '314' ],		#time : DateAndTime [ '2017-07-29T14:12:22.159141+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONValidation\r\tinstanceVariableNames: \'gitDirectory logStream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #NeoJSONValidation,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONValidation,						#isMetaSide : false					},					#name : #gitDirectory,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONValidation,						#isMetaSide : false					},					#name : #logStream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONValidation class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONValidation class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONValidation,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONValidation, a set of tests to validate NeoJSON against some external rules.\r\rBoth positive & negative tests are includes.\rSome of these are implementation choices.\r\rhttp://seriot.ch/parsing_json.php\rhttps://github.com/nst/JSONTestSuite\rhttps://github.com/nst/JSONTestSuite.git\r  test_parsing\r  test_transform\r\rhttps://github.com/miloyip/nativejson-benchmark\rhttps://github.com/miloyip/nativejson-benchmark.git\r  data/jsonchecker\r  data/roundtrip\r\rThis can only be run with the correct setup (checkout/config).\r\r  NeoJSONValidation new runNativeJsonBenchmarkRoundTrip.\r  NeoJSONValidation new runNativeJsonBenchmarkJsonCheckerPasses.\r  NeoJSONValidation new runNativeJsonBenchmarkJsonCheckerFailures.\r\r  NeoJSONValidation new runJsonTestSuiteTestParsingPasses.\r  NeoJSONValidation new runJsonTestSuiteTestParsingFailures.\r  NeoJSONValidation new runJsonTestSuiteTestParsingInfo.\r\rLogging goes to a file, neo-json-validation.log',				#stamp : 'SvenVanCaekenberghe 5/28/2017 16:40'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONValidation, a set of tests to validate NeoJSON against some external rules.\r\rBoth positive & negative tests are includes.\rSome of these are implementation choices.\r\rhttp://seriot.ch/parsing_json.php\rhttps://github.com/nst/JSONTestSuite\rhttps://github.com/nst/JSONTestSuite.git\r  test_parsing\r  test_transform\r\rhttps://github.com/miloyip/nativejson-benchmark\rhttps://github.com/miloyip/nativejson-benchmark.git\r  data/jsonchecker\r  data/roundtrip\r\rThis can only be run with the correct setup (checkout/config).\r\r  NeoJSONValidation new runNativeJsonBenchmarkRoundTrip.\r  NeoJSONValidation new runNativeJsonBenchmarkJsonCheckerPasses.\r  NeoJSONValidation new runNativeJsonBenchmarkJsonCheckerFailures.\r\r  NeoJSONValidation new runJsonTestSuiteTestParsingPasses.\r  NeoJSONValidation new runJsonTestSuiteTestParsingFailures.\r  NeoJSONValidation new runJsonTestSuiteTestParsingInfo.\r\rLogging goes to a file, neo-json-validation.log',		#newStamp : 'SvenVanCaekenberghe 5/28/2017 16:40'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '314' ],		#self : OmReference [ '315' ],		#time : DateAndTime [ '2017-07-29T14:12:22.160409+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONValidation\r\tinstanceVariableNames: \'gitDirectory logStream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONValidation,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONValidation,						#isMetaSide : false					},					#name : #gitDirectory,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONValidation,						#isMetaSide : false					},					#name : #logStream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONValidation class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONValidation class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONValidation,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONValidation, a set of tests to validate NeoJSON against some external rules.\r\rBoth positive & negative tests are includes.\rSome of these are implementation choices.\r\rhttp://seriot.ch/parsing_json.php\rhttps://github.com/nst/JSONTestSuite\rhttps://github.com/nst/JSONTestSuite.git\r  test_parsing\r  test_transform\r\rhttps://github.com/miloyip/nativejson-benchmark\rhttps://github.com/miloyip/nativejson-benchmark.git\r  data/jsonchecker\r  data/roundtrip\r\rThis can only be run with the correct setup (checkout/config).\r\r  NeoJSONValidation new runNativeJsonBenchmarkRoundTrip.\r  NeoJSONValidation new runNativeJsonBenchmarkJsonCheckerPasses.\r  NeoJSONValidation new runNativeJsonBenchmarkJsonCheckerFailures.\r\r  NeoJSONValidation new runJsonTestSuiteTestParsingPasses.\r  NeoJSONValidation new runJsonTestSuiteTestParsingFailures.\r  NeoJSONValidation new runJsonTestSuiteTestParsingInfo.\r\rLogging goes to a file, neo-json-validation.log',				#stamp : 'SvenVanCaekenberghe 5/28/2017 16:40'			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '315' ],		#self : OmReference [ '316' ],		#time : DateAndTime [ '2017-07-29T14:12:22.28136+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmarkTests,				#isMetaSide : false			},			#name : #testObject2,			#protocol : #testing,			#sourceCode : 'testObject2\r\t| json |\r\tjson := NeoJSONWriter toString: NeoJSONTestObject2 new.\r\tself \r\t\tassert: (NeoJSONReader fromString: json as: NeoJSONTestObject2)\r\t\tequals: NeoJSONTestObject2 new',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:20',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '316' ],		#self : OmReference [ '317' ],		#time : DateAndTime [ '2017-07-29T14:12:22.282733+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmarkTests,				#isMetaSide : false			},			#name : #testPrettyPrinted,			#protocol : #testing,			#sourceCode : 'testPrettyPrinted\r\t| benchmark |\r\tbenchmark := NeoJSONBenchmark new.\r\tself\r\t\tassert: benchmark writePrettyPrintedRead\r\t\tequals: benchmark read',			#stamp : 'SvenVanCaekenberghe 1/15/2014 19:29',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '317' ],		#self : OmReference [ '318' ],		#time : DateAndTime [ '2017-07-29T14:12:22.283664+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmarkTests,				#isMetaSide : false			},			#name : #testRead,			#protocol : #testing,			#sourceCode : 'testRead\r\t| benchmark |\r\tbenchmark := NeoJSONBenchmark new.\r\tbenchmark read',			#stamp : 'SvenVanCaekenberghe 1/15/2014 19:30',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '318' ],		#self : OmReference [ '319' ],		#time : DateAndTime [ '2017-07-29T14:12:22.284397+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmarkTests,				#isMetaSide : false			},			#name : #testWrite,			#protocol : #testing,			#sourceCode : 'testWrite\r\t| benchmark |\r\tbenchmark := NeoJSONBenchmark new.\r\tbenchmark write',			#stamp : 'SvenVanCaekenberghe 1/15/2014 19:30',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '319' ],		#self : OmReference [ '320' ],		#time : DateAndTime [ '2017-07-29T14:12:22.28523+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectTests,				#isMetaSide : false			},			#name : #testAtPath,			#protocol : #testing,			#sourceCode : 'testAtPath\r\t| object |\r\tobject := { #one -> ({ #two -> ({ #three -> 42 } as: NeoJSONObject) } as: NeoJSONObject) } as: NeoJSONObject.\r\tself assert: (object atPath: #(one two three)) equals: 42.\r\tself assert: (object atPath: #(one two three)) equals: object one two three.\t\r\tself assert: (object atPath: #(missing)) equals: nil.\r\tself assert: (object atPath: #(one missing)) equals: nil.\r\tself assert: (object atPath: #(one two missing)) equals: nil.\r\tself assert: (object atPath: #(one two missing)) equals: object one two missing.\r\t\r\tobject := { #foo -> 42 } as: NeoJSONObject.\r\tself assert: (object atPath: #(foo)) equals: 42.\r\tself assert: (object atPath: #(foo)) equals: object foo.\r\tself assert: (object atPath: #(foo)) equals: (object at: #foo).\r\tself assert: (object atPath: #()) equals: object.\r\t\r',			#stamp : 'SvenVanCaekenberghe 4/26/2017 16:14',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '320' ],		#self : OmReference [ '321' ],		#time : DateAndTime [ '2017-07-29T14:12:22.286929+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectTests,				#isMetaSide : false			},			#name : #testAtPathPut,			#protocol : #testing,			#sourceCode : 'testAtPathPut\r\t| object |\r\tobject := NeoJSONObject new.\r\tobject atPath: #(one test) put: 42.\r\tself assert: (object atPath: #(one test)) equals: 42.\r\tself assert: object one test equals: 42.\r\tobject atPath: #(one two three) put: #foo.\r\tself assert: (object atPath: #(one two three)) equals: #foo.\r\tself assert: object one two three equals: #foo.\r\tobject atPath: #(one two threeBis) put: #bar.\r\tself assert: (object atPath: #(one two threeBis)) equals: #bar.\r\tself assert: object one two threeBis equals: #bar.\r\t\r\tself assert: object foo isNil.\r\tself assert: (object atPath: #() put: 1) equals: object.\r\tself assert: (object atPath: #(foo) put: 1) equals: 1.\r\tself assert: (object atPath: #(foo)) equals: 1.\r\tself assert: object foo equals: 1\r\t \r',			#stamp : 'SvenVanCaekenberghe 4/26/2017 16:17',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '321' ],		#self : OmReference [ '322' ],		#time : DateAndTime [ '2017-07-29T14:12:22.287711+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectTests,				#isMetaSide : false			},			#name : #testCRUD,			#protocol : #testing,			#sourceCode : 'testCRUD\r\t| object |\r\tobject := NeoJSONObject new.\r\tself assert: object isEmpty.\r\tself assert: object foo equals: nil.\r\tobject foo: 123.\r\tself assert: object foo equals: 123.\r\tself assert: object printString equals: \'{"foo":123}\'.\r\tobject name: \'test\'.\r\tobject value: Float pi.\r\tself assert: object name equals: \'test\'.\r\tself assert: (object value closeTo: Float pi).\r\tself assert: object keys asSet equals: #(foo name value) asSet.\r\tobject removeKey: #foo.\r\tself assert: object foo equals: nil.\r\tobject removeAll.\r\tself assert: object isEmpty',			#stamp : 'SvenVanCaekenberghe 9/8/2014 12:39',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '322' ],		#self : OmReference [ '323' ],		#time : DateAndTime [ '2017-07-29T14:12:22.288527+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectTests,				#isMetaSide : false			},			#name : #testJSON,			#protocol : #testing,			#sourceCode : 'testJSON\r\t| data  json object |\r\tdata := { #foo->1. #bar->2. #str->\'Str!\'. #bool->true. #flt->1.5 } as: NeoJSONObject.\r\tjson := NeoJSONWriter toString: data .\r\tobject := NeoJSONObject fromString: json.\r\tself assert: object class equals: NeoJSONObject.\r\tself assert: object equals: data.\r\tjson := (NeoJSONWriter toString: object).\r\tself assert: (NeoJSONObject fromString: json) equals: object',			#stamp : 'SvenVanCaekenberghe 11/25/2015 09:19',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '323' ],		#self : OmReference [ '324' ],		#time : DateAndTime [ '2017-07-29T14:12:22.289373+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testAllowNil,			#protocol : #testing,			#sourceCode : 'testAllowNil\r\tself \r\t\tshould: [ \r\t\t\t(NeoJSONReader on: \'null\' readStream)\r\t\t\t\tmapInstVarsFor: Point;\r\t\t\t\tnextAs: Point ] \r\t\traise: NeoJSONParseError.\r\tself\r\t\tassert: ((NeoJSONReader on: \'null\' readStream)\r\t\t\t\t\t\tmapInstVarsFor: Point;\r\t\t\t\t\t\tfor: Point do: [ :mapping | mapping allowNil ];\r\t\t\t\t\t\tnextAs: Point)\r\t\tequals: nil.\r\tself\r\t\tassert: ((NeoJSONReader on: \'[ { "x" : 1, "y" : 2 }, null, { "x" : 3, "y" : -1 } ]\' readStream)\r\t\t\t\t\t\tmapInstVarsFor: Point;\r\t\t\t\t\t\tfor: Point do: [ :mapping | mapping allowNil ];\r\t\t\t\t\t\tfor: #ArrayOfPoints customDo: [ :mapping | mapping listOfElementSchema: Point ];\r\t\t\t\t\t\tnextAs: #ArrayOfPoints)\r\t\tequals: { 1 @ 2. nil. 3 @ -1 }.',			#stamp : 'SvenVanCaekenberghe 12/30/2015 12:29',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '324' ],		#self : OmReference [ '325' ],		#time : DateAndTime [ '2017-07-29T14:12:22.290194+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testArrayOfPoints,			#protocol : #testing,			#sourceCode : 'testArrayOfPoints\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tfor: Point do: [ :mapping |\r\t\t\t\tmapping mapInstVars: #(x y) ];\r\t\t\tfor: #ArrayOfPoints customDo: [ :mapping |\r\t\t\t\tmapping listOfElementSchema: Point ];\r\t\t\tnextAs: #ArrayOfPoints ].\r\tself assert: (reader value: \'[ { "x":1, "y":2 }, { "x":-1, "y":-2 } ]\') equals: { 1@2. -1@ -2 }. \r\tself assert: (reader value: \'[ ]\') equals: #().\r\tself assert: (reader value: \'[ { } ]\') equals: { Point new }',			#stamp : 'SvenVanCaekenberghe 6/12/2012 12:32',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '325' ],		#self : OmReference [ '326' ],		#time : DateAndTime [ '2017-07-29T14:12:22.29093+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testArrayOfPointsUsingNextListAs,			#protocol : #testing,			#sourceCode : 'testArrayOfPointsUsingNextListAs\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tmapInstVarsFor: Point;\r\t\t\tnextListAs: Point ].\r\tself assert: (reader value: \'[ { "x":1, "y":2 }, { "y":-2, "x":-1 } ]\') equals: { 1@2. -1@ -2 }. \r\tself assert: (reader value: \'[ ]\') equals: #().\r\tself assert: (reader value: \'[ { } ]\') equals: { Point new }',			#stamp : 'SvenVanCaekenberghe 3/16/2016 10:58',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '326' ],		#self : OmReference [ '327' ],		#time : DateAndTime [ '2017-07-29T14:12:22.291674+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testAssociation,			#protocol : #testing,			#sourceCode : 'testAssociation\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tfor: Association do: [ :mapping |\r\t\t\t\tmapping mapAccessors: #(key value) ]; \r\t\t\tnextAs: Association ].\r\tself assert: (reader value: \'{"key":"foo","value":42}\') equals: \'foo\' -> 42. \r\tself assert: (reader value: \'{}\') equals: Association new',			#stamp : 'SvenVanCaekenberghe 6/12/2012 13:18',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '327' ],		#self : OmReference [ '328' ],		#time : DateAndTime [ '2017-07-29T14:12:22.292451+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testBooleans,			#protocol : #testing,			#sourceCode : 'testBooleans\r\tself assert: (NeoJSONReader on: \'true\' readStream) next equals: true.\r\tself assert: (NeoJSONReader on: \'false\' readStream) next equals: false.\r\tself should: [ (NeoJSONReader on: \'tru\' readStream) next ] raise: NeoJSONParseError.\r\tself should: [ (NeoJSONReader on: \'falsE\' readStream) next ] raise: NeoJSONParseError.',			#stamp : 'SvenVanCaekenberghe 6/13/2012 14:44',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '328' ],		#self : OmReference [ '329' ],		#time : DateAndTime [ '2017-07-29T14:12:22.293158+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testByteArray,			#protocol : #testing,			#sourceCode : 'testByteArray\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tfor: ByteArray customDo: [ :mapping |\r\t\t\t\tmapping listOfType: ByteArray ];\r\t\t\tnextAs: ByteArray ].\r\tself assert: (reader value: \'[ 1, 2, 3 ]\') equals: #[1 2 3].\r\tself assert: (reader value: \'[ ]\') equals: ByteArray new',			#stamp : 'SvenVanCaekenberghe 6/12/2012 12:32',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '329' ],		#self : OmReference [ '330' ],		#time : DateAndTime [ '2017-07-29T14:12:22.293889+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testDate,			#protocol : #testing,			#sourceCode : 'testDate\r\t| reader |\r\treader := [ :input | \r\t\t(NeoJSONReader on: input readStream) \r\t\t\tfor: Date customDo: [ :mapping |\r\t\t\t\tmapping decoder: [ :string | Date fromString: string ] ];\r\t\t\tnextAs: Date ].\r\tself assert: (reader value: \' "2012-06-08" \') equals: (Date newDay: 8 month: 6 year: 2012)',			#stamp : 'SvenVanCaekenberghe 6/12/2012 12:02',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '330' ],		#self : OmReference [ '331' ],		#time : DateAndTime [ '2017-07-29T14:12:22.29563+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testDateAndTime,			#protocol : #testing,			#sourceCode : 'testDateAndTime \r\t| reader |\r\treader := [ :input | \r\t\t(NeoJSONReader on: input readStream) \r\t\t\tfor: DateAndTime customDo: [ :mapping |\r\t\t\t\tmapping decoder: [ :string | DateAndTime fromString: string ] ];\r\t\t\tnextAs: DateAndTime ].\r\tself \r\t\tassert: (reader value: \' "2012-02-14T16:40:18+01:00" \') \r\t\tequals: (DateAndTime year: 2012 month: 2 day: 14 hour: 16 minute: 40 second: 18 offset: 1 hour)',			#stamp : 'SvenVanCaekenberghe 6/12/2012 12:02',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '331' ],		#self : OmReference [ '332' ],		#time : DateAndTime [ '2017-07-29T14:12:22.296454+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testFloats,			#protocol : #testing,			#sourceCode : 'testFloats\r\t| reader |\r\treader := [ :string |\r\t\t(NeoJSONReader on: string readStream) next ].\r\tself assert: ((reader value: \'123.0\') closeTo: 123.0).\r\tself assert: ((reader value: \'-123.0\') closeTo: -123.0).\r\tself assert: ((reader value: \'123.0e0\') closeTo: 123.0).\r\tself assert: ((reader value: \'123e6\') closeTo: 123e6).\r\tself assert: ((reader value: \'123e+6\') closeTo: 123e6).\r\tself assert: ((reader value: \'123e-6\') closeTo: 123e-6).\r\tself assert: ((reader value: \'123E6\') closeTo: 123e6).\r\tself assert: ((reader value: \'123E+6\') closeTo: 123e6).\r\tself assert: ((reader value: \'123E-6\') closeTo: 123e-6).\r\tself assert: ((reader value: \'-123e6\') closeTo: -123e6).\r\tself assert: ((reader value: \'-123e-6\') closeTo: -123e-6).\r\tself assert: ((reader value: \'-123E6\') closeTo: -123e6).\r\tself assert: ((reader value: \'-123E-6\') closeTo: -123e-6).\r\tself assert: ((reader value: \'3.14159\') closeTo: Float pi).\r\tself assert: ((reader value: \'0.123e6\') closeTo: 0.123e6).\r\tself assert: ((reader value: \'0.123e-6\') closeTo: 0.123e-6).\r\tself assert: ((reader value: \'-0.123E6\') closeTo: -0.123e6).\r\tself assert: ((reader value: \'-0.123E-6\') closeTo: -0.123e-6).\r',			#stamp : 'SvenVanCaekenberghe 6/2/2012 21:49',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '332' ],		#self : OmReference [ '333' ],		#time : DateAndTime [ '2017-07-29T14:12:22.297353+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testIntegers,			#protocol : #testing,			#sourceCode : 'testIntegers\r\t| reader |\r\treader := [ :string |\r\t\t(NeoJSONReader on: string readStream) next ].\r\tself assert: (reader value: \'123\') equals: 123.\r\tself assert: (reader value: \'00123\') equals: 123.\r\tself assert: (reader value: \'-123\') equals: -123.\r\tself assert: (reader value: \'-0123\') equals: -123.\r\tself assert: (reader value: \'0\') equals: 0.\r\tself assert: (reader value: \'-0\') equals: 0.\r\tself assert: (reader value: \'00\') equals: 0.\r\tself assert: (reader value: \' 123\t\') equals: 123.\r\tself should: [ reader value: \'+1\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \' - \' ] raise: NeoJSONParseError.\r',			#stamp : 'SvenVanCaekenberghe 6/12/2012 16:08',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '333' ],		#self : OmReference [ '334' ],		#time : DateAndTime [ '2017-07-29T14:12:22.29811+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testLists,			#protocol : #testing,			#sourceCode : 'testLists\r\t| reader |\r\treader := [ :string |\r\t\t(NeoJSONReader on: string readStream) next ].\r\tself assert: (reader value: \'[1,2,3]\') equals: #(1 2 3).\r\tself assert: (reader value: \'[]\') equals: #().\r\tself assert: (reader value: \' [ 1 , 2 , 3 ] \') equals: #(1 2 3).\r\tself assert: (reader value: \' [ ] \') equals: #().\r\tself should: [ reader value: \'[1,]\' ] raise: NeoJSONParseError. \r\tself should: [ reader value: \'[\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \']\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \'[}\' ] raise: NeoJSONParseError',			#stamp : 'SvenVanCaekenberghe 6/12/2012 16:16',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '334' ],		#self : OmReference [ '335' ],		#time : DateAndTime [ '2017-07-29T14:12:22.298873+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testMaps,			#protocol : #testing,			#sourceCode : 'testMaps\r\t| reader |\r\treader := [ :string |\r\t\t(NeoJSONReader on: string readStream) next ].\r\tself assert: (reader value: \'{"x":1,"y":2}\') equals: (Dictionary newFromPairs: #( \'x\' 1 \'y\' 2)).\r\tself assert: (reader value: \'{}\') equals: Dictionary new.\r\tself assert: (reader value: \' { "x" : 1 , "y" : 2 } \' ) equals: (Dictionary newFromPairs: #( \'x\' 1 \'y\' 2)).\r\tself assert: (reader value: \' { } \') equals: Dictionary new.\r\tself should: [ reader value: \'{"foo":}\' ] raise: NeoJSONParseError. \r\tself should: [ reader value: \'{"foo":9,}\' ] raise: NeoJSONParseError. \r\tself should: [ reader value: \'{9:true,}\' ] raise: NeoJSONParseError. \r\tself should: [ reader value: \'{\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \'}\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \'{]\' ] raise: NeoJSONParseError',			#stamp : 'SvenVanCaekenberghe 6/12/2012 16:16',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '335' ],		#self : OmReference [ '336' ],		#time : DateAndTime [ '2017-07-29T14:12:22.299638+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testNextStringAsHex,			#protocol : #testing,			#sourceCode : 'testNextStringAsHex\r\t| string |\r\tstring := (NeoJSONReader on: \'"466F6F2062617221"\' readStream)\r\t\tfor: #StringAsHex\r\t\t\tcustomDo: [ :mapping | \r\t\t\t\t\tmapping\r\t\t\t\t\t\tencoder: [ :x | x asByteArray hex asUppercase ];\r\t\t\t\t\t\tdecoder: [ :x | (ByteArray readHexFrom: x) asString ] ];\r\t\tnextAs: #StringAsHex.\r\tself assert: string equals: \'Foo bar!\'',			#stamp : 'SvenVanCaekenberghe 3/24/2014 11:58',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '336' ],		#self : OmReference [ '337' ],		#time : DateAndTime [ '2017-07-29T14:12:22.300391+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testNonBMPCharacterDecoding,			#protocol : #testing,			#sourceCode : 'testNonBMPCharacterDecoding\r\t"Characters not in the Basic Multilingual Plane are encoded as a UTF-16 surrogate pair"\r\r\t| string object |\r\tstring := String with: 16r1D11E asCharacter. "MUSICAL SYMBOL G CLEF"\r\tobject := (NeoJSONReader fromString: \'"\\uD834\\uDD1E"\').\r\tself assert: object equals: string',			#stamp : 'SvenVanCaekenberghe 2/24/2016 14:15',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '337' ],		#self : OmReference [ '338' ],		#time : DateAndTime [ '2017-07-29T14:12:22.301092+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testNull,			#protocol : #testing,			#sourceCode : 'testNull\r\tself assert: (NeoJSONReader on: \'null\' readStream) next equals: nil.\r\tself assert: (NeoJSONReader on: \'\tnull \' readStream) next equals: nil.\r\tself should: [ (NeoJSONReader on: \'\tnil \' readStream) next ] raise: NeoJSONParseError.',			#stamp : 'SvenVanCaekenberghe 6/13/2012 14:29',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '338' ],		#self : OmReference [ '339' ],		#time : DateAndTime [ '2017-07-29T14:12:22.301815+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testOrderedCollection,			#protocol : #testing,			#sourceCode : 'testOrderedCollection\r\t| json list |\r\tjson := \'[ 1, 2, 3 ]\'.\r\tlist := (NeoJSONReader on: json readStream) \r\t\tlistClass: OrderedCollection;\r\t\tnext.\r\tself \r\t\tassert: list \r\t\tequals: (OrderedCollection with: 1 with: 2 with: 3).\r\tself \r\t\tassert: list class \r\t\tequals: OrderedCollection',			#stamp : 'SvenVanCaekenberghe 6/13/2012 10:18',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '339' ],		#self : OmReference [ '340' ],		#time : DateAndTime [ '2017-07-29T14:12:22.303444+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testOrderedCollectionOfPoints,			#protocol : #testing,			#sourceCode : 'testOrderedCollectionOfPoints\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tfor: Point do: [ :mapping |\r\t\t\t\tmapping mapInstVars: #(x y) ];\r\t\t\tfor: #OrderedCollectionOfPoints customDo: [ :mapping |\r\t\t\t\tmapping listOfType: OrderedCollection andElementSchema: Point ];\r\t\t\tnextAs: #OrderedCollectionOfPoints ].\r\tself assert: (reader value: \'[ { "x":1, "y":2 }, { "x":-1, "y":-2 } ]\') equals: { 1@2. -1@ -2 } asOrderedCollection. \r\tself assert: (reader value: \'[ ]\') equals: OrderedCollection new.\r\tself assert: (reader value: \'[ { } ]\') equals: (OrderedCollection with: Point new)',			#stamp : 'SvenVanCaekenberghe 6/12/2012 12:33',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '340' ],		#self : OmReference [ '341' ],		#time : DateAndTime [ '2017-07-29T14:12:22.304257+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testParseErrors,			#protocol : #testing,			#sourceCode : 'testParseErrors\r\tself should: [ NeoJSONReader fromString: \'zero\' ] raise: NeoJSONParseError.\r\tself should: [ NeoJSONReader fromString: \'#\' ] raise: NeoJSONParseError.\r\tself should: [ NeoJSONReader fromString: \'@\' ] raise: NeoJSONParseError.\r\t\r\tself should: [ (NeoJSONReader on: \'[1,2,3]true\' readStream) next; failIfNotAtEnd ] raise: NeoJSONParseError.\r\tself should: [ (NeoJSONReader on: \'{"foo":1}"extra"\' readStream) next; failIfNotAtEnd ] raise: NeoJSONParseError.\r\tself should: [ (NeoJSONReader on: \'[]"extra"\' readStream) next; failIfNotAtEnd ] raise: NeoJSONParseError.',			#stamp : 'SvenVanCaekenberghe 5/29/2017 11:00',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '341' ],		#self : OmReference [ '342' ],		#time : DateAndTime [ '2017-07-29T14:12:22.30501+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testPoint,			#protocol : #testing,			#sourceCode : 'testPoint\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) nextAs: Point ].\r\tself should: [ reader value: \'{"x":1,"y":2}\' ] raise: NeoJSONMappingNotFound',			#stamp : 'SvenVanCaekenberghe 6/12/2012 15:58',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '342' ],		#self : OmReference [ '343' ],		#time : DateAndTime [ '2017-07-29T14:12:22.305802+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testPoint1,			#protocol : #testing,			#sourceCode : 'testPoint1\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tfor: Point do: [ :mapping |\r\t\t\t\tmapping mapProperty: \'x\' getter: [ :point | point x ] setter: [ :point :value | point setX: value setY: point y ].\r\t\t\t\tmapping mapProperty: \'y\' getter: [ :point | point y ] setter: [ :point :value | point setX: point x setY: value ]. ];\r\t\t\tnextAs: Point ].\r\tself assert: (reader value: \'{"x":1,"y":2}\') equals: 1@2. \r\tself assert: (reader value: \'{}\') equals: Point new',			#stamp : 'SvenVanCaekenberghe 6/8/2012 14:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '343' ],		#self : OmReference [ '344' ],		#time : DateAndTime [ '2017-07-29T14:12:22.30656+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testPoint2,			#protocol : #testing,			#sourceCode : 'testPoint2\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tmapAllInstVarsFor: Point;\r\t\t\tnextAs: Point ].\r\tself assert: (reader value: \'{"x":1,"y":2}\') equals: 1@2. \r\tself assert: (reader value: \'{}\') equals: Point new',			#stamp : 'SvenVanCaekenberghe 6/7/2012 15:23',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '344' ],		#self : OmReference [ '345' ],		#time : DateAndTime [ '2017-07-29T14:12:22.307267+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testPoint3,			#protocol : #testing,			#sourceCode : 'testPoint3\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tfor: Point do: [ :mapping |\r\t\t\t\tmapping mapInstVars: #(x y) ];\r\t\t\tnextAs: Point ].\r\tself assert: (reader value: \'{"x":1,"y":2}\') equals: 1@2. \r\tself assert: (reader value: \'{}\') equals: Point new',			#stamp : 'SvenVanCaekenberghe 6/8/2012 14:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '345' ],		#self : OmReference [ '346' ],		#time : DateAndTime [ '2017-07-29T14:12:22.307981+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testPointUsingAsString,			#protocol : #testing,			#sourceCode : 'testPointUsingAsString\r\t| point |\r\tpoint := (NeoJSONReader on: \'{"x":"1","y":"2"}\' readStream)\r\t\tfor: Point\r\t\t\tdo: [ :mapping | \r\t\t\t\t\t(mapping \r\t\t\t\t\t\tmapProperty: #x \r\t\t\t\t\t\tgetter: [ :object | object x ] \r\t\t\t\t\t\tsetter: [ :object :value | object setX: value setY: object y ])\r\t\t\t\t\t\tvalueSchema: #AsString.\r\t\t\t\t\t(mapping\r\t\t\t\t\t\tmapProperty: #y\r\t\t\t\t\t\tgetter: [ :object | object y ]\r\t\t\t\t\t\tsetter: [ :object :value | object setX: object x setY: value ]) \r\t\t\t\t\t\tvalueSchema: #AsString ];\r\t\tfor: #AsString\r\t\t\tcustomDo: [ :mapping | \r\t\t\t\t\tmapping\r\t\t\t\t\t\tencoder: [ :x | x asString ];\r\t\t\t\t\t\tdecoder: [ :x | x asNumber ] ];\r\t\tnextAs: Point.\r\tself assert: point equals: 1 @ 2',			#stamp : 'SvenVanCaekenberghe 3/24/2014 10:43',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '346' ],		#self : OmReference [ '347' ],		#time : DateAndTime [ '2017-07-29T14:12:22.308746+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testPropertyNamesAsSymbols,			#protocol : #testing,			#sourceCode : 'testPropertyNamesAsSymbols\r\t| json map |\r\tjson := \'{ "x" : true, "y" : false, "key-1" : 1 }\'.\r\tmap := (NeoJSONReader on: json readStream) \r\t\tpropertyNamesAsSymbols: true; \r\t\tnext.\r\tself \r\t\tassert: map \r\t\tequals: (Dictionary new at: #x put: true; at: #y put: false; at: #\'key-1\' put: 1; yourself).\r\tself assert: (map keys allSatisfy: [ :each | each isSymbol ])',			#stamp : 'SvenVanCaekenberghe 6/13/2012 10:00',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '347' ],		#self : OmReference [ '348' ],		#time : DateAndTime [ '2017-07-29T14:12:22.309521+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testSmallDictionary,			#protocol : #testing,			#sourceCode : 'testSmallDictionary\r\t| json map smallDictionaryClass |\r\tjson := \'{ "x" : true, "y" : false, "key-1" : 1 }\'.\r\tsmallDictionaryClass := Smalltalk at: #SmallDictionary ifAbsent: [ Dictionary ].\r\tmap := (NeoJSONReader on: json readStream) \r\t\tmapClass: smallDictionaryClass;\r\t\tnext.\r\tself \r\t\tassert: map \r\t\tequals: (smallDictionaryClass new at: #x put: true; at: #y put: false; at: #\'key-1\' put: 1; yourself).\r\tself \r\t\tassert: map class \r\t\tequals: smallDictionaryClass',			#stamp : 'SvenVanCaekenberghe 7/4/2013 18:38',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '348' ],		#self : OmReference [ '349' ],		#time : DateAndTime [ '2017-07-29T14:12:22.311174+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testStrings,			#protocol : #testing,			#sourceCode : 'testStrings\r\t| reader |\r\treader := [ :string |\r\t\t(NeoJSONReader on: string readStream) next ].\r\tself assert: (reader value: \'"foo"\') equals: \'foo\'.\r\tself assert: (reader value: \'""\') equals: \'\'.\r\tself assert: (reader value: \'"Foo BAR"\') equals: \'Foo BAR\'.\r\tself assert: (reader value: \'" foo "\') equals: \' foo \'.\r\tself assert: (reader value: \'"\\u00E9l\\u00E8ve en Fran\\u00E7ais"\') equals: \'élève en Français\'.\r\tself \r\t\tassert: (reader value: \'"\\"\\\\\\/\\t\\r\\n\\f\\b"\') \r\t\tequals: (String withAll: { \r\t\t\t\t\t$". $\\. $/. Character tab. Character cr. Character lf.  Character newPage. Character backspace }).\r\tself should: [ reader value: \'"open\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \'"\\uAA"\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \'"\\uZZ"\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \'"\\x"\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \' " \' ] raise: NeoJSONParseError.\r',			#stamp : 'SvenVanCaekenberghe 3/10/2017 13:49',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '349' ],		#self : OmReference [ '350' ],		#time : DateAndTime [ '2017-07-29T14:12:22.312114+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testSymbol,			#protocol : #testing,			#sourceCode : 'testSymbol\r\t| reader |\r\treader := [ :input | \r\t\t(NeoJSONReader on: input readStream) \r\t\t\tfor: Symbol customDo: [ :mapping |\r\t\t\t\tmapping decoder: [ :string | string asSymbol ] ];\r\t\t\tnextAs: Symbol ].\r\tself assert: (reader value: \' "foo" \') equals: #foo.\r\tself assert: (reader value: \' "FOO-1" \') equals: #\'FOO-1\'',			#stamp : 'SvenVanCaekenberghe 6/12/2012 12:02',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '350' ],		#self : OmReference [ '351' ],		#time : DateAndTime [ '2017-07-29T14:12:22.312845+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testTime,			#protocol : #testing,			#sourceCode : 'testTime\r\t| reader |\r\treader := [ :input | \r\t\t(NeoJSONReader on: input readStream) \r\t\t\tfor: Time customDo: [ :mapping |\r\t\t\t\tmapping decoder: [ :string | Time fromString: string ] ];\r\t\t\tnextAs: Time ].\r\tself assert: (reader value: \' "14:30:08" \') equals: (Time hour: 14 minute: 30 second: 8)',			#stamp : 'SvenVanCaekenberghe 6/12/2012 12:02',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '351' ],		#self : OmReference [ '352' ],		#time : DateAndTime [ '2017-07-29T14:12:22.313737+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadAsciiOnlyTests,				#isMetaSide : false			},			#name : #'writeRead:',			#protocol : #private,			#sourceCode : 'writeRead: object\r\t| json |\r\tjson := String streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream) asciiOnly: true; nextPut: object ].\r\t^ (NeoJSONReader on: json readStream) next ',			#stamp : 'SvenVanCaekenberghe 11/24/2016 10:03',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '352' ],		#self : OmReference [ '353' ],		#time : DateAndTime [ '2017-07-29T14:12:22.314521+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadMockStreamTests,				#isMetaSide : false			},			#name : #'writeRead:',			#protocol : #private,			#sourceCode : 'writeRead: object\r\t| json |\r\tjson := String streamContents: [ :stream |\r\t\t(NeoJSONWriter on: (NeoJSONMockStream on: stream))\r\t\t\tprettyPrint: true;\r\t\t\tnextPut: object ].\r\t^ (NeoJSONReader on: (NeoJSONMockStream on: json readStream)) next ',			#stamp : 'SvenVanCaekenberghe 6/13/2012 16:28',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '353' ],		#self : OmReference [ '354' ],		#time : DateAndTime [ '2017-07-29T14:12:22.315417+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadPrettyPrintedTests,				#isMetaSide : false			},			#name : #testDictionaryOfObject2,			#protocol : #testing,			#sourceCode : 'testDictionaryOfObject2\r\t| data json reader |\r\tdata := Dictionary new.\r\tdata \r\t\tat: #one put: NeoJSONTestObject2 example1;\r\t\tat: #two put: NeoJSONTestObject2 example1.\r\tjson := NeoJSONWriter toStringPretty: data.\r\treader := NeoJSONReader on: json readStream.\r\treader for: #DictionaryOfObject2 customDo: [ :mapping |\r\t\tmapping mapWithValueSchema: NeoJSONTestObject2 ].  \r\tself \r\t\tassert: (reader nextAs: #DictionaryOfObject2)\r\t\tequals: data',			#stamp : 'SvenVanCaekenberghe 8/30/2013 11:05',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '354' ],		#self : OmReference [ '355' ],		#time : DateAndTime [ '2017-07-29T14:12:22.316183+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadPrettyPrintedTests,				#isMetaSide : false			},			#name : #testObject1,			#protocol : #testing,			#sourceCode : 'testObject1\r\t| json |\r\tjson := NeoJSONWriter toStringPretty: NeoJSONTestObject1 example1.\r\tself \r\t\tassert: (NeoJSONReader fromString: json as: NeoJSONTestObject1)\r\t\tequals: NeoJSONTestObject1 example1',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:49',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '355' ],		#self : OmReference [ '356' ],		#time : DateAndTime [ '2017-07-29T14:12:22.316925+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadPrettyPrintedTests,				#isMetaSide : false			},			#name : #testObject2,			#protocol : #testing,			#sourceCode : 'testObject2\r\t| json |\r\tjson := NeoJSONWriter toStringPretty: NeoJSONTestObject2 example1.\r\tself \r\t\tassert: (NeoJSONReader fromString: json as: NeoJSONTestObject2)\r\t\tequals: NeoJSONTestObject2 example1',			#stamp : 'SvenVanCaekenberghe 8/30/2013 11:05',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '356' ],		#self : OmReference [ '357' ],		#time : DateAndTime [ '2017-07-29T14:12:22.317656+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadPrettyPrintedTests,				#isMetaSide : false			},			#name : #testObject3,			#protocol : #testing,			#sourceCode : 'testObject3\r\t| json |\r\tjson := NeoJSONWriter toStringPretty: NeoJSONTestObject3 example1.\r\tself \r\t\tassert: (NeoJSONReader fromString: json as: NeoJSONTestObject3)\r\t\tequals: NeoJSONTestObject3 example1',			#stamp : 'SvenVanCaekenberghe 3/22/2014 10:59',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '357' ],		#self : OmReference [ '358' ],		#time : DateAndTime [ '2017-07-29T14:12:22.318388+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadPrettyPrintedTests,				#isMetaSide : false			},			#name : #'writeRead:',			#protocol : #private,			#sourceCode : 'writeRead: object\r\t| json |\r\tjson := String streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream) \r\t\t\tprettyPrint: true;\r\t\t\tnextPut: object ].\r\t^ (NeoJSONReader on: json readStream) next ',			#stamp : 'SvenVanCaekenberghe 6/4/2012 15:45',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '358' ],		#self : OmReference [ '359' ],		#time : DateAndTime [ '2017-07-29T14:12:22.320099+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testDictionaryOfObject2,			#protocol : #testing,			#sourceCode : 'testDictionaryOfObject2\r\t| data json reader |\r\tdata := Dictionary new.\r\tdata \r\t\tat: #one put: NeoJSONTestObject2 example1;\r\t\tat: #two put: NeoJSONTestObject2 example1.\r\tjson := NeoJSONWriter toString: data.\r\treader := NeoJSONReader on: json readStream.\r\treader for: #DictionaryOfObject2 customDo: [ :mapping |\r\t\tmapping mapWithValueSchema: NeoJSONTestObject2 ].  \r\tself \r\t\tassert: (reader nextAs: #DictionaryOfObject2)\r\t\tequals: data',			#stamp : 'SvenVanCaekenberghe 8/30/2013 11:03',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '359' ],		#self : OmReference [ '360' ],		#time : DateAndTime [ '2017-07-29T14:12:22.320878+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testFloats,			#protocol : #testing,			#sourceCode : 'testFloats\r\t| objects |\r\tobjects := { Float pi . 1.0 . -1.0 . 0.0 . 1.5e6 . -1.5e6 . 1.5e-6 . -1.5e-6 }.\r\t(self writeRead: objects) \r\t\twith: objects \r\t\tdo: [ :first :second | self assert: (first closeTo: second) ]',			#stamp : 'SvenVanCaekenberghe 6/4/2012 15:51',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '360' ],		#self : OmReference [ '361' ],		#time : DateAndTime [ '2017-07-29T14:12:22.321666+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testIntegers,			#protocol : #testing,			#sourceCode : 'testIntegers\r\t| objects |\r\tobjects := { 1. -1. 0. 123467890. -1234567890 }.\r\tself \r\t\tassert: (self writeRead: objects)\r\t\tequals: objects',			#stamp : 'SvenVanCaekenberghe 6/4/2012 15:46',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '361' ],		#self : OmReference [ '362' ],		#time : DateAndTime [ '2017-07-29T14:12:22.322381+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testLists,			#protocol : #testing,			#sourceCode : 'testLists\r\t| objects |\r\tobjects := { #(1 2 3). #(). #( \'foo\' \'bar\') }.\r\tself \r\t\tassert: (self writeRead: objects)\r\t\tequals: objects',			#stamp : 'SvenVanCaekenberghe 6/4/2012 15:51',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '362' ],		#self : OmReference [ '363' ],		#time : DateAndTime [ '2017-07-29T14:12:22.323108+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testMaps,			#protocol : #testing,			#sourceCode : 'testMaps\r\t| objects |\r\tobjects := { \r\t\tDictionary new.\r\t\tDictionary with: \'x\' -> 1.\r\t\tDictionary newFromPairs: #( \'foo\' true \'bar\' false \'zero\' 0 \'null\' nil \'string\' \'Hello World!\' ) }.\r\tself \r\t\tassert: (self writeRead: objects)\r\t\tequals: objects',			#stamp : 'SvenVanCaekenberghe 6/4/2012 15:53',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '363' ],		#self : OmReference [ '364' ],		#time : DateAndTime [ '2017-07-29T14:12:22.323817+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testObject1,			#protocol : #testing,			#sourceCode : 'testObject1\r\t| json |\r\tjson := NeoJSONWriter toString: NeoJSONTestObject1 example1.\r\tself \r\t\tassert: (NeoJSONReader fromString: json as: NeoJSONTestObject1)\r\t\tequals: NeoJSONTestObject1 example1',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:48',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '364' ],		#self : OmReference [ '365' ],		#time : DateAndTime [ '2017-07-29T14:12:22.32454+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testObject2,			#protocol : #testing,			#sourceCode : 'testObject2\r\t| json |\r\tjson := NeoJSONWriter toString: NeoJSONTestObject2 example1.\r\tself \r\t\tassert: (NeoJSONReader fromString: json as: NeoJSONTestObject2)\r\t\tequals: NeoJSONTestObject2 example1',			#stamp : 'SvenVanCaekenberghe 8/30/2013 10:12',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '365' ],		#self : OmReference [ '366' ],		#time : DateAndTime [ '2017-07-29T14:12:22.325265+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testObject3,			#protocol : #testing,			#sourceCode : 'testObject3\r\t| json |\r\tjson := NeoJSONWriter toString: NeoJSONTestObject3 example1.\r\tself \r\t\tassert: (NeoJSONReader fromString: json as: NeoJSONTestObject3)\r\t\tequals: NeoJSONTestObject3 example1',			#stamp : 'SvenVanCaekenberghe 3/22/2014 10:14',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '366' ],		#self : OmReference [ '367' ],		#time : DateAndTime [ '2017-07-29T14:12:22.325963+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testSpecials,			#protocol : #testing,			#sourceCode : 'testSpecials\r\t| objects |\r\tobjects := { true. false. nil }.\r\tself \r\t\tassert: (self writeRead: objects)\r\t\tequals: objects',			#stamp : 'SvenVanCaekenberghe 6/4/2012 15:46',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '367' ],		#self : OmReference [ '368' ],		#time : DateAndTime [ '2017-07-29T14:12:22.32763+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testStrings,			#protocol : #testing,			#sourceCode : 'testStrings\r\t| objects |\r\tobjects := { \r\t\t\'foo\'. \'Foo BAR\'. \'\'. \'\t\\\\\'\'\'. \r\t\t\'élève en Français\'. \r\t\tString with: (Character codePoint: 12354) "HIRAGANA LETTER A" }.\r\tself \r\t\tassert: (self writeRead: objects)\r\t\tequals: objects',			#stamp : 'SvenVanCaekenberghe 11/24/2016 10:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '368' ],		#self : OmReference [ '369' ],		#time : DateAndTime [ '2017-07-29T14:12:22.328359+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #'writeRead:',			#protocol : #private,			#sourceCode : 'writeRead: object\r\t| json |\r\tjson := String streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream) nextPut: object ].\r\t^ (NeoJSONReader on: json readStream) next ',			#stamp : 'SvenVanCaekenberghe 6/4/2012 15:36',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '369' ],		#self : OmReference [ '370' ],		#time : DateAndTime [ '2017-07-29T14:12:22.32922+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testAsciiOnlyStrings,			#protocol : #testing,			#sourceCode : 'testAsciiOnlyStrings\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tasciiOnly: true;\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: \'élève français\') equals: \'"\\u00E9l\\u00E8ve fran\\u00E7ais"\'.\r\tself assert: (writer value: \'foo\') equals: \'"foo"\'.\r\tself assert: (writer value: \'Foo BAR\') equals: \'"Foo BAR"\'.\r\tself assert: (writer value: \'\') equals: \'""\'.\r\tself\r\t\tassert: (writer value: (String withAll: { \r\t\t\t\t\t$". $\\. $/. Character tab. Character cr. Character lf.  Character newPage. Character backspace }))\r\t\tequals: \'"\\"\\\\/\\t\\r\\n\\f\\b"\'\r\r',			#stamp : 'SvenVanCaekenberghe 9/3/2013 12:06',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '370' ],		#self : OmReference [ '371' ],		#time : DateAndTime [ '2017-07-29T14:12:22.330053+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testAssociation,			#protocol : #testing,			#sourceCode : 'testAssociation\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: Association do: [ :mapping |\r\t\t\t\t\tmapping mapAccessors: #(key value) ]; \r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: \'foo\' -> 42) equals: \'{"key":"foo","value":42}\'.\r\tself assert: (writer value: Association new) equals: \'{}\'',			#stamp : 'SvenVanCaekenberghe 6/12/2012 13:19',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '371' ],		#self : OmReference [ '372' ],		#time : DateAndTime [ '2017-07-29T14:12:22.330788+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testBooleans,			#protocol : #testing,			#sourceCode : 'testBooleans\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: true) equals: \'true\'.\r\tself assert: (writer value: false) equals: \'false\'.',			#stamp : 'SvenVanCaekenberghe 6/3/2012 19:56',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '372' ],		#self : OmReference [ '373' ],		#time : DateAndTime [ '2017-07-29T14:12:22.331541+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testByteArray,			#protocol : #testing,			#sourceCode : 'testByteArray\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: #[1 2 3]) equals: \'[1,2,3]\'.\r\tself assert: (writer value: #[]) equals: \'[]\'\r',			#stamp : 'SvenVanCaekenberghe 6/8/2012 21:54',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '373' ],		#self : OmReference [ '374' ],		#time : DateAndTime [ '2017-07-29T14:12:22.332265+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testDate,			#protocol : #testing,			#sourceCode : 'testDate\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: Date customDo: [ :mapping |\r\t\t\t\t\tmapping encoder: [ :date | date yyyymmdd ] ];\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: (Date newDay: 8 month: 6 year: 2012)) equals: \'"2012-06-08"\'',			#stamp : 'SvenVanCaekenberghe 6/12/2012 12:02',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '374' ],		#self : OmReference [ '375' ],		#time : DateAndTime [ '2017-07-29T14:12:22.333014+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testDateAndTime,			#protocol : #testing,			#sourceCode : 'testDateAndTime \r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: DateAndTime customDo: [ :mapping |\r\t\t\t\t\tmapping encoder: [ :dateAndTime | dateAndTime printString ] ];\r\t\t\t\tnextPut: object ] ].\r\tself \r\t\tassert: (writer value: (DateAndTime year: 2012 month: 2 day: 14 hour: 16 minute: 40 second: 18 offset: 1 hour)) \r\t\tequals: \'"2012-02-14T16:40:18+01:00"\'',			#stamp : 'SvenVanCaekenberghe 6/12/2012 12:02',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '375' ],		#self : OmReference [ '376' ],		#time : DateAndTime [ '2017-07-29T14:12:22.333774+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testFloats,			#protocol : #testing,			#sourceCode : 'testFloats\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: 123.0) equals: \'123.0\'.\r\tself assert: (writer value: -123.0) equals: \'-123.0\'.\r\tself assert: (writer value: 0.0) equals: \'0.0\'.',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:24',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '376' ],		#self : OmReference [ '377' ],		#time : DateAndTime [ '2017-07-29T14:12:22.334481+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testIntegers,			#protocol : #testing,			#sourceCode : 'testIntegers\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: 123) equals: \'123\'.\r\tself assert: (writer value: -123) equals: \'-123\'.\r\tself assert: (writer value: 0) equals: \'0\'.',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:24',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '377' ],		#self : OmReference [ '378' ],		#time : DateAndTime [ '2017-07-29T14:12:22.336206+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testLists,			#protocol : #testing,			#sourceCode : 'testLists\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: #(1 2 3)) equals: \'[1,2,3]\'.\r\tself assert: (writer value: #()) equals: \'[]\'.\r',			#stamp : 'SvenVanCaekenberghe 6/3/2012 19:39',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '378' ],		#self : OmReference [ '379' ],		#time : DateAndTime [ '2017-07-29T14:12:22.336953+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testListsExtra,			#protocol : #testing,			#sourceCode : 'testListsExtra\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\t#( OrderedCollection LinkedList ByteArray IntegerArray SortedCollection ) do: [ :each |\r\t\tSmalltalk at: each ifPresent: [ :collectionClass |\r\t\t\tself assert: (writer value: (collectionClass withAll: #(1 2 3))) equals: \'[1,2,3]\'.\r\t\t\tself assert: (writer value: collectionClass new) equals: \'[]\' ] ]\r',			#stamp : 'SvenVanCaekenberghe 9/4/2015 14:02',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '379' ],		#self : OmReference [ '380' ],		#time : DateAndTime [ '2017-07-29T14:12:22.337754+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testMaps,			#protocol : #testing,			#sourceCode : 'testMaps\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: (Dictionary newFromPairs: #( \'x\' 1 \'y\' 2))) equals: \'{"x":1,"y":2}\'.\r\tself assert: (writer value: Dictionary new) equals: \'{}\'.\r',			#stamp : 'SvenVanCaekenberghe 6/3/2012 19:40',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '380' ],		#self : OmReference [ '381' ],		#time : DateAndTime [ '2017-07-29T14:12:22.338558+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testMapsExtra,			#protocol : #testing,			#sourceCode : 'testMapsExtra\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: (IdentityDictionary newFromPairs: #( \'x\' 1))) equals: \'{"x":1}\'.\r\tself assert: (writer value: IdentityDictionary new) equals: \'{}\'.\r\t#( SmallDictionary OrderedDictionary OrderedIdentityDictionary ) do: [ :each |\r\t\t| dictionaryClass |\r\t\tdictionaryClass := Smalltalk at: each ifAbsent: [ nil ].\r\t\tdictionaryClass ifNotNil: [\t\r\t\t\tself assert: (writer value: (dictionaryClass new at: \'x\' put: 1; at: \'y\' put: 2; yourself)) equals: \'{"x":1,"y":2}\'.\r\t\t\tself assert: (writer value: dictionaryClass new) equals: \'{}\'] ]\r',			#stamp : 'SvenVanCaekenberghe 8/26/2015 14:05',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '381' ],		#self : OmReference [ '382' ],		#time : DateAndTime [ '2017-07-29T14:12:22.339325+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testNextPutStringAsHex,			#protocol : #testing,			#sourceCode : 'testNextPutStringAsHex\r\t| output |\r\toutput := String\r\t\tstreamContents: [ :out | \r\t\t\t(NeoJSONWriter on: out)\r\t\t\t\tfor: #StringAsHex\r\t\t\t\t\tcustomDo: [ :mapping | \r\t\t\t\t\t\t\tmapping\r\t\t\t\t\t\t\t\tencoder: [ :x | x asByteArray hex asUppercase ];\r\t\t\t\t\t\t\t\tdecoder: [ :x | (ByteArray readHexFrom: x) asString ] ];\r\t\t\t\tnextPut: \'Foo bar!\' as: #StringAsHex ].\r\tself assert: output equals: \'"466F6F2062617221"\'',			#stamp : 'SvenVanCaekenberghe 3/24/2014 11:57',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '382' ],		#self : OmReference [ '383' ],		#time : DateAndTime [ '2017-07-29T14:12:22.340094+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testNonBMPCharacterEncoding,			#protocol : #testing,			#sourceCode : 'testNonBMPCharacterEncoding\r\t"Characters not in the Basic Multilingual Plane are encoded as a UTF-16 surrogate pair"\r\r\t| string json |\r\tstring := String with: 16r1D11E asCharacter. "MUSICAL SYMBOL G CLEF"\r\tjson := String streamContents: [ :out |\r\t\t(NeoJSONWriter on: out) asciiOnly: true; nextPut: string ].\r\tself assert: json equals: \'"\\uD834\\uDD1E"\'',			#stamp : 'SvenVanCaekenberghe 2/24/2016 14:15',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '383' ],		#self : OmReference [ '384' ],		#time : DateAndTime [ '2017-07-29T14:12:22.340838+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testNull,			#protocol : #testing,			#sourceCode : 'testNull\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: nil) equals: \'null\'',			#stamp : 'SvenVanCaekenberghe 6/2/2012 22:23',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '384' ],		#self : OmReference [ '385' ],		#time : DateAndTime [ '2017-07-29T14:12:22.341543+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testPoint,			#protocol : #testing,			#sourceCode : 'testPoint\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself should: [ writer value: 1@2 ] raise: NeoJSONMappingNotFound',			#stamp : 'SvenVanCaekenberghe 6/12/2012 15:58',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '385' ],		#self : OmReference [ '386' ],		#time : DateAndTime [ '2017-07-29T14:12:22.342248+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testPoint1,			#protocol : #testing,			#sourceCode : 'testPoint1\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: Point do: [ :mapping |\r\t\t\t\t\tmapping mapProperty: \'x\' getter: [ :point | point x ] setter: [ :point :value | point x: value ].\r\t\t\t\t\tmapping mapProperty: \'y\' getter: [ :point | point y ] setter: [ :point :value | point y: value ]. ];\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: 1@2) equals: \'{"x":1,"y":2}\'.\r\tself assert: (writer value: Point new) equals: \'{}\'',			#stamp : 'SvenVanCaekenberghe 6/8/2012 14:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '386' ],		#self : OmReference [ '387' ],		#time : DateAndTime [ '2017-07-29T14:12:22.343896+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testPoint2,			#protocol : #testing,			#sourceCode : 'testPoint2\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tmapAllInstVarsFor: Point;\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: 1@2) equals: \'{"x":1,"y":2}\'.\r\tself assert: (writer value: Point new) equals: \'{}\'',			#stamp : 'SvenVanCaekenberghe 6/6/2012 17:29',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '387' ],		#self : OmReference [ '388' ],		#time : DateAndTime [ '2017-07-29T14:12:22.344642+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testPoint3,			#protocol : #testing,			#sourceCode : 'testPoint3\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: Point do: [ :mapping |\r\t\t\t\t\tmapping mapInstVars: #(x y) ];\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: 1@2) equals: \'{"x":1,"y":2}\'.\r\tself assert: (writer value: Point new) equals: \'{}\'',			#stamp : 'SvenVanCaekenberghe 6/8/2012 14:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '388' ],		#self : OmReference [ '389' ],		#time : DateAndTime [ '2017-07-29T14:12:22.345424+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testPointUsingAsString,			#protocol : #testing,			#sourceCode : 'testPointUsingAsString\r\t| output |\r\toutput := String\r\t\tstreamContents: [ :out | \r\t\t\t(NeoJSONWriter on: out)\r\t\t\t\tfor: Point\r\t\t\t\t\tdo: [ :mapping | \r\t\t\t\t\t\t\t(mapping \r\t\t\t\t\t\t\t\tmapProperty: #x \r\t\t\t\t\t\t\t\tgetter: [ :object | object x ] \r\t\t\t\t\t\t\t\tsetter: [ :object :value | object setX: value setY: object y ])\r\t\t\t\t\t\t\t\tvalueSchema: #AsString.\r\t\t\t\t\t\t\t(mapping\r\t\t\t\t\t\t\t\tmapProperty: #y\r\t\t\t\t\t\t\t\tgetter: [ :object | object y ]\r\t\t\t\t\t\t\t\tsetter: [ :object :value | object setX: object x setY: value ]) \r\t\t\t\t\t\t\t\tvalueSchema: #AsString ];\r\t\t\t\tfor: #AsString\r\t\t\t\t\tcustomDo: [ :mapping | \r\t\t\t\t\t\t\tmapping\r\t\t\t\t\t\t\t\tencoder: [ :x | x asString ];\r\t\t\t\t\t\t\t\tdecoder: [ :x | x asNumber ] ];\r\t\t\t\tnextPut: 1 @ 2 ].\r\tself assert: output equals: \'{"x":"1","y":"2"}\'',			#stamp : 'SvenVanCaekenberghe 3/24/2014 10:41',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '389' ],		#self : OmReference [ '390' ],		#time : DateAndTime [ '2017-07-29T14:12:22.346235+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testPointWriteNil,			#protocol : #testing,			#sourceCode : 'testPointWriteNil\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\twriteNil: true;\r\t\t\t\tmapAllInstVarsFor: Point;\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: 1@2) equals: \'{"x":1,"y":2}\'.\r\tself assert: (writer value: Point new) equals: \'{"x":null,"y":null}\'',			#stamp : 'SvenVanCaekenberghe 5/28/2014 20:49',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '390' ],		#self : OmReference [ '391' ],		#time : DateAndTime [ '2017-07-29T14:12:22.346986+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testPreservePropertyOrder,			#protocol : #testing,			#sourceCode : 'testPreservePropertyOrder\r\t| writer testObject |\r\t(testObject := NeoJSONTestObject2 new)\r\t\tid: 123;\r\t\twidth: 100;\r\t\theight: 50;\r\t\tdata: \'test\'.\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: NeoJSONTestObject2 do: [ :mapping | mapping mapInstVars: #(id width height data) ];\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: testObject) equals: \'{"id":123,"width":100,"height":50,"data":"test"}\'.\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: NeoJSONTestObject2 do: [ :mapping | mapping mapInstVars: #(width height data id) ];\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: testObject) equals: \'{"width":100,"height":50,"data":"test","id":123}\'.\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: NeoJSONTestObject2 do: [ :mapping | mapping mapInstVars: #(data id height width) ];\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: testObject) equals: \'{"data":"test","id":123,"height":50,"width":100}\'.\r',			#stamp : 'SvenVanCaekenberghe 7/1/2016 23:50',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '391' ],		#self : OmReference [ '392' ],		#time : DateAndTime [ '2017-07-29T14:12:22.347807+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testStrings,			#protocol : #testing,			#sourceCode : 'testStrings\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: \'foo\') equals: \'"foo"\'.\r\tself assert: (writer value: \'Foo BAR\') equals: \'"Foo BAR"\'.\r\tself assert: (writer value: \'\') equals: \'""\'.\r\tself\r\t\tassert: (writer value: (String withAll: { \r\t\t\t\t\t$". $\\. $/. Character tab. Character cr. Character lf.  Character newPage. Character backspace }))\r\t\tequals: \'"\\"\\\\/\\t\\r\\n\\f\\b"\'\r\r',			#stamp : 'SvenVanCaekenberghe 6/10/2012 21:15',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '392' ],		#self : OmReference [ '393' ],		#time : DateAndTime [ '2017-07-29T14:12:22.348561+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testSymbol,			#protocol : #testing,			#sourceCode : 'testSymbol\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: #foo) equals: \'"foo"\'.\r\tself assert: (writer value: #\'FOO-1\') equals: \'"FOO-1"\'\r',			#stamp : 'SvenVanCaekenberghe 6/8/2012 21:56',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '393' ],		#self : OmReference [ '394' ],		#time : DateAndTime [ '2017-07-29T14:12:22.349284+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testTime,			#protocol : #testing,			#sourceCode : 'testTime\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: Time customDo: [ :mapping |\r\t\t\t\t\tmapping encoder: [ :time | time print24 ] ];\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: (Time hour: 14 minute: 30 second: 8)) equals: \'"14:30:08"\'',			#stamp : 'SvenVanCaekenberghe 6/12/2012 12:02',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '394' ],		#self : OmReference [ '395' ],		#time : DateAndTime [ '2017-07-29T14:12:22.350131+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmark,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tsuper initialize.\r\tobjects := Array new: 1000.\r\t1 to: 1000 do: [ :each |\r\t\t| map |\r\t\t(map := Dictionary new)\r\t\t\tat: \'id\' put: each;\r\t\t\tat: \'name\' put: \'Name-\', each asString;\r\t\t\tat: \'enabled\' put: (#( true false) at: (each \\\\ 2) + 1);\r\t\t\tat: \'color\' put: (#( \'red\' \'green\' \'blue\' ) at: (each \\\\ 3) + 1);\r\t\t\tat: \'value\' put: each + each / 1000.0.\r\t\tobjects at: each put: map ].\r\tjson := String streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream) nextPut: objects ]\r\t\t',			#stamp : 'SvenVanCaekenberghe 6/4/2012 18:49',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '395' ],		#self : OmReference [ '396' ],		#time : DateAndTime [ '2017-07-29T14:12:22.351768+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmark,				#isMetaSide : false			},			#name : #read,			#protocol : #public,			#sourceCode : 'read\r\t^ (NeoJSONReader on: json readStream) next\r',			#stamp : 'SvenVanCaekenberghe 6/4/2012 17:02',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '396' ],		#self : OmReference [ '397' ],		#time : DateAndTime [ '2017-07-29T14:12:22.352477+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmark,				#isMetaSide : false			},			#name : #write,			#protocol : #public,			#sourceCode : 'write\r\t^ String streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream) nextPut: objects ]\r',			#stamp : 'SvenVanCaekenberghe 6/4/2012 17:26',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '397' ],		#self : OmReference [ '398' ],		#time : DateAndTime [ '2017-07-29T14:12:22.353186+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmark,				#isMetaSide : false			},			#name : #writePrettyPrintedRead,			#protocol : #public,			#sourceCode : 'writePrettyPrintedRead\r\t| output |\r\toutput := String streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream) \r\t\t\tprettyPrint: true;\r\t\t\tnextPut: objects ].\r\t^ (NeoJSONReader on: output readStream) \r\t\tnext',			#stamp : 'SvenVanCaekenberghe 6/6/2012 15:07',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '398' ],		#self : OmReference [ '399' ],		#time : DateAndTime [ '2017-07-29T14:12:22.354026+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONMockStream class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: stream\r\t^ self new\r\t\tstream: stream;\r\t\tyourself',			#stamp : 'SvenVanCaekenberghe 6/13/2012 16:25',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '399' ],		#self : OmReference [ '400' ],		#time : DateAndTime [ '2017-07-29T14:12:22.354876+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #testing,			#sourceCode : 'atEnd\r\t^ stream atEnd',			#stamp : 'SvenVanCaekenberghe 6/13/2012 16:23',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '400' ],		#self : OmReference [ '401' ],		#time : DateAndTime [ '2017-07-29T14:12:22.355573+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #close,			#protocol : #accessing,			#sourceCode : 'close\r\t^ stream close',			#stamp : 'SvenVanCaekenberghe 6/13/2012 16:23',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '401' ],		#self : OmReference [ '402' ],		#time : DateAndTime [ '2017-07-29T14:12:22.356374+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #next,			#protocol : #accessing,			#sourceCode : 'next\r\t^ stream next',			#stamp : 'SvenVanCaekenberghe 6/13/2012 16:22',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '402' ],		#self : OmReference [ '403' ],		#time : DateAndTime [ '2017-07-29T14:12:22.357063+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #'nextPut:',			#protocol : #accessing,			#sourceCode : 'nextPut: character\r\t^ stream nextPut: character',			#stamp : 'SvenVanCaekenberghe 6/13/2012 16:23',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '403' ],		#self : OmReference [ '404' ],		#time : DateAndTime [ '2017-07-29T14:12:22.357743+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #'nextPutAll:',			#protocol : #accessing,			#sourceCode : 'nextPutAll: string\r\t^ stream nextPutAll: string',			#stamp : 'SvenVanCaekenberghe 6/13/2012 16:23',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '404' ],		#self : OmReference [ '405' ],		#time : DateAndTime [ '2017-07-29T14:12:22.35842+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #peek,			#protocol : #accessing,			#sourceCode : 'peek\r\t^ stream peek',			#stamp : 'SvenVanCaekenberghe 6/13/2012 16:22',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '405' ],		#self : OmReference [ '406' ],		#time : DateAndTime [ '2017-07-29T14:12:22.359997+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #'peekFor:',			#protocol : #accessing,			#sourceCode : 'peekFor: char\r\t^ stream peekFor: char',			#stamp : 'SvenVanCaekenberghe 12/3/2012 10:53',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '406' ],		#self : OmReference [ '407' ],		#time : DateAndTime [ '2017-07-29T14:12:22.360695+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #space,			#protocol : #accessing,			#sourceCode : 'space\r\t^ stream space',			#stamp : 'SvenVanCaekenberghe 6/13/2012 16:23',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '407' ],		#self : OmReference [ '408' ],		#time : DateAndTime [ '2017-07-29T14:12:22.361406+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #'stream:',			#protocol : #initialize-release,			#sourceCode : 'stream: anObject\r\tstream := anObject',			#stamp : 'SvenVanCaekenberghe 6/13/2012 16:22',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '408' ],		#self : OmReference [ '409' ],		#time : DateAndTime [ '2017-07-29T14:12:22.362168+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject1 class',				#isMetaSide : true			},			#name : #example1,			#protocol : #'instance creation',			#sourceCode : 'example1\r\t^ self new\r\t\tid: 123;\r\t\tname: \'Example1\';\r\t\ttimestamp: (DateAndTime year: 2012 month: 06 day: 08 hour: 14 minute: 30 second: 15 offset: 1 hour);\r\t\tpoints: { 1@2. 3@4 };\r\t\tbytes: #[ 2 4 6 8 ];\r\t\tyourself',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:06',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '409' ],		#self : OmReference [ '410' ],		#time : DateAndTime [ '2017-07-29T14:12:22.362994+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject1 class',				#isMetaSide : true			},			#name : #'neoJsonMapping:',			#protocol : #accessing,			#sourceCode : 'neoJsonMapping: mapper\r\tmapper for: self do: [ :mapping |\r\t\tmapping mapInstVars: #(id name).\r\t\t(mapping mapInstVar: #timestamp to: \'created-at\') valueSchema: DateAndTime.\r\t\t(mapping mapInstVar: #points) valueSchema: #ArrayOfPoints.\r\t\t(mapping mapInstVar: #bytes) valueSchema: ByteArray ].\r\tmapper for: DateAndTime customDo: [ :mapping |\r\t\tmapping decoder: [ :string | DateAndTime fromString: string ].\r\t\tmapping encoder: [ :dateAndTime | dateAndTime printString ] ].\r\tmapper for: #ArrayOfPoints customDo: [ :mapping |\r\t\tmapping listOfElementSchema: Point ].  \r\tmapper mapAllInstVarsFor: Point.\r\tmapper for: ByteArray customDo: [ :mapping |\r\t\tmapping listOfType: ByteArray ]',			#stamp : 'SvenVanCaekenberghe 6/12/2012 12:34',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '410' ],		#self : OmReference [ '411' ],		#time : DateAndTime [ '2017-07-29T14:12:22.363777+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\tself == anObject\r\t\tifTrue: [ ^ true ].\r\tself class = anObject class\r\t\tifFalse: [ ^ false ].\r\t^ id = anObject id\r\t\tand: [\r\t\t\tname = anObject name\r\t\t\t\tand: [\r\t\t\t\t\ttimestamp = anObject timestamp\r\t\t\t\t\t\tand: [\r\t\t\t\t\t\t\tpoints = anObject points\r\t\t\t\t\t\t\t\tand: [ bytes = anObject bytes ] ] ] ]',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:45',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '411' ],		#self : OmReference [ '412' ],		#time : DateAndTime [ '2017-07-29T14:12:22.364499+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #bytes,			#protocol : #accessing,			#sourceCode : 'bytes\r\t^ bytes',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:03',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '412' ],		#self : OmReference [ '413' ],		#time : DateAndTime [ '2017-07-29T14:12:22.365176+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #'bytes:',			#protocol : #accessing,			#sourceCode : 'bytes: byteArray\r\tbytes := byteArray',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '413' ],		#self : OmReference [ '414' ],		#time : DateAndTime [ '2017-07-29T14:12:22.365892+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ id hash bitXor: (name hash bitXor: (timestamp hash bitXor: (points hash bitXor: bytes hash)))',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:46',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '414' ],		#self : OmReference [ '415' ],		#time : DateAndTime [ '2017-07-29T14:12:22.366619+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #id,			#protocol : #accessing,			#sourceCode : 'id\r\t^ id',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:02',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '415' ],		#self : OmReference [ '416' ],		#time : DateAndTime [ '2017-07-29T14:12:22.368217+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #'id:',			#protocol : #accessing,			#sourceCode : 'id: integer\r\tid := integer',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:03',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '416' ],		#self : OmReference [ '417' ],		#time : DateAndTime [ '2017-07-29T14:12:22.368952+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t^ name',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:02',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '417' ],		#self : OmReference [ '418' ],		#time : DateAndTime [ '2017-07-29T14:12:22.369636+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #'name:',			#protocol : #accessing,			#sourceCode : 'name: string\r\tname := string',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:03',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '418' ],		#self : OmReference [ '419' ],		#time : DateAndTime [ '2017-07-29T14:12:22.370395+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #points,			#protocol : #accessing,			#sourceCode : 'points\r\t^ points',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:03',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '419' ],		#self : OmReference [ '420' ],		#time : DateAndTime [ '2017-07-29T14:12:22.371073+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #'points:',			#protocol : #accessing,			#sourceCode : 'points: arrayOfPoints\r\tpoints := arrayOfPoints ',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '420' ],		#self : OmReference [ '421' ],		#time : DateAndTime [ '2017-07-29T14:12:22.371741+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #timestamp,			#protocol : #accessing,			#sourceCode : 'timestamp\r\t^ timestamp',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:03',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '421' ],		#self : OmReference [ '422' ],		#time : DateAndTime [ '2017-07-29T14:12:22.372438+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #'timestamp:',			#protocol : #accessing,			#sourceCode : 'timestamp: dateAndTime \r\ttimestamp := dateAndTime ',			#stamp : 'SvenVanCaekenberghe 6/9/2012 18:03',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '422' ],		#self : OmReference [ '423' ],		#time : DateAndTime [ '2017-07-29T14:12:22.373136+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject2 class',				#isMetaSide : true			},			#name : #benchmark10k,			#protocol : #testing,			#sourceCode : 'benchmark10k\r\t"self benchmark10k"\r\t\r\tself benchmark: 10000',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:53',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '423' ],		#self : OmReference [ '424' ],		#time : DateAndTime [ '2017-07-29T14:12:22.373829+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject2 class',				#isMetaSide : true			},			#name : #benchmark10kAsDictionary,			#protocol : #testing,			#sourceCode : 'benchmark10kAsDictionary\r\t"self benchmark10kAsDictionary"\r\t\r\tself benchmarkAsDictionary: 10000',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:54',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '424' ],		#self : OmReference [ '425' ],		#time : DateAndTime [ '2017-07-29T14:12:22.374537+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject2 class',				#isMetaSide : true			},			#name : #benchmark200k,			#protocol : #testing,			#sourceCode : 'benchmark200k\r\t"self benchmark200k"\r\t\r\tself benchmark: 200000',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:54',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '425' ],		#self : OmReference [ '426' ],		#time : DateAndTime [ '2017-07-29T14:12:22.376436+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject2 class',				#isMetaSide : true			},			#name : #'benchmark:',			#protocol : #testing,			#sourceCode : 'benchmark: count\r\t"self benchmark: 1000"\r\t\r\t| collection json size |\r\tcollection := Array new: count withAll: self example1.\r\tsize := 2 + (count * (NeoJSONWriter toString: self example1) size) + count - 1.\r\tTranscript \r\t\tcr;\r\t\t<< (\'Serializing {1} objects took ms \' format: { count });\r\t\tshow: [ json := String new: size streamContents: [ :stream |\r\t\t\t\t\t\t\t\t(NeoJSONWriter on: stream) nextPut: collection ] ] timeToRun.\r\tTranscript \r\t\tcr;\r\t\t<< (\'Deserializing {1} objects took ms \' format: { count });\r\t\tshow: [ NeoJSONReader fromString: json ] timeToRun.',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:52',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '426' ],		#self : OmReference [ '427' ],		#time : DateAndTime [ '2017-07-29T14:12:22.377416+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject2 class',				#isMetaSide : true			},			#name : #'benchmarkAsDictionary:',			#protocol : #testing,			#sourceCode : 'benchmarkAsDictionary: count\r\t"self benchmarkAsDictionary: 1000"\r\t\r\t| collection json size |\r\tcollection := Array new: count withAll: self example1 asDictionary.\r\tsize := 2 + (count * (NeoJSONWriter toString: self example1 asDictionary) size) + count - 1.\r\tTranscript \r\t\tcr;\r\t\t<< (\'Serializing {1} objects took ms \' format: { count });\r\t\tshow: [ json := String new: size streamContents: [ :stream |\r\t\t\t\t\t\t\t\t(NeoJSONWriter on: stream) nextPut: collection ] ] timeToRun.\r\tTranscript \r\t\tcr;\r\t\t<< (\'Deserializing {1} objects took ms \' format: { count });\r\t\tshow: [ NeoJSONReader fromString: json ] timeToRun.',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:53',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '427' ],		#self : OmReference [ '428' ],		#time : DateAndTime [ '2017-07-29T14:12:22.378246+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject2 class',				#isMetaSide : true			},			#name : #example1,			#protocol : #'instance creation',			#sourceCode : 'example1\r\t^ self new\r\t\tid: 13;\r\t\twidth: 250;\r\t\theight: 110;\r\t\tdata: (String new: 512 withAll: $a);\r\t\tyourself',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '428' ],		#self : OmReference [ '429' ],		#time : DateAndTime [ '2017-07-29T14:12:22.378989+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject2 class',				#isMetaSide : true			},			#name : #'neoJsonMapping:',			#protocol : #accessing,			#sourceCode : 'neoJsonMapping: mapper\r\t"For inheritance mapping to work, the schema/classname must be self,\r\tbut the instance variables have to be enumerated manually per class"\r\r\tmapper for: self do: [ :mapping |\r\t\tmapping mapInstVars: #(id width height data) ] ',			#stamp : 'SvenVanCaekenberghe 3/22/2014 10:50',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '429' ],		#self : OmReference [ '430' ],		#time : DateAndTime [ '2017-07-29T14:12:22.379722+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\tself == anObject\r\t\tifTrue: [ ^ true ].\r\tself class = anObject class\r\t\tifFalse: [ ^ false ].\r\t^ id = anObject id\r\t\tand: [\r\t\t\theight = anObject height\r\t\t\t\tand: [\r\t\t\t\t\twidth = anObject width\r\t\t\t\t\t\tand: [\r\t\t\t\t\t\t\tdata = anObject data ] ] ]',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:22',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '430' ],		#self : OmReference [ '431' ],		#time : DateAndTime [ '2017-07-29T14:12:22.380435+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #asDictionary,			#protocol : #converting,			#sourceCode : 'asDictionary\r\t^ Dictionary new\r\t\tat: #id put: id;\r\t\tat: #height put: height;\r\t\tat: #width put: width;\r\t\tat: #data put: data;\r\t\tyourself',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:47',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '431' ],		#self : OmReference [ '432' ],		#time : DateAndTime [ '2017-07-29T14:12:22.381127+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #data,			#protocol : #accessing,			#sourceCode : 'data\r\t^ data',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '432' ],		#self : OmReference [ '433' ],		#time : DateAndTime [ '2017-07-29T14:12:22.381819+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #'data:',			#protocol : #accessing,			#sourceCode : 'data: anObject\r\tdata := anObject',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '433' ],		#self : OmReference [ '434' ],		#time : DateAndTime [ '2017-07-29T14:12:22.382501+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ id hash bitXor: (width hash bitXor: (height hash bitXor: data hash))',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:22',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '434' ],		#self : OmReference [ '435' ],		#time : DateAndTime [ '2017-07-29T14:12:22.383318+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #height,			#protocol : #accessing,			#sourceCode : 'height\r\t^ height',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '435' ],		#self : OmReference [ '436' ],		#time : DateAndTime [ '2017-07-29T14:12:22.384027+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #'height:',			#protocol : #accessing,			#sourceCode : 'height: anObject\r\theight := anObject',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '436' ],		#self : OmReference [ '437' ],		#time : DateAndTime [ '2017-07-29T14:12:22.384719+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #id,			#protocol : #accessing,			#sourceCode : 'id\r\t^ id',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '437' ],		#self : OmReference [ '438' ],		#time : DateAndTime [ '2017-07-29T14:12:22.385427+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #'id:',			#protocol : #accessing,			#sourceCode : 'id: anObject\r\tid := anObject',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '438' ],		#self : OmReference [ '439' ],		#time : DateAndTime [ '2017-07-29T14:12:22.386177+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #width,			#protocol : #accessing,			#sourceCode : 'width\r\t^ width',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '439' ],		#self : OmReference [ '440' ],		#time : DateAndTime [ '2017-07-29T14:12:22.386885+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #'width:',			#protocol : #accessing,			#sourceCode : 'width: anObject\r\twidth := anObject',			#stamp : 'SvenVanCaekenberghe 6/10/2012 20:04',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '440' ],		#self : OmReference [ '441' ],		#time : DateAndTime [ '2017-07-29T14:12:22.387621+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject3 class',				#isMetaSide : true			},			#name : #example1,			#protocol : #'instance creation',			#sourceCode : 'example1\r\t^ super example1\r\t\tdata: (String new: 8 withAll: $a);\r\t\tcolor: \'red\';\r\t\ttransparent: true;\r\t\tyourself',			#stamp : 'SvenVanCaekenberghe 3/22/2014 09:43',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '441' ],		#self : OmReference [ '442' ],		#time : DateAndTime [ '2017-07-29T14:12:22.38838+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject3 class',				#isMetaSide : true			},			#name : #'neoJsonMapping:',			#protocol : #accessing,			#sourceCode : 'neoJsonMapping: mapper\r\t"For inheritance mapping to work, the schema/classname must be self,\r\tbut the instance variables have to be enumerated manually per class"\r\t\r\tsuper neoJsonMapping: mapper.\r\tmapper for: self do: [ :mapping |\r\t\tmapping mapInstVars: #(color transparent) ]',			#stamp : 'SvenVanCaekenberghe 3/22/2014 10:50',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '442' ],		#self : OmReference [ '443' ],		#time : DateAndTime [ '2017-07-29T14:12:22.389114+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject3,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\t^ super = anObject \r\t\tand: [ color = anObject color\r\t\t\tand: [ transparent = anObject transparent ] ]',			#stamp : 'SvenVanCaekenberghe 3/22/2014 09:45',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '443' ],		#self : OmReference [ '444' ],		#time : DateAndTime [ '2017-07-29T14:12:22.38982+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject3,				#isMetaSide : false			},			#name : #asDictionary,			#protocol : #converting,			#sourceCode : 'asDictionary\r\t^ super asDictionary\r\t\tat: #color put: color;\r\t\tat: #transparent put: transparent;\r\t\tyourself',			#stamp : 'SvenVanCaekenberghe 3/22/2014 09:46',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '444' ],		#self : OmReference [ '445' ],		#time : DateAndTime [ '2017-07-29T14:12:22.390671+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject3,				#isMetaSide : false			},			#name : #color,			#protocol : #accessing,			#sourceCode : 'color\r\t^ color',			#stamp : 'SvenVanCaekenberghe 3/22/2014 09:43',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '445' ],		#self : OmReference [ '446' ],		#time : DateAndTime [ '2017-07-29T14:12:22.391372+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject3,				#isMetaSide : false			},			#name : #'color:',			#protocol : #accessing,			#sourceCode : 'color: anObject\r\tcolor := anObject',			#stamp : 'SvenVanCaekenberghe 3/22/2014 09:43',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '446' ],		#self : OmReference [ '447' ],		#time : DateAndTime [ '2017-07-29T14:12:22.392057+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject3,				#isMetaSide : false			},			#name : #transparent,			#protocol : #accessing,			#sourceCode : 'transparent\r\t^ transparent',			#stamp : 'SvenVanCaekenberghe 3/22/2014 09:43',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '447' ],		#self : OmReference [ '448' ],		#time : DateAndTime [ '2017-07-29T14:12:22.392761+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject3,				#isMetaSide : false			},			#name : #'transparent:',			#protocol : #accessing,			#sourceCode : 'transparent: anObject\r\ttransparent := anObject',			#stamp : 'SvenVanCaekenberghe 3/22/2014 09:43',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '448' ],		#self : OmReference [ '449' ],		#time : DateAndTime [ '2017-07-29T14:12:22.393504+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #closeLog,			#protocol : #private,			#sourceCode : 'closeLog\r\tlogStream ifNotNil: [ \r\t\tlogStream close.\r\t\tlogStream := nil ].\r\t^ self logFile exists\r\t\tifTrue: [ self logFile contents ] \r\t\tifFalse: [ \'log file is empty\' ]',			#stamp : 'SvenVanCaekenberghe 5/29/2017 09:28',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '449' ],		#self : OmReference [ '450' ],		#time : DateAndTime [ '2017-07-29T14:12:22.394291+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #ensureLog,			#protocol : #private,			#sourceCode : 'ensureLog\r\tlogStream ifNil: [ \r\t\tlogStream := self logFile ensureDelete; writeStream. \r\t\tlogStream setToEnd ]\r\t',			#stamp : 'SvenVanCaekenberghe 5/29/2017 09:27',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '450' ],		#self : OmReference [ '451' ],		#time : DateAndTime [ '2017-07-29T14:12:22.395035+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #gitDirectory,			#protocol : #accessing,			#sourceCode : 'gitDirectory\r\t^ gitDirectory ifNil: [ gitDirectory := FileLocator home / #Develop / #git ]',			#stamp : 'SvenVanCaekenberghe 5/28/2017 11:25',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '451' ],		#self : OmReference [ '452' ],		#time : DateAndTime [ '2017-07-29T14:12:22.395769+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #'gitDirectory:',			#protocol : #accessing,			#sourceCode : 'gitDirectory: fileReference\r\tgitDirectory := fileReference',			#stamp : 'SvenVanCaekenberghe 5/28/2017 11:23',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '452' ],		#self : OmReference [ '453' ],		#time : DateAndTime [ '2017-07-29T14:12:22.396456+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #jsonTestSuiteDirectory,			#protocol : #accessing,			#sourceCode : 'jsonTestSuiteDirectory\r\t^ self gitDirectory / #JSONTestSuite',			#stamp : 'SvenVanCaekenberghe 5/28/2017 11:26',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '453' ],		#self : OmReference [ '454' ],		#time : DateAndTime [ '2017-07-29T14:12:22.397146+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #jsonTestSuiteTestParsingDirectory,			#protocol : #accessing,			#sourceCode : 'jsonTestSuiteTestParsingDirectory\r\t^ self jsonTestSuiteDirectory / \'test_parsing\'',			#stamp : 'SvenVanCaekenberghe 5/28/2017 11:27',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '454' ],		#self : OmReference [ '455' ],		#time : DateAndTime [ '2017-07-29T14:12:22.398093+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #jsonTestSuiteTestParsingFailFiles,			#protocol : #accessing,			#sourceCode : 'jsonTestSuiteTestParsingFailFiles\r\t^ self jsonTestSuiteTestParsingDirectory childrenMatching: \'n_*.json\'',			#stamp : 'SvenVanCaekenberghe 5/28/2017 13:50',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '455' ],		#self : OmReference [ '456' ],		#time : DateAndTime [ '2017-07-29T14:12:22.398806+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #jsonTestSuiteTestParsingInfoFiles,			#protocol : #accessing,			#sourceCode : 'jsonTestSuiteTestParsingInfoFiles\r\t^ self jsonTestSuiteTestParsingDirectory childrenMatching: \'i_*.json\'',			#stamp : 'SvenVanCaekenberghe 5/28/2017 13:50',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '456' ],		#self : OmReference [ '457' ],		#time : DateAndTime [ '2017-07-29T14:12:22.399498+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #jsonTestSuiteTestParsingPassFiles,			#protocol : #accessing,			#sourceCode : 'jsonTestSuiteTestParsingPassFiles\r\t^ self jsonTestSuiteTestParsingDirectory childrenMatching: \'y_*.json\'',			#stamp : 'SvenVanCaekenberghe 5/28/2017 13:50',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '457' ],		#self : OmReference [ '458' ],		#time : DateAndTime [ '2017-07-29T14:12:22.40021+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #jsonTestSuiteTestTransformDirectory,			#protocol : #accessing,			#sourceCode : 'jsonTestSuiteTestTransformDirectory\r\t^ self jsonTestSuiteDirectory / \'test_transform\'',			#stamp : 'SvenVanCaekenberghe 5/28/2017 11:27',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '458' ],		#self : OmReference [ '459' ],		#time : DateAndTime [ '2017-07-29T14:12:22.4009+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #'log:',			#protocol : #private,			#sourceCode : 'log: message\r\tself ensureLog.\r\tlogStream nextPutAll: message; lf; flush\r',			#stamp : 'SvenVanCaekenberghe 5/29/2017 09:25',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '459' ],		#self : OmReference [ '460' ],		#time : DateAndTime [ '2017-07-29T14:12:22.401605+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #logFile,			#protocol : #private,			#sourceCode : 'logFile\r\t^ \'neo-json-validation.log\' asFileReference',			#stamp : 'SvenVanCaekenberghe 5/29/2017 09:26',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '460' ],		#self : OmReference [ '461' ],		#time : DateAndTime [ '2017-07-29T14:12:22.402378+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #nativeJsonBenchmarkDataDirectory,			#protocol : #accessing,			#sourceCode : 'nativeJsonBenchmarkDataDirectory\r\t^ self nativeJsonBenchmarkDirectory / #data',			#stamp : 'SvenVanCaekenberghe 5/28/2017 11:28',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '461' ],		#self : OmReference [ '462' ],		#time : DateAndTime [ '2017-07-29T14:12:22.403072+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #nativeJsonBenchmarkDirectory,			#protocol : #accessing,			#sourceCode : 'nativeJsonBenchmarkDirectory\r\t^ self gitDirectory / \'nativejson-benchmark\'',			#stamp : 'SvenVanCaekenberghe 5/28/2017 11:28',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '462' ],		#self : OmReference [ '463' ],		#time : DateAndTime [ '2017-07-29T14:12:22.403753+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #nativeJsonBenchmarkJsonCheckerDirectory,			#protocol : #accessing,			#sourceCode : 'nativeJsonBenchmarkJsonCheckerDirectory\r\t^ self nativeJsonBenchmarkDataDirectory / #jsonchecker',			#stamp : 'SvenVanCaekenberghe 5/28/2017 11:29',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '463' ],		#self : OmReference [ '464' ],		#time : DateAndTime [ '2017-07-29T14:12:22.40447+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #nativeJsonBenchmarkJsonCheckerFailFiles,			#protocol : #accessing,			#sourceCode : 'nativeJsonBenchmarkJsonCheckerFailFiles\r\t^ self nativeJsonBenchmarkJsonCheckerDirectory childrenMatching: \'fail*.json\'',			#stamp : 'SvenVanCaekenberghe 5/28/2017 12:05',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '464' ],		#self : OmReference [ '465' ],		#time : DateAndTime [ '2017-07-29T14:12:22.405339+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #nativeJsonBenchmarkJsonCheckerPassFiles,			#protocol : #accessing,			#sourceCode : 'nativeJsonBenchmarkJsonCheckerPassFiles\r\t^ self nativeJsonBenchmarkJsonCheckerDirectory childrenMatching: \'pass*.json\'',			#stamp : 'SvenVanCaekenberghe 5/28/2017 12:05',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '465' ],		#self : OmReference [ '466' ],		#time : DateAndTime [ '2017-07-29T14:12:22.406032+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #nativeJsonBenchmarkRoundTripDirectory,			#protocol : #accessing,			#sourceCode : 'nativeJsonBenchmarkRoundTripDirectory\r\t^ self nativeJsonBenchmarkDataDirectory / #roundtrip',			#stamp : 'SvenVanCaekenberghe 5/28/2017 11:29',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '466' ],		#self : OmReference [ '467' ],		#time : DateAndTime [ '2017-07-29T14:12:22.406747+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #nativeJsonBenchmarkRoundTripFiles,			#protocol : #accessing,			#sourceCode : 'nativeJsonBenchmarkRoundTripFiles\r\t^ self nativeJsonBenchmarkRoundTripDirectory children',			#stamp : 'SvenVanCaekenberghe 5/28/2017 11:34',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '467' ],		#self : OmReference [ '468' ],		#time : DateAndTime [ '2017-07-29T14:12:22.407434+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #runJsonTestSuiteTestParsingFailures,			#protocol : #running,			#sourceCode : 'runJsonTestSuiteTestParsingFailures\r\t^ self\r\t\tvalidateFiles: self jsonTestSuiteTestParsingFailFiles \r\t\tusingTest: [ :file | \r\t\t\t| data success |\r\t\t\tsuccess := false.\r\t\t\t[ data := file readStreamDo: [ :in | (NeoJSONReader on: in) next; failIfNotAtEnd ] ]\r\t\t\t\ton: NeoJSONParseError\r\t\t\t\tdo: [ :exception | self log: exception printString. success := true ].\r\t\t\tsuccess ]',			#stamp : 'SvenVanCaekenberghe 5/29/2017 09:57',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '468' ],		#self : OmReference [ '469' ],		#time : DateAndTime [ '2017-07-29T14:12:22.408174+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #runJsonTestSuiteTestParsingInfo,			#protocol : #running,			#sourceCode : 'runJsonTestSuiteTestParsingInfo\r\t^ self\r\t\tvalidateFiles: self jsonTestSuiteTestParsingInfoFiles \r\t\tusingTest: [ :file | \r\t\t\t| data success |\r\t\t\tsuccess := true.\r\t\t\t[ data := file readStreamDo: [ :in | (NeoJSONReader on: in) next ] ]\r\t\t\t\ton: NeoJSONParseError\r\t\t\t\tdo: [ :exception | self log: exception printString. success := false ].\r\t\t\tsuccess ]',			#stamp : 'SvenVanCaekenberghe 5/29/2017 09:25',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '469' ],		#self : OmReference [ '470' ],		#time : DateAndTime [ '2017-07-29T14:12:22.408927+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #runJsonTestSuiteTestParsingPasses,			#protocol : #running,			#sourceCode : 'runJsonTestSuiteTestParsingPasses\r\t^ self\r\t\tvalidateFiles: self jsonTestSuiteTestParsingPassFiles \r\t\tusingTest: [ :file | \r\t\t\t| data success |\r\t\t\tsuccess := true.\r\t\t\t[ data := file readStreamDo: [ :in | (NeoJSONReader on: in) next ] ]\r\t\t\t\ton: NeoJSONParseError\r\t\t\t\tdo: [ :exception | self log: exception printString. success := false ].\r\t\t\tsuccess ]',			#stamp : 'SvenVanCaekenberghe 5/29/2017 09:25',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '470' ],		#self : OmReference [ '471' ],		#time : DateAndTime [ '2017-07-29T14:12:22.409648+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #runNativeJsonBenchmarkJsonCheckerFailures,			#protocol : #running,			#sourceCode : 'runNativeJsonBenchmarkJsonCheckerFailures\r\t^ self\r\t\tvalidateFiles: self nativeJsonBenchmarkJsonCheckerFailFiles\r\t\tusingTest: [ :file | \r\t\t\t| data success |\r\t\t\tsuccess := false.\r\t\t\t[ data := file readStreamDo: [ :in | (NeoJSONReader on: in) next; failIfNotAtEnd ] ]\r\t\t\t\ton: NeoJSONParseError\r\t\t\t\tdo: [ :exception | self log: exception printString. success := true ].\r\t\t\tsuccess ]',			#stamp : 'SvenVanCaekenberghe 5/29/2017 09:40',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '471' ],		#self : OmReference [ '472' ],		#time : DateAndTime [ '2017-07-29T14:12:22.41047+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #runNativeJsonBenchmarkJsonCheckerPasses,			#protocol : #running,			#sourceCode : 'runNativeJsonBenchmarkJsonCheckerPasses\r\t^ self\r\t\tvalidateFiles: self nativeJsonBenchmarkJsonCheckerPassFiles\r\t\tusingTest: [ :file | \r\t\t\t| data success |\r\t\t\tsuccess := true.\r\t\t\t[ data := file readStreamDo: [ :in | (NeoJSONReader on: in) next ] ]\r\t\t\t\ton: NeoJSONParseError\r\t\t\t\tdo: [ :exception | self log: exception printString. success := false ].\r\t\t\tsuccess ]',			#stamp : 'SvenVanCaekenberghe 5/29/2017 09:25',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '472' ],		#self : OmReference [ '473' ],		#time : DateAndTime [ '2017-07-29T14:12:22.411208+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #runNativeJsonBenchmarkRoundTrip,			#protocol : #running,			#sourceCode : 'runNativeJsonBenchmarkRoundTrip\r\t^ self \r\t\tvalidateFiles: self nativeJsonBenchmarkRoundTripFiles\r\t\tusingTest: [ :file |\r\t\t\t| data json |\r\t\t\tdata := file readStreamDo: [ :in | (NeoJSONReader on: in) next ].\r\t\t\tjson := NeoJSONWriter toString: data.\r\t\t\tjson = file contents ]',			#stamp : 'SvenVanCaekenberghe 5/29/2017 09:25',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '473' ],		#self : OmReference [ '474' ],		#time : DateAndTime [ '2017-07-29T14:12:22.412094+09:00' ],		#trigger : OmReference [ '286' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #'validateFiles:usingTest:',			#protocol : #private,			#sourceCode : 'validateFiles: files usingTest: block\r\t| total succeeded failed |\r\ttotal := succeeded := failed := 0.\r\tfiles do: [ :file | \r\t\t| success |\r\t\tself log: \'Running \' , file pathString.\r\t\tself log: ([ file contents contractTo: 64 ] on: Error do: [ :exception | exception printString ]).\r\t\tsuccess := [ block value: file ]\r\t\t\ton: Error\r\t\t\tdo: [ :exception | self log: \'  Errored. \' , exception printString. false ].\r\t\ttotal := total + 1.\r\t\tsuccess\r\t\t\tifTrue: [ succeeded := succeeded + 1 ]\r\t\t\tifFalse: [ failed := failed + 1 ].\r\t\tself log: (success ifTrue: [ \'  Succeeded\' ] ifFalse: [ \'  Failed\' ]); log: \'\' ].\r\tself log: (\'{1} total = {2} succeeded + {3} failed\' format: { total. succeeded. failed }).\r\t^ self closeLog',			#stamp : 'SvenVanCaekenberghe 5/29/2017 09:25',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-07-29T14:12:22.503557+09:00' ],		#prior : OmReference [ '474' ],		#self : OmReference [ '475' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'WebBrowser-Core-TorstenBergmann.5'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '475' ],		#self : OmReference [ '476' ],		#time : DateAndTime [ '2017-07-29T14:12:22.657561+09:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WBMacWebBrowser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #WBMacWebBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WBMacWebBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'WBMacWebBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WBMacWebBrowser,					#isMetaSide : false				},				#parent : @7,				#content : 'Access to the web browser on Mac',				#stamp : 'TorstenBergmann 4/13/2016 08:24'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Access to the web browser on Mac',		#newStamp : 'TorstenBergmann 4/13/2016 08:24'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '476' ],		#self : OmReference [ '477' ],		#time : DateAndTime [ '2017-07-29T14:12:22.658932+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpCategoryAddition {		#classCategoryName : #WebBrowser-Core-OS-Mac,		#affectedPackageName : #WebBrowser-Core	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '477' ],		#self : OmReference [ '478' ],		#time : DateAndTime [ '2017-07-29T14:12:22.699899+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WBMacWebBrowser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WebBrowser-Core-OS-Mac\''			},			#name : #WBMacWebBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WBMacWebBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'WBMacWebBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WBMacWebBrowser,					#isMetaSide : false				},				#parent : @8,				#content : 'Access to the web browser on Mac',				#stamp : 'TorstenBergmann 4/13/2016 08:24'			},			#classVariables : OrderedCollection [ ],			#category : #WebBrowser-Core-OS-Mac,			#package : #WebBrowser-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '478' ],		#self : OmReference [ '479' ],		#time : DateAndTime [ '2017-07-29T14:12:22.730113+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WBUnixWebBrowser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #WBUnixWebBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WBUnixWebBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'WBUnixWebBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WBUnixWebBrowser,					#isMetaSide : false				},				#parent : @8,				#content : 'Access to the web browser on Unix',				#stamp : 'TorstenBergmann 4/13/2016 08:24'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Access to the web browser on Unix',		#newStamp : 'TorstenBergmann 4/13/2016 08:24'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '479' ],		#self : OmReference [ '480' ],		#time : DateAndTime [ '2017-07-29T14:12:22.731378+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpCategoryAddition {		#classCategoryName : #WebBrowser-Core-OS-Unix,		#affectedPackageName : #WebBrowser-Core	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '480' ],		#self : OmReference [ '481' ],		#time : DateAndTime [ '2017-07-29T14:12:22.732939+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WBUnixWebBrowser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WebBrowser-Core-OS-Unix\''			},			#name : #WBUnixWebBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WBUnixWebBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'WBUnixWebBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WBUnixWebBrowser,					#isMetaSide : false				},				#parent : @8,				#content : 'Access to the web browser on Unix',				#stamp : 'TorstenBergmann 4/13/2016 08:24'			},			#classVariables : OrderedCollection [ ],			#category : #WebBrowser-Core-OS-Unix,			#package : #WebBrowser-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '481' ],		#self : OmReference [ '482' ],		#time : DateAndTime [ '2017-07-29T14:12:22.736294+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WBWindowsWebBrowser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #WBWindowsWebBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WBWindowsWebBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'WBWindowsWebBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WBWindowsWebBrowser,					#isMetaSide : false				},				#parent : @8,				#content : 'Access to the web browser on Windows',				#stamp : 'TorstenBergmann 4/13/2016 08:24'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Access to the web browser on Windows',		#newStamp : 'TorstenBergmann 4/13/2016 08:24'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '482' ],		#self : OmReference [ '483' ],		#time : DateAndTime [ '2017-07-29T14:12:22.737358+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpCategoryAddition {		#classCategoryName : #WebBrowser-Core-OS-Windows,		#affectedPackageName : #WebBrowser-Core	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '483' ],		#self : OmReference [ '484' ],		#time : DateAndTime [ '2017-07-29T14:12:22.738842+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WBWindowsWebBrowser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WebBrowser-Core-OS-Windows\''			},			#name : #WBWindowsWebBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WBWindowsWebBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'WBWindowsWebBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WBWindowsWebBrowser,					#isMetaSide : false				},				#parent : @8,				#content : 'Access to the web browser on Windows',				#stamp : 'TorstenBergmann 4/13/2016 08:24'			},			#classVariables : OrderedCollection [ ],			#category : #WebBrowser-Core-OS-Windows,			#package : #WebBrowser-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '484' ],		#self : OmReference [ '485' ],		#time : DateAndTime [ '2017-07-29T14:12:22.74294+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WebBrowser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #WebBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WebBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'WebBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WebBrowser,					#isMetaSide : false				},				#parent : @8,				#content : 'General access to a webbrowser',				#stamp : 'TorstenBergmann 4/13/2016 08:25'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'General access to a webbrowser',		#newStamp : 'TorstenBergmann 4/13/2016 08:25'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '485' ],		#self : OmReference [ '486' ],		#time : DateAndTime [ '2017-07-29T14:12:22.743885+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpCategoryAddition {		#classCategoryName : #WebBrowser-Core-Base,		#affectedPackageName : #WebBrowser-Core	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '486' ],		#self : OmReference [ '487' ],		#time : DateAndTime [ '2017-07-29T14:12:22.745061+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WebBrowser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WebBrowser-Core-Base\''			},			#name : #WebBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WebBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'WebBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WebBrowser,					#isMetaSide : false				},				#parent : @8,				#content : 'General access to a webbrowser',				#stamp : 'TorstenBergmann 4/13/2016 08:25'			},			#classVariables : OrderedCollection [ ],			#category : #WebBrowser-Core-Base,			#package : #WebBrowser-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '487' ],		#self : OmReference [ '488' ],		#time : DateAndTime [ '2017-07-29T14:12:22.777609+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WBMacWebBrowser class',				#isMetaSide : true			},			#name : #example,			#protocol : #examples,			#sourceCode : 'example\r\r\tself openOn: \'http://www.pharo.org\'',			#stamp : 'TorstenBergmann 4/13/2016 08:35',			#package : #WebBrowser-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '488' ],		#self : OmReference [ '489' ],		#time : DateAndTime [ '2017-07-29T14:12:22.783818+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WBMacWebBrowser class',				#isMetaSide : true			},			#name : #'openOn:',			#protocol : #'instance creation',			#sourceCode : 'openOn: anURLString\r\t"\r\tself openOn: \'http://www.pharo.org\'\r\t"\r\t| openCommand |\r\topenCommand := \'open "{1}"\' format: { anURLString }.\r\tself system: openCommand.',			#stamp : 'TorstenBergmann 4/13/2016 08:36',			#package : #WebBrowser-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '489' ],		#self : OmReference [ '490' ],		#time : DateAndTime [ '2017-07-29T14:12:22.784934+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WBMacWebBrowser class',				#isMetaSide : true			},			#name : #'system:',			#protocol : #'private - uffi',			#sourceCode : 'system: command\r\r\t^ self ffiCall: #(#int #system #(#char #* #command)) module: LibC',			#stamp : 'TorstenBergmann 4/13/2016 09:46',			#package : #WebBrowser-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '490' ],		#self : OmReference [ '491' ],		#time : DateAndTime [ '2017-07-29T14:12:22.785884+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WBUnixWebBrowser class',				#isMetaSide : true			},			#name : #example,			#protocol : #examples,			#sourceCode : 'example\r\r\tself openOn: \'http://www.pharo.org\'',			#stamp : 'TorstenBergmann 4/13/2016 08:31',			#package : #WebBrowser-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '491' ],		#self : OmReference [ '492' ],		#time : DateAndTime [ '2017-07-29T14:12:22.786639+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WBUnixWebBrowser class',				#isMetaSide : true			},			#name : #'openOn:',			#protocol : #'instance creation',			#sourceCode : 'openOn: anURLString\r\t"\r\tself openOn: \'http://www.pharo.org\'\r\t"\r\t| openCommand |\r\topenCommand := \'xdg-open {1} &\' format: { anURLString }.\r\tself system: openCommand.',			#stamp : 'TorstenBergmann 4/13/2016 08:36',			#package : #WebBrowser-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '492' ],		#self : OmReference [ '493' ],		#time : DateAndTime [ '2017-07-29T14:12:22.787419+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WBUnixWebBrowser class',				#isMetaSide : true			},			#name : #'system:',			#protocol : #'private - uffi',			#sourceCode : 'system: command\r\r\t^ self ffiCall: #(#int #system #(#char #* #command)) module: LibC',			#stamp : 'TorstenBergmann 4/13/2016 09:45',			#package : #WebBrowser-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '493' ],		#self : OmReference [ '494' ],		#time : DateAndTime [ '2017-07-29T14:12:22.788271+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WBWindowsWebBrowser class',				#isMetaSide : true			},			#name : #example,			#protocol : #examples,			#sourceCode : 'example\r\r\tself openOn: \'http://www.pharo.org\'',			#stamp : 'TorstenBergmann 4/13/2016 08:28',			#package : #WebBrowser-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '494' ],		#self : OmReference [ '495' ],		#time : DateAndTime [ '2017-07-29T14:12:22.789059+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WBWindowsWebBrowser class',				#isMetaSide : true			},			#name : #'openOn:',			#protocol : #'instance creation',			#sourceCode : 'openOn: anURLString\r\t"\r\tself openOn: \'http://www.pharo.org\'\r\t"\r\t^self shellExecute: \'open\' file: anURLString parameters: \'\' directory: \'\' show: 5 "SW_SHOW"',			#stamp : 'TorstenBergmann 4/13/2016 08:36',			#package : #WebBrowser-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '495' ],		#self : OmReference [ '496' ],		#time : DateAndTime [ '2017-07-29T14:12:22.789911+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WBWindowsWebBrowser class',				#isMetaSide : true			},			#name : #'shellExecute:file:parameters:directory:show:',			#protocol : #'private - uffi',			#sourceCode : 'shellExecute: lpOperation file: lpFile parameters: lpParameters directory: lpDirectory show: nShowCmd\t\r\t\r\t^self ffiCall: #( \r\t\t\tFFIConstantHandle ShellExecuteA(\r     \t\t\t\t0,\r     \t\t\t\tString* lpOperation,\r         \t\t\tString* lpFile,\r     \t\t\t\tString* lpParameters,\r     \t\t\t\tString* lpDirectory,\r        \t\t\tint nShowCmd)) module: #shell32',			#stamp : 'TorstenBergmann 4/13/2016 09:45',			#package : #WebBrowser-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '496' ],		#self : OmReference [ '497' ],		#time : DateAndTime [ '2017-07-29T14:12:22.790687+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WebBrowser class',				#isMetaSide : true			},			#name : #example,			#protocol : #example,			#sourceCode : 'example\r\r\tself openOn: \'http://www.pharo.org\'',			#stamp : 'TorstenBergmann 4/13/2016 08:41',			#package : #WebBrowser-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '497' ],		#self : OmReference [ '498' ],		#time : DateAndTime [ '2017-07-29T14:12:22.791461+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WebBrowser class',				#isMetaSide : true			},			#name : #'openOn:',			#protocol : #instance-creation,			#sourceCode : 'openOn: aURLString\r\t"Open the webbrowser on the given URL"\r\t\r\t^self webbrowserClassForPlatform openOn: aURLString\t\r',			#stamp : 'TorstenBergmann 4/13/2016 08:40',			#package : #WebBrowser-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '498' ],		#self : OmReference [ '499' ],		#time : DateAndTime [ '2017-07-29T14:12:22.793508+09:00' ],		#trigger : OmReference [ '475' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WebBrowser class',				#isMetaSide : true			},			#name : #webbrowserClassForPlatform,			#protocol : #'private - accessing',			#sourceCode : 'webbrowserClassForPlatform\r\r\tSmalltalk os isUnix ifTrue: [ ^WBUnixWebBrowser ].\r\tSmalltalk os isWindows ifTrue: [ ^WBWindowsWebBrowser ].\r\t(Smalltalk os isMacOS or: [ Smalltalk os isMacOSX ])  \r\t\tifTrue: [ ^WBMacWebBrowser ].\r\tself error: \'No web browser class for platform provided\'\r',			#stamp : 'TorstenBergmann 4/13/2016 08:39',			#package : #WebBrowser-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-07-29T14:12:22.901298+09:00' ],		#prior : OmReference [ '499' ],		#self : OmReference [ '500' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Teapot-Core-AttilaMagyar.84'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '500' ],		#self : OmReference [ '501' ],		#time : DateAndTime [ '2017-07-29T14:12:23.081605+09:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'KeyNotFound',				#traitCompositionSource : '{}',				#definitionSource : 'KeyNotFound subclass: #TeaNoSuchParam\r\tinstanceVariableNames: \'param\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaNoSuchParam,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaNoSuchParam,						#isMetaSide : false					},					#name : #param,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaNoSuchParam class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaNoSuchParam class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaNoSuchParam,					#isMetaSide : false				},				#parent : @7,				#content : 'This exception indicates that the given parameter was not found in the TeaRequest.\r',				#stamp : 'AttilaMagyar 11/16/2014 17:04'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This exception indicates that the given parameter was not found in the TeaRequest.\r',		#newStamp : 'AttilaMagyar 11/16/2014 17:04'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '501' ],		#self : OmReference [ '502' ],		#time : DateAndTime [ '2017-07-29T14:12:23.082545+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Teapot-Core,		#affectedPackageName : #Teapot-Core	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '502' ],		#self : OmReference [ '503' ],		#time : DateAndTime [ '2017-07-29T14:12:23.128963+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'KeyNotFound',				#traitCompositionSource : '{}',				#definitionSource : 'KeyNotFound subclass: #TeaNoSuchParam\r\tinstanceVariableNames: \'param\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaNoSuchParam,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaNoSuchParam,						#isMetaSide : false					},					#name : #param,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaNoSuchParam class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaNoSuchParam class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaNoSuchParam,					#isMetaSide : false				},				#parent : @8,				#content : 'This exception indicates that the given parameter was not found in the TeaRequest.\r',				#stamp : 'AttilaMagyar 11/16/2014 17:04'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '503' ],		#self : OmReference [ '504' ],		#time : DateAndTime [ '2017-07-29T14:12:23.143401+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Error',				#traitCompositionSource : '{}',				#definitionSource : 'Error subclass: #TeaAbort\r\tinstanceVariableNames: \'response\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaAbort,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaAbort,						#isMetaSide : false					},					#name : #response,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaAbort class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaAbort class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaAbort,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m an exception that immediately stops a request within a filter or route.',				#stamp : 'AttilaMagyar 8/9/2014 22:55'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m an exception that immediately stops a request within a filter or route.',		#newStamp : 'AttilaMagyar 8/9/2014 22:55'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '504' ],		#self : OmReference [ '505' ],		#time : DateAndTime [ '2017-07-29T14:12:23.14538+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Error',				#traitCompositionSource : '{}',				#definitionSource : 'Error subclass: #TeaAbort\r\tinstanceVariableNames: \'response\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaAbort,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaAbort,						#isMetaSide : false					},					#name : #response,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaAbort class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaAbort class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaAbort,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m an exception that immediately stops a request within a filter or route.',				#stamp : 'AttilaMagyar 8/9/2014 22:55'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '505' ],		#self : OmReference [ '506' ],		#time : DateAndTime [ '2017-07-29T14:12:23.1488+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #IsObject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #IsObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'IsObject class\r\tinstanceVariableNames: \'\''				},				#name : #'IsObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #IsObject,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m the base class of the type constraints. I match to any object. My subclasses can restict the type of placeholders.\r\rExample:\r\rTeapot on\r\tGET: \'/user/<id:IsInteger>\' -> [:req | users findById: (req at: #id)];\r\tstart.\r\rThis route matches to the \'/users/12\' but does not match to \'/users/foobar\'. In case of matching, the the path paramter "id" will be converted to an integer.\r\rYou can extend the built in type constraints with your own constraints, by implementing the "placeholder type constraint" protocol. Then you can use the class name in the URL.',				#stamp : 'AttilaMagyar 8/13/2014 22:09'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m the base class of the type constraints. I match to any object. My subclasses can restict the type of placeholders.\r\rExample:\r\rTeapot on\r\tGET: \'/user/<id:IsInteger>\' -> [:req | users findById: (req at: #id)];\r\tstart.\r\rThis route matches to the \'/users/12\' but does not match to \'/users/foobar\'. In case of matching, the the path paramter "id" will be converted to an integer.\r\rYou can extend the built in type constraints with your own constraints, by implementing the "placeholder type constraint" protocol. Then you can use the class name in the URL.',		#newStamp : 'AttilaMagyar 8/13/2014 22:09'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '506' ],		#self : OmReference [ '507' ],		#time : DateAndTime [ '2017-07-29T14:12:23.150296+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #IsObject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #IsObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'IsObject class\r\tinstanceVariableNames: \'\''				},				#name : #'IsObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #IsObject,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m the base class of the type constraints. I match to any object. My subclasses can restict the type of placeholders.\r\rExample:\r\rTeapot on\r\tGET: \'/user/<id:IsInteger>\' -> [:req | users findById: (req at: #id)];\r\tstart.\r\rThis route matches to the \'/users/12\' but does not match to \'/users/foobar\'. In case of matching, the the path paramter "id" will be converted to an integer.\r\rYou can extend the built in type constraints with your own constraints, by implementing the "placeholder type constraint" protocol. Then you can use the class name in the URL.',				#stamp : 'AttilaMagyar 8/13/2014 22:09'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '507' ],		#self : OmReference [ '508' ],		#time : DateAndTime [ '2017-07-29T14:12:23.154083+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'IsObject',				#traitCompositionSource : '{}',				#definitionSource : 'IsObject subclass: #IsInteger\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #IsInteger,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'IsInteger class\r\tinstanceVariableNames: \'\''				},				#name : #'IsInteger class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #IsInteger,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a type constraint that matches to positive or negative integers.\r',				#stamp : 'AttilaMagyar 8/3/2014 17:27'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a type constraint that matches to positive or negative integers.\r',		#newStamp : 'AttilaMagyar 8/3/2014 17:27'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '508' ],		#self : OmReference [ '509' ],		#time : DateAndTime [ '2017-07-29T14:12:23.159733+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'IsObject',				#traitCompositionSource : '{}',				#definitionSource : 'IsObject subclass: #IsInteger\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #IsInteger,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'IsInteger class\r\tinstanceVariableNames: \'\''				},				#name : #'IsInteger class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #IsInteger,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a type constraint that matches to positive or negative integers.\r',				#stamp : 'AttilaMagyar 8/3/2014 17:27'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '509' ],		#self : OmReference [ '510' ],		#time : DateAndTime [ '2017-07-29T14:12:23.165045+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'IsObject',				#traitCompositionSource : '{}',				#definitionSource : 'IsObject subclass: #IsNumber\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #IsNumber,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'IsNumber class\r\tinstanceVariableNames: \'\''				},				#name : #'IsNumber class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #IsNumber,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a type constraint that matches to positive or negative floats or integers.\r',				#stamp : 'AttilaMagyar 8/3/2014 17:27'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a type constraint that matches to positive or negative floats or integers.\r',		#newStamp : 'AttilaMagyar 8/3/2014 17:27'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '510' ],		#self : OmReference [ '511' ],		#time : DateAndTime [ '2017-07-29T14:12:23.166476+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'IsObject',				#traitCompositionSource : '{}',				#definitionSource : 'IsObject subclass: #IsNumber\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #IsNumber,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'IsNumber class\r\tinstanceVariableNames: \'\''				},				#name : #'IsNumber class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #IsNumber,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a type constraint that matches to positive or negative floats or integers.\r',				#stamp : 'AttilaMagyar 8/3/2014 17:27'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '511' ],		#self : OmReference [ '512' ],		#time : DateAndTime [ '2017-07-29T14:12:23.169945+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Send\r\tinstanceVariableNames: \'selector receiver\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Send,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Send,						#isMetaSide : false					},					#name : #selector,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Send,						#isMetaSide : false					},					#name : #receiver,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Send class\r\tinstanceVariableNames: \'\''				},				#name : #'Send class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Send,					#isMetaSide : false				},				#parent : @8,				#content : 'I can send messages to objects on a http requests. The selector of the message can take maximum 2 arguments ( TeaRequest and TeaResponse).\r\rExample:\r\rTeapot on\r\tGET: \'/hi\' -> (Send message: #greet to: controller);\r\tstart.\r\t',				#stamp : 'AttilaMagyar 8/2/2014 19:53'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I can send messages to objects on a http requests. The selector of the message can take maximum 2 arguments ( TeaRequest and TeaResponse).\r\rExample:\r\rTeapot on\r\tGET: \'/hi\' -> (Send message: #greet to: controller);\r\tstart.\r\t',		#newStamp : 'AttilaMagyar 8/2/2014 19:53'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '512' ],		#self : OmReference [ '513' ],		#time : DateAndTime [ '2017-07-29T14:12:23.171315+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Send\r\tinstanceVariableNames: \'selector receiver\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #Send,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Send,						#isMetaSide : false					},					#name : #selector,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Send,						#isMetaSide : false					},					#name : #receiver,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Send class\r\tinstanceVariableNames: \'\''				},				#name : #'Send class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Send,					#isMetaSide : false				},				#parent : @8,				#content : 'I can send messages to objects on a http requests. The selector of the message can take maximum 2 arguments ( TeaRequest and TeaResponse).\r\rExample:\r\rTeapot on\r\tGET: \'/hi\' -> (Send message: #greet to: controller);\r\tstart.\r\t',				#stamp : 'AttilaMagyar 8/2/2014 19:53'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '513' ],		#self : OmReference [ '514' ],		#time : DateAndTime [ '2017-07-29T14:12:23.174767+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaErrorHandler\r\tinstanceVariableNames: \'action responseTransformer exceptions\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaErrorHandler,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaErrorHandler,						#isMetaSide : false					},					#name : #action,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaErrorHandler,						#isMetaSide : false					},					#name : #responseTransformer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaErrorHandler,						#isMetaSide : false					},					#name : #exceptions,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaErrorHandler class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaErrorHandler class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaErrorHandler,					#isMetaSide : false				},				#parent : @8,				#content : 'An error handler handles Exceptions signaled by the Routes or before actions.',				#stamp : 'AttilaMagyar 8/24/2014 18:02'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An error handler handles Exceptions signaled by the Routes or before actions.',		#newStamp : 'AttilaMagyar 8/24/2014 18:02'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '514' ],		#self : OmReference [ '515' ],		#time : DateAndTime [ '2017-07-29T14:12:23.17622+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaErrorHandler\r\tinstanceVariableNames: \'action responseTransformer exceptions\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaErrorHandler,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaErrorHandler,						#isMetaSide : false					},					#name : #action,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaErrorHandler,						#isMetaSide : false					},					#name : #responseTransformer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaErrorHandler,						#isMetaSide : false					},					#name : #exceptions,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaErrorHandler class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaErrorHandler class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaErrorHandler,					#isMetaSide : false				},				#parent : @8,				#content : 'An error handler handles Exceptions signaled by the Routes or before actions.',				#stamp : 'AttilaMagyar 8/24/2014 18:02'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '515' ],		#self : OmReference [ '516' ],		#time : DateAndTime [ '2017-07-29T14:12:23.181209+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaFilter\r\tinstanceVariableNames: \'action requestMatcher\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaFilter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaFilter,						#isMetaSide : false					},					#name : #action,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaFilter,						#isMetaSide : false					},					#name : #requestMatcher,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaFilter class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaFilter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaFilter,					#isMetaSide : false				},				#parent : @8,				#content : 'After and Before filters',				#stamp : 'AttilaMagyar 9/27/2014 23:54'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'After and Before filters',		#newStamp : 'AttilaMagyar 9/27/2014 23:54'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '516' ],		#self : OmReference [ '517' ],		#time : DateAndTime [ '2017-07-29T14:12:23.187826+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaFilter\r\tinstanceVariableNames: \'action requestMatcher\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaFilter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaFilter,						#isMetaSide : false					},					#name : #action,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaFilter,						#isMetaSide : false					},					#name : #requestMatcher,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaFilter class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaFilter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaFilter,					#isMetaSide : false				},				#parent : @8,				#content : 'After and Before filters',				#stamp : 'AttilaMagyar 9/27/2014 23:54'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '517' ],		#self : OmReference [ '518' ],		#time : DateAndTime [ '2017-07-29T14:12:23.194164+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaFilter',				#traitCompositionSource : '{}',				#definitionSource : 'TeaFilter subclass: #TeaAfterFilter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaAfterFilter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaAfterFilter class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaAfterFilter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaAfterFilter,					#isMetaSide : false				},				#parent : @8,				#content : 'An after filter is evaluated after each (matching) request. This filter has access to the response object generated by the matching route. The response can be modified from the filter, e.g. addition headers can be added.',				#stamp : 'AttilaMagyar 9/27/2014 23:58'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An after filter is evaluated after each (matching) request. This filter has access to the response object generated by the matching route. The response can be modified from the filter, e.g. addition headers can be added.',		#newStamp : 'AttilaMagyar 9/27/2014 23:58'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '518' ],		#self : OmReference [ '519' ],		#time : DateAndTime [ '2017-07-29T14:12:23.195644+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaFilter',				#traitCompositionSource : '{}',				#definitionSource : 'TeaFilter subclass: #TeaAfterFilter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaAfterFilter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaAfterFilter class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaAfterFilter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaAfterFilter,					#isMetaSide : false				},				#parent : @8,				#content : 'An after filter is evaluated after each (matching) request. This filter has access to the response object generated by the matching route. The response can be modified from the filter, e.g. addition headers can be added.',				#stamp : 'AttilaMagyar 9/27/2014 23:58'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '519' ],		#self : OmReference [ '520' ],		#time : DateAndTime [ '2017-07-29T14:12:23.199004+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaFilter',				#traitCompositionSource : '{}',				#definitionSource : 'TeaFilter subclass: #TeaBeforeFilter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaBeforeFilter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaBeforeFilter class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaBeforeFilter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaBeforeFilter,					#isMetaSide : false				},				#parent : @8,				#content : 'A before filter is evaluated before (matching) each request. This filter has access to the request object. For example, a before filter can be used to validate session attributes for authentication.',				#stamp : 'AttilaMagyar 9/27/2014 23:59'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A before filter is evaluated before (matching) each request. This filter has access to the request object. For example, a before filter can be used to validate session attributes for authentication.',		#newStamp : 'AttilaMagyar 9/27/2014 23:59'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '520' ],		#self : OmReference [ '521' ],		#time : DateAndTime [ '2017-07-29T14:12:23.201175+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaFilter',				#traitCompositionSource : '{}',				#definitionSource : 'TeaFilter subclass: #TeaBeforeFilter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaBeforeFilter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaBeforeFilter class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaBeforeFilter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaBeforeFilter,					#isMetaSide : false				},				#parent : @8,				#content : 'A before filter is evaluated before (matching) each request. This filter has access to the request object. For example, a before filter can be used to validate session attributes for authentication.',				#stamp : 'AttilaMagyar 9/27/2014 23:59'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '521' ],		#self : OmReference [ '522' ],		#time : DateAndTime [ '2017-07-29T14:12:23.204448+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaGlobUrlSegment\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaGlobUrlSegment,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaGlobUrlSegment class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaGlobUrlSegment class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaGlobUrlSegment,					#isMetaSide : false				},				#parent : @8,				#content : 'My subclasses form the elements of TeaGlobUrlPatterns\r',				#stamp : 'AttilaMagyar 8/14/2014 21:23'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'My subclasses form the elements of TeaGlobUrlPatterns\r',		#newStamp : 'AttilaMagyar 8/14/2014 21:23'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '522' ],		#self : OmReference [ '523' ],		#time : DateAndTime [ '2017-07-29T14:12:23.206009+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaGlobUrlSegment\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaGlobUrlSegment,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaGlobUrlSegment class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaGlobUrlSegment class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaGlobUrlSegment,					#isMetaSide : false				},				#parent : @8,				#content : 'My subclasses form the elements of TeaGlobUrlPatterns\r',				#stamp : 'AttilaMagyar 8/14/2014 21:23'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '523' ],		#self : OmReference [ '524' ],		#time : DateAndTime [ '2017-07-29T14:12:23.209824+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaGlobUrlSegment',				#traitCompositionSource : '{}',				#definitionSource : 'TeaGlobUrlSegment subclass: #TeaLiteral\r\tinstanceVariableNames: \'literal\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaLiteral,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaLiteral,						#isMetaSide : false					},					#name : #literal,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaLiteral class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaLiteral class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaLiteral,					#isMetaSide : false				},				#parent : @8,				#content : 'A literal url pattern segment that matches to a string.',				#stamp : 'AttilaMagyar 7/27/2014 12:28'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A literal url pattern segment that matches to a string.',		#newStamp : 'AttilaMagyar 7/27/2014 12:28'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '524' ],		#self : OmReference [ '525' ],		#time : DateAndTime [ '2017-07-29T14:12:23.214246+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaGlobUrlSegment',				#traitCompositionSource : '{}',				#definitionSource : 'TeaGlobUrlSegment subclass: #TeaLiteral\r\tinstanceVariableNames: \'literal\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaLiteral,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaLiteral,						#isMetaSide : false					},					#name : #literal,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaLiteral class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaLiteral class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaLiteral,					#isMetaSide : false				},				#parent : @8,				#content : 'A literal url pattern segment that matches to a string.',				#stamp : 'AttilaMagyar 7/27/2014 12:28'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '525' ],		#self : OmReference [ '526' ],		#time : DateAndTime [ '2017-07-29T14:12:23.218381+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaLiteral',				#traitCompositionSource : '{}',				#definitionSource : 'TeaLiteral subclass: #TeaLiteralStop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaLiteralStop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaLiteralStop class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaLiteralStop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaLiteralStop,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a placeholder at the last position.',				#stamp : 'AttilaMagyar 8/10/2014 23:30'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a placeholder at the last position.',		#newStamp : 'AttilaMagyar 8/10/2014 23:30'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '526' ],		#self : OmReference [ '527' ],		#time : DateAndTime [ '2017-07-29T14:12:23.220001+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaLiteral',				#traitCompositionSource : '{}',				#definitionSource : 'TeaLiteral subclass: #TeaLiteralStop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaLiteralStop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaLiteralStop class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaLiteralStop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaLiteralStop,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a placeholder at the last position.',				#stamp : 'AttilaMagyar 8/10/2014 23:30'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '527' ],		#self : OmReference [ '528' ],		#time : DateAndTime [ '2017-07-29T14:12:23.223643+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaGlobUrlSegment',				#traitCompositionSource : '{}',				#definitionSource : 'TeaGlobUrlSegment subclass: #TeaPlaceholder\r\tinstanceVariableNames: \'placeholderName typeConstraint\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaPlaceholder,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaPlaceholder,						#isMetaSide : false					},					#name : #placeholderName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaPlaceholder,						#isMetaSide : false					},					#name : #typeConstraint,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaPlaceholder class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaPlaceholder class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaPlaceholder,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a placeholder with a key. My content is substituted with a value.',				#stamp : 'AttilaMagyar 7/27/2014 14:33'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a placeholder with a key. My content is substituted with a value.',		#newStamp : 'AttilaMagyar 7/27/2014 14:33'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '528' ],		#self : OmReference [ '529' ],		#time : DateAndTime [ '2017-07-29T14:12:23.225104+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaGlobUrlSegment',				#traitCompositionSource : '{}',				#definitionSource : 'TeaGlobUrlSegment subclass: #TeaPlaceholder\r\tinstanceVariableNames: \'placeholderName typeConstraint\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaPlaceholder,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaPlaceholder,						#isMetaSide : false					},					#name : #placeholderName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaPlaceholder,						#isMetaSide : false					},					#name : #typeConstraint,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaPlaceholder class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaPlaceholder class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaPlaceholder,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a placeholder with a key. My content is substituted with a value.',				#stamp : 'AttilaMagyar 7/27/2014 14:33'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '529' ],		#self : OmReference [ '530' ],		#time : DateAndTime [ '2017-07-29T14:12:23.228528+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaPlaceholder',				#traitCompositionSource : '{}',				#definitionSource : 'TeaPlaceholder subclass: #TeaPlaceholderStop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaPlaceholderStop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaPlaceholderStop class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaPlaceholderStop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaPlaceholderStop,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a placeholder at the last position.',				#stamp : 'AttilaMagyar 7/27/2014 14:34'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a placeholder at the last position.',		#newStamp : 'AttilaMagyar 7/27/2014 14:34'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '530' ],		#self : OmReference [ '531' ],		#time : DateAndTime [ '2017-07-29T14:12:23.229887+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaPlaceholder',				#traitCompositionSource : '{}',				#definitionSource : 'TeaPlaceholder subclass: #TeaPlaceholderStop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaPlaceholderStop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaPlaceholderStop class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaPlaceholderStop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaPlaceholderStop,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a placeholder at the last position.',				#stamp : 'AttilaMagyar 7/27/2014 14:34'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '531' ],		#self : OmReference [ '532' ],		#time : DateAndTime [ '2017-07-29T14:12:23.233753+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaGlobUrlSegment',				#traitCompositionSource : '{}',				#definitionSource : 'TeaGlobUrlSegment subclass: #TeaWildcard\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaWildcard,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaWildcard class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaWildcard class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaWildcard,					#isMetaSide : false				},				#parent : @8,				#content : 'A wildcard url pattern segment that matches to anything.',				#stamp : 'AttilaMagyar 7/27/2014 12:29'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A wildcard url pattern segment that matches to anything.',		#newStamp : 'AttilaMagyar 7/27/2014 12:29'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '532' ],		#self : OmReference [ '533' ],		#time : DateAndTime [ '2017-07-29T14:12:23.235671+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaGlobUrlSegment',				#traitCompositionSource : '{}',				#definitionSource : 'TeaGlobUrlSegment subclass: #TeaWildcard\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaWildcard,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaWildcard class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaWildcard class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaWildcard,					#isMetaSide : false				},				#parent : @8,				#content : 'A wildcard url pattern segment that matches to anything.',				#stamp : 'AttilaMagyar 7/27/2014 12:29'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '533' ],		#self : OmReference [ '534' ],		#time : DateAndTime [ '2017-07-29T14:12:23.239191+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaWildcard',				#traitCompositionSource : '{}',				#definitionSource : 'TeaWildcard subclass: #TeaWildcardStop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaWildcardStop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaWildcardStop class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaWildcardStop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaWildcardStop,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a Wildcard at the last position.',				#stamp : 'AttilaMagyar 7/27/2014 14:34'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a Wildcard at the last position.',		#newStamp : 'AttilaMagyar 7/27/2014 14:34'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '534' ],		#self : OmReference [ '535' ],		#time : DateAndTime [ '2017-07-29T14:12:23.240605+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaWildcard',				#traitCompositionSource : '{}',				#definitionSource : 'TeaWildcard subclass: #TeaWildcardStop\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaWildcardStop,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaWildcardStop class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaWildcardStop class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaWildcardStop,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a Wildcard at the last position.',				#stamp : 'AttilaMagyar 7/27/2014 14:34'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '535' ],		#self : OmReference [ '536' ],		#time : DateAndTime [ '2017-07-29T14:12:23.243921+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaMethodMatcher\r\tinstanceVariableNames: \'matcherBlock name\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaMethodMatcher,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaMethodMatcher,						#isMetaSide : false					},					#name : #matcherBlock,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaMethodMatcher,						#isMetaSide : false					},					#name : #name,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaMethodMatcher class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaMethodMatcher class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaMethodMatcher,					#isMetaSide : false				},				#parent : @8,				#content : 'I can be matched against an HTTP method. I will return either true or false.',				#stamp : 'AttilaMagyar 8/12/2014 21:11'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I can be matched against an HTTP method. I will return either true or false.',		#newStamp : 'AttilaMagyar 8/12/2014 21:11'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '536' ],		#self : OmReference [ '537' ],		#time : DateAndTime [ '2017-07-29T14:12:23.245308+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaMethodMatcher\r\tinstanceVariableNames: \'matcherBlock name\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaMethodMatcher,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaMethodMatcher,						#isMetaSide : false					},					#name : #matcherBlock,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaMethodMatcher,						#isMetaSide : false					},					#name : #name,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaMethodMatcher class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaMethodMatcher class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaMethodMatcher,					#isMetaSide : false				},				#parent : @8,				#content : 'I can be matched against an HTTP method. I will return either true or false.',				#stamp : 'AttilaMagyar 8/12/2014 21:11'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '537' ],		#self : OmReference [ '538' ],		#time : DateAndTime [ '2017-07-29T14:12:23.248446+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaOutput\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaOutput,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaOutput class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaOutput class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaOutput,					#isMetaSide : false				},				#parent : @8,				#content : 'I have various response transformer methods on my class side, that can be used as follows:\r\rTeapot on\r\tGET: \'/books\' -> books; output: #json;\r\tstart.\r\t\rSome of the transformers require optional dependencies, like Neo-JSON, STON, or Mustache.\r',				#stamp : 'AttilaMagyar 8/10/2014 23:18'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I have various response transformer methods on my class side, that can be used as follows:\r\rTeapot on\r\tGET: \'/books\' -> books; output: #json;\r\tstart.\r\t\rSome of the transformers require optional dependencies, like Neo-JSON, STON, or Mustache.\r',		#newStamp : 'AttilaMagyar 8/10/2014 23:18'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '538' ],		#self : OmReference [ '539' ],		#time : DateAndTime [ '2017-07-29T14:12:23.249779+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaOutput\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaOutput,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaOutput class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaOutput class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaOutput,					#isMetaSide : false				},				#parent : @8,				#content : 'I have various response transformer methods on my class side, that can be used as follows:\r\rTeapot on\r\tGET: \'/books\' -> books; output: #json;\r\tstart.\r\t\rSome of the transformers require optional dependencies, like Neo-JSON, STON, or Mustache.\r',				#stamp : 'AttilaMagyar 8/10/2014 23:18'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '539' ],		#self : OmReference [ '540' ],		#time : DateAndTime [ '2017-07-29T14:12:23.253009+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaPadding\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaPadding,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaPadding class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaPadding class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaPadding,					#isMetaSide : false				},				#parent : @8,				#content : 'An url is padded by me, if its size is to short. I don\'t match to any literal URL, so it\'s like I\'m not there.',				#stamp : 'AttilaMagyar 7/27/2014 12:35'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An url is padded by me, if its size is to short. I don\'t match to any literal URL, so it\'s like I\'m not there.',		#newStamp : 'AttilaMagyar 7/27/2014 12:35'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '540' ],		#self : OmReference [ '541' ],		#time : DateAndTime [ '2017-07-29T14:12:23.256042+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaPadding\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaPadding,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaPadding class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaPadding class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaPadding,					#isMetaSide : false				},				#parent : @8,				#content : 'An url is padded by me, if its size is to short. I don\'t match to any literal URL, so it\'s like I\'m not there.',				#stamp : 'AttilaMagyar 7/27/2014 12:35'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '541' ],		#self : OmReference [ '542' ],		#time : DateAndTime [ '2017-07-29T14:12:23.261803+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaRequest\r\tinstanceVariableNames: \'znRequest pathParams\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaRequest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequest,						#isMetaSide : false					},					#name : #znRequest,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequest,						#isMetaSide : false					},					#name : #pathParams,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaRequest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaRequest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaRequest,					#isMetaSide : false				},				#parent : @8,				#content : 'I extend the ZnRequest with addition methods for convenience.',				#stamp : 'AttilaMagyar 7/30/2014 22:32'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I extend the ZnRequest with addition methods for convenience.',		#newStamp : 'AttilaMagyar 7/30/2014 22:32'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '542' ],		#self : OmReference [ '543' ],		#time : DateAndTime [ '2017-07-29T14:12:23.263243+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaRequest\r\tinstanceVariableNames: \'znRequest pathParams\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaRequest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequest,						#isMetaSide : false					},					#name : #znRequest,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequest,						#isMetaSide : false					},					#name : #pathParams,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaRequest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaRequest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaRequest,					#isMetaSide : false				},				#parent : @8,				#content : 'I extend the ZnRequest with addition methods for convenience.',				#stamp : 'AttilaMagyar 7/30/2014 22:32'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '543' ],		#self : OmReference [ '544' ],		#time : DateAndTime [ '2017-07-29T14:12:23.267233+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaRequestMatcher\r\tinstanceVariableNames: \'urlPattern methodMatcher whenClause\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaRequestMatcher,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequestMatcher,						#isMetaSide : false					},					#name : #urlPattern,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequestMatcher,						#isMetaSide : false					},					#name : #methodMatcher,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequestMatcher,						#isMetaSide : false					},					#name : #whenClause,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaRequestMatcher class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaRequestMatcher class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaRequestMatcher,					#isMetaSide : false				},				#parent : @8,				#content : 'I can be matched against a ZnRequest. I check the http method and url of the request. ',				#stamp : 'AttilaMagyar 9/27/2014 23:54'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I can be matched against a ZnRequest. I check the http method and url of the request. ',		#newStamp : 'AttilaMagyar 9/27/2014 23:54'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '544' ],		#self : OmReference [ '545' ],		#time : DateAndTime [ '2017-07-29T14:12:23.268557+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaRequestMatcher\r\tinstanceVariableNames: \'urlPattern methodMatcher whenClause\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaRequestMatcher,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequestMatcher,						#isMetaSide : false					},					#name : #urlPattern,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequestMatcher,						#isMetaSide : false					},					#name : #methodMatcher,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequestMatcher,						#isMetaSide : false					},					#name : #whenClause,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaRequestMatcher class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaRequestMatcher class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaRequestMatcher,					#isMetaSide : false				},				#parent : @8,				#content : 'I can be matched against a ZnRequest. I check the http method and url of the request. ',				#stamp : 'AttilaMagyar 9/27/2014 23:54'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '545' ],		#self : OmReference [ '546' ],		#time : DateAndTime [ '2017-07-29T14:12:23.271908+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaResponse\r\tinstanceVariableNames: \'code body headers charSet\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaResponse,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaResponse,						#isMetaSide : false					},					#name : #code,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaResponse,						#isMetaSide : false					},					#name : #body,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaResponse,						#isMetaSide : false					},					#name : #headers,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaResponse,						#isMetaSide : false					},					#name : #charSet,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaResponse class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaResponse class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaResponse,					#isMetaSide : false				},				#parent : @8,				#content : 'A TeaResponse represents an HTTP response returned by a Route. The ZnResponse is generated from the TeaResponse by the given response transformer.',				#stamp : 'AttilaMagyar 9/28/2014 20:26'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A TeaResponse represents an HTTP response returned by a Route. The ZnResponse is generated from the TeaResponse by the given response transformer.',		#newStamp : 'AttilaMagyar 9/28/2014 20:26'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '546' ],		#self : OmReference [ '547' ],		#time : DateAndTime [ '2017-07-29T14:12:23.273333+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaResponse\r\tinstanceVariableNames: \'code body headers charSet\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaResponse,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaResponse,						#isMetaSide : false					},					#name : #code,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaResponse,						#isMetaSide : false					},					#name : #body,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaResponse,						#isMetaSide : false					},					#name : #headers,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaResponse,						#isMetaSide : false					},					#name : #charSet,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaResponse class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaResponse class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaResponse,					#isMetaSide : false				},				#parent : @8,				#content : 'A TeaResponse represents an HTTP response returned by a Route. The ZnResponse is generated from the TeaResponse by the given response transformer.',				#stamp : 'AttilaMagyar 9/28/2014 20:26'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '547' ],		#self : OmReference [ '548' ],		#time : DateAndTime [ '2017-07-29T14:12:23.277603+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaRoute\r\tinstanceVariableNames: \'responseTransformer action requestMatcher port\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaRoute,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRoute,						#isMetaSide : false					},					#name : #responseTransformer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRoute,						#isMetaSide : false					},					#name : #action,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRoute,						#isMetaSide : false					},					#name : #requestMatcher,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRoute,						#isMetaSide : false					},					#name : #port,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaRoute class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaRoute class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaRoute,					#isMetaSide : false				},				#parent : @8,				#content : 'A route handles http requests if it matches to the route. I have four major parts.\r\r- A handler that can be a block, a value or a message send.\r- An url pattern that can be matched against actual urls.\r- An http method that can be matched against the actual http method.\r- A response transformer for creating ZnResponse from the object returned by the handler.',				#stamp : 'AttilaMagyar 8/10/2014 23:24'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A route handles http requests if it matches to the route. I have four major parts.\r\r- A handler that can be a block, a value or a message send.\r- An url pattern that can be matched against actual urls.\r- An http method that can be matched against the actual http method.\r- A response transformer for creating ZnResponse from the object returned by the handler.',		#newStamp : 'AttilaMagyar 8/10/2014 23:24'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '548' ],		#self : OmReference [ '549' ],		#time : DateAndTime [ '2017-07-29T14:12:23.279125+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaRoute\r\tinstanceVariableNames: \'responseTransformer action requestMatcher port\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaRoute,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRoute,						#isMetaSide : false					},					#name : #responseTransformer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRoute,						#isMetaSide : false					},					#name : #action,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRoute,						#isMetaSide : false					},					#name : #requestMatcher,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRoute,						#isMetaSide : false					},					#name : #port,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaRoute class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaRoute class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaRoute,					#isMetaSide : false				},				#parent : @8,				#content : 'A route handles http requests if it matches to the route. I have four major parts.\r\r- A handler that can be a block, a value or a message send.\r- An url pattern that can be matched against actual urls.\r- An http method that can be matched against the actual http method.\r- A response transformer for creating ZnResponse from the object returned by the handler.',				#stamp : 'AttilaMagyar 8/10/2014 23:24'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '549' ],		#self : OmReference [ '550' ],		#time : DateAndTime [ '2017-07-29T14:12:23.282875+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaRouter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaRouter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaRouter class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaRouter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaRouter,					#isMetaSide : false				},				#parent : @8,				#content : 'A zn delegate baseclass',				#stamp : 'AttilaMagyar 8/2/2014 23:09'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A zn delegate baseclass',		#newStamp : 'AttilaMagyar 8/2/2014 23:09'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '550' ],		#self : OmReference [ '551' ],		#time : DateAndTime [ '2017-07-29T14:12:23.284314+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaRouter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaRouter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaRouter class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaRouter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaRouter,					#isMetaSide : false				},				#parent : @8,				#content : 'A zn delegate baseclass',				#stamp : 'AttilaMagyar 8/2/2014 23:09'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '551' ],		#self : OmReference [ '552' ],		#time : DateAndTime [ '2017-07-29T14:12:23.287793+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaRouter',				#traitCompositionSource : '{}',				#definitionSource : 'TeaRouter subclass: #TeaCompositeRouter\r\tinstanceVariableNames: \'routers errorhandlers beforeFilters afterFilters\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaCompositeRouter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaCompositeRouter,						#isMetaSide : false					},					#name : #routers,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaCompositeRouter,						#isMetaSide : false					},					#name : #errorhandlers,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaCompositeRouter,						#isMetaSide : false					},					#name : #beforeFilters,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaCompositeRouter,						#isMetaSide : false					},					#name : #afterFilters,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaCompositeRouter class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaCompositeRouter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaCompositeRouter,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a composite zn delegate, built from other zn delegates. I forward the request to the first delegate that returns other than 404 as response. Errors are handled with the help of the registered error handlers.',				#stamp : 'AttilaMagyar 8/10/2014 23:27'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a composite zn delegate, built from other zn delegates. I forward the request to the first delegate that returns other than 404 as response. Errors are handled with the help of the registered error handlers.',		#newStamp : 'AttilaMagyar 8/10/2014 23:27'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '552' ],		#self : OmReference [ '553' ],		#time : DateAndTime [ '2017-07-29T14:12:23.289138+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaRouter',				#traitCompositionSource : '{}',				#definitionSource : 'TeaRouter subclass: #TeaCompositeRouter\r\tinstanceVariableNames: \'routers errorhandlers beforeFilters afterFilters\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaCompositeRouter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaCompositeRouter,						#isMetaSide : false					},					#name : #routers,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaCompositeRouter,						#isMetaSide : false					},					#name : #errorhandlers,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaCompositeRouter,						#isMetaSide : false					},					#name : #beforeFilters,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaCompositeRouter,						#isMetaSide : false					},					#name : #afterFilters,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaCompositeRouter class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaCompositeRouter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaCompositeRouter,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a composite zn delegate, built from other zn delegates. I forward the request to the first delegate that returns other than 404 as response. Errors are handled with the help of the registered error handlers.',				#stamp : 'AttilaMagyar 8/10/2014 23:27'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '553' ],		#self : OmReference [ '554' ],		#time : DateAndTime [ '2017-07-29T14:12:23.292537+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaRouter',				#traitCompositionSource : '{}',				#definitionSource : 'TeaRouter subclass: #TeaDynamicRouter\r\tinstanceVariableNames: \'routes\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaDynamicRouter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaDynamicRouter,						#isMetaSide : false					},					#name : #routes,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaDynamicRouter class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaDynamicRouter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaDynamicRouter,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a ZnDelegate. I serve dynamically generated contents. The request is handled by the first route object, that returns other than 404 as response.',				#stamp : 'AttilaMagyar 8/10/2014 23:26'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a ZnDelegate. I serve dynamically generated contents. The request is handled by the first route object, that returns other than 404 as response.',		#newStamp : 'AttilaMagyar 8/10/2014 23:26'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '554' ],		#self : OmReference [ '555' ],		#time : DateAndTime [ '2017-07-29T14:12:23.294467+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaRouter',				#traitCompositionSource : '{}',				#definitionSource : 'TeaRouter subclass: #TeaDynamicRouter\r\tinstanceVariableNames: \'routes\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaDynamicRouter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaDynamicRouter,						#isMetaSide : false					},					#name : #routes,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaDynamicRouter class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaDynamicRouter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaDynamicRouter,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a ZnDelegate. I serve dynamically generated contents. The request is handled by the first route object, that returns other than 404 as response.',				#stamp : 'AttilaMagyar 8/10/2014 23:26'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '555' ],		#self : OmReference [ '556' ],		#time : DateAndTime [ '2017-07-29T14:12:23.298512+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaRouter',				#traitCompositionSource : '{}',				#definitionSource : 'TeaRouter subclass: #TeaStaticRouter\r\tinstanceVariableNames: \'delegate\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaStaticRouter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaStaticRouter,						#isMetaSide : false					},					#name : #delegate,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaStaticRouter class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaStaticRouter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaStaticRouter,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a ZnDelegate based on ZnStaticFileServerDelegate. I serve static content from a file system directory.',				#stamp : 'AttilaMagyar 8/2/2014 23:12'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a ZnDelegate based on ZnStaticFileServerDelegate. I serve static content from a file system directory.',		#newStamp : 'AttilaMagyar 8/2/2014 23:12'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '556' ],		#self : OmReference [ '557' ],		#time : DateAndTime [ '2017-07-29T14:12:23.299882+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaRouter',				#traitCompositionSource : '{}',				#definitionSource : 'TeaRouter subclass: #TeaStaticRouter\r\tinstanceVariableNames: \'delegate\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaStaticRouter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaStaticRouter,						#isMetaSide : false					},					#name : #delegate,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaStaticRouter class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaStaticRouter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaStaticRouter,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a ZnDelegate based on ZnStaticFileServerDelegate. I serve static content from a file system directory.',				#stamp : 'AttilaMagyar 8/2/2014 23:12'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '557' ],		#self : OmReference [ '558' ],		#time : DateAndTime [ '2017-07-29T14:12:23.303324+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaUrlPattern\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaUrlPattern,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaUrlPattern class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaUrlPattern class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaUrlPattern,					#isMetaSide : false				},				#parent : @8,				#content : 'An URL pattern can be matched agains actual urls. The pattern may collect named parameters from the URL in case of match.',				#stamp : 'AttilaMagyar 8/14/2014 21:26'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An URL pattern can be matched agains actual urls. The pattern may collect named parameters from the URL in case of match.',		#newStamp : 'AttilaMagyar 8/14/2014 21:26'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '558' ],		#self : OmReference [ '559' ],		#time : DateAndTime [ '2017-07-29T14:12:23.304687+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaUrlPattern\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaUrlPattern,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaUrlPattern class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaUrlPattern class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaUrlPattern,					#isMetaSide : false				},				#parent : @8,				#content : 'An URL pattern can be matched agains actual urls. The pattern may collect named parameters from the URL in case of match.',				#stamp : 'AttilaMagyar 8/14/2014 21:26'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '559' ],		#self : OmReference [ '560' ],		#time : DateAndTime [ '2017-07-29T14:12:23.307971+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaUrlPattern',				#traitCompositionSource : '{}',				#definitionSource : 'TeaUrlPattern subclass: #TeaGlobUrlPattern\r\tinstanceVariableNames: \'segments\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaGlobUrlPattern,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaGlobUrlPattern,						#isMetaSide : false					},					#name : #segments,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaGlobUrlPattern class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaGlobUrlPattern class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaGlobUrlPattern,					#isMetaSide : false				},				#parent : @8,				#content : 'An UrlPattern is made from segments. I can be matched against an actual URL. \'*\' and <named-parameters> can be used inside the pattern.\r\rI can parse the pattern from a string by saying:\r\r\tself parseString: \'/foo/*/<id>/bar\'\r\rWhich will create a pattern that matches to an URL like this: \r\r\t/foo/xyz/12/bar',				#stamp : 'AttilaMagyar 8/14/2014 21:26'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An UrlPattern is made from segments. I can be matched against an actual URL. \'*\' and <named-parameters> can be used inside the pattern.\r\rI can parse the pattern from a string by saying:\r\r\tself parseString: \'/foo/*/<id>/bar\'\r\rWhich will create a pattern that matches to an URL like this: \r\r\t/foo/xyz/12/bar',		#newStamp : 'AttilaMagyar 8/14/2014 21:26'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '560' ],		#self : OmReference [ '561' ],		#time : DateAndTime [ '2017-07-29T14:12:23.30927+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaUrlPattern',				#traitCompositionSource : '{}',				#definitionSource : 'TeaUrlPattern subclass: #TeaGlobUrlPattern\r\tinstanceVariableNames: \'segments\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaGlobUrlPattern,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaGlobUrlPattern,						#isMetaSide : false					},					#name : #segments,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaGlobUrlPattern class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaGlobUrlPattern class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaGlobUrlPattern,					#isMetaSide : false				},				#parent : @8,				#content : 'An UrlPattern is made from segments. I can be matched against an actual URL. \'*\' and <named-parameters> can be used inside the pattern.\r\rI can parse the pattern from a string by saying:\r\r\tself parseString: \'/foo/*/<id>/bar\'\r\rWhich will create a pattern that matches to an URL like this: \r\r\t/foo/xyz/12/bar',				#stamp : 'AttilaMagyar 8/14/2014 21:26'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '561' ],		#self : OmReference [ '562' ],		#time : DateAndTime [ '2017-07-29T14:12:23.312436+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaUrlPattern',				#traitCompositionSource : '{}',				#definitionSource : 'TeaUrlPattern subclass: #TeaRxUrlPattern\r\tinstanceVariableNames: \'regexp lock\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaRxUrlPattern,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRxUrlPattern,						#isMetaSide : false					},					#name : #regexp,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRxUrlPattern,						#isMetaSide : false					},					#name : #lock,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaRxUrlPattern class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaRxUrlPattern class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaRxUrlPattern,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m an URL pattern that uses a regular expression internally. I collect subexpressions in case of matching.',				#stamp : 'AttilaMagyar 8/14/2014 21:27'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m an URL pattern that uses a regular expression internally. I collect subexpressions in case of matching.',		#newStamp : 'AttilaMagyar 8/14/2014 21:27'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '562' ],		#self : OmReference [ '563' ],		#time : DateAndTime [ '2017-07-29T14:12:23.313742+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaUrlPattern',				#traitCompositionSource : '{}',				#definitionSource : 'TeaUrlPattern subclass: #TeaRxUrlPattern\r\tinstanceVariableNames: \'regexp lock\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaRxUrlPattern,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRxUrlPattern,						#isMetaSide : false					},					#name : #regexp,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRxUrlPattern,						#isMetaSide : false					},					#name : #lock,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaRxUrlPattern class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaRxUrlPattern class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaRxUrlPattern,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m an URL pattern that uses a regular expression internally. I collect subexpressions in case of matching.',				#stamp : 'AttilaMagyar 8/14/2014 21:27'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '563' ],		#self : OmReference [ '564' ],		#time : DateAndTime [ '2017-07-29T14:12:23.317729+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaUrlPattern',				#traitCompositionSource : '{}',				#definitionSource : 'TeaUrlPattern subclass: #TeaUrlPatternSet\r\tinstanceVariableNames: \'patterns\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaUrlPatternSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaUrlPatternSet,						#isMetaSide : false					},					#name : #patterns,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaUrlPatternSet class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaUrlPatternSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaUrlPatternSet,					#isMetaSide : false				},				#parent : @8,				#content : 'I match to the given url if any of my elements match.\r\rE.g.\r\rTeapot on\r\tGET: {\'/a\'. \'/b\'} -> \'ab\';\r\tstart.\t\t\r\rBoth ZnEasy get: \'/a\' and ZnEasy get: \'/b\' returns \'ab\'',				#stamp : 'AttilaMagyar 6/16/2015 18:31'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I match to the given url if any of my elements match.\r\rE.g.\r\rTeapot on\r\tGET: {\'/a\'. \'/b\'} -> \'ab\';\r\tstart.\t\t\r\rBoth ZnEasy get: \'/a\' and ZnEasy get: \'/b\' returns \'ab\'',		#newStamp : 'AttilaMagyar 6/16/2015 18:31'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '564' ],		#self : OmReference [ '565' ],		#time : DateAndTime [ '2017-07-29T14:12:23.31904+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TeaUrlPattern',				#traitCompositionSource : '{}',				#definitionSource : 'TeaUrlPattern subclass: #TeaUrlPatternSet\r\tinstanceVariableNames: \'patterns\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #TeaUrlPatternSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaUrlPatternSet,						#isMetaSide : false					},					#name : #patterns,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaUrlPatternSet class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaUrlPatternSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaUrlPatternSet,					#isMetaSide : false				},				#parent : @8,				#content : 'I match to the given url if any of my elements match.\r\rE.g.\r\rTeapot on\r\tGET: {\'/a\'. \'/b\'} -> \'ab\';\r\tstart.\t\t\r\rBoth ZnEasy get: \'/a\' and ZnEasy get: \'/b\' returns \'ab\'',				#stamp : 'AttilaMagyar 6/16/2015 18:31'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '565' ],		#self : OmReference [ '566' ],		#time : DateAndTime [ '2017-07-29T14:12:23.323114+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Teapot\r\tinstanceVariableNames: \'server dynamicRouter staticRouter compositeRouter defaultOutput current\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Teapot,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teapot,						#isMetaSide : false					},					#name : #server,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teapot,						#isMetaSide : false					},					#name : #dynamicRouter,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teapot,						#isMetaSide : false					},					#name : #staticRouter,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teapot,						#isMetaSide : false					},					#name : #compositeRouter,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teapot,						#isMetaSide : false					},					#name : #defaultOutput,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teapot,						#isMetaSide : false					},					#name : #current,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Teapot class\r\tinstanceVariableNames: \'\''				},				#name : #'Teapot class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Teapot,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m the Teapot server on top of ZnServer. I can handle URL routing as follows:\r\rTeapot on\r      GET: \'/hi\' -> \'Hello World!\';\r      GET: \'/a/*/b\' -> (Send message: #ab: to: controller);\r      GET: \'/users\' -> [ users ]; output: #json\t\r      GET: \'/user/<id>\' -> [ :req | (req at: #id) ]; output: #ston;\r      PUT: \'/books/<id>\' -> [ :req | | book |\r\t  book := Book author: (req at: #author) title: (req at: #title).\r        books at: (req at: #id) put: book ]; \r\t  output: #ston;\r      start.\r\rFor more configuration option see the Teapot class>>configure method.',				#stamp : 'AttilaMagyar 6/8/2016 22:12'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m the Teapot server on top of ZnServer. I can handle URL routing as follows:\r\rTeapot on\r      GET: \'/hi\' -> \'Hello World!\';\r      GET: \'/a/*/b\' -> (Send message: #ab: to: controller);\r      GET: \'/users\' -> [ users ]; output: #json\t\r      GET: \'/user/<id>\' -> [ :req | (req at: #id) ]; output: #ston;\r      PUT: \'/books/<id>\' -> [ :req | | book |\r\t  book := Book author: (req at: #author) title: (req at: #title).\r        books at: (req at: #id) put: book ]; \r\t  output: #ston;\r      start.\r\rFor more configuration option see the Teapot class>>configure method.',		#newStamp : 'AttilaMagyar 6/8/2016 22:12'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '566' ],		#self : OmReference [ '567' ],		#time : DateAndTime [ '2017-07-29T14:12:23.324562+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Teapot\r\tinstanceVariableNames: \'server dynamicRouter staticRouter compositeRouter defaultOutput current\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Core\''			},			#name : #Teapot,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teapot,						#isMetaSide : false					},					#name : #server,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teapot,						#isMetaSide : false					},					#name : #dynamicRouter,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teapot,						#isMetaSide : false					},					#name : #staticRouter,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teapot,						#isMetaSide : false					},					#name : #compositeRouter,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teapot,						#isMetaSide : false					},					#name : #defaultOutput,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teapot,						#isMetaSide : false					},					#name : #current,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Teapot class\r\tinstanceVariableNames: \'\''				},				#name : #'Teapot class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Teapot,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m the Teapot server on top of ZnServer. I can handle URL routing as follows:\r\rTeapot on\r      GET: \'/hi\' -> \'Hello World!\';\r      GET: \'/a/*/b\' -> (Send message: #ab: to: controller);\r      GET: \'/users\' -> [ users ]; output: #json\t\r      GET: \'/user/<id>\' -> [ :req | (req at: #id) ]; output: #ston;\r      PUT: \'/books/<id>\' -> [ :req | | book |\r\t  book := Book author: (req at: #author) title: (req at: #title).\r        books at: (req at: #id) put: book ]; \r\t  output: #ston;\r      start.\r\rFor more configuration option see the Teapot class>>configure method.',				#stamp : 'AttilaMagyar 6/8/2016 22:12'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Core,			#package : #Teapot-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '567' ],		#self : OmReference [ '568' ],		#time : DateAndTime [ '2017-07-29T14:12:23.461985+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ZnResponse,				#isMetaSide : false			},			#name : #'teaTransform:request:',			#protocol : #'*Teapot-Core',			#sourceCode : 'teaTransform: aResponseTransformer request: aTeaRequest\r\t^ self',			#stamp : 'AttilaMagyar 9/28/2014 18:48',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '568' ],		#self : OmReference [ '569' ],		#time : DateAndTime [ '2017-07-29T14:12:23.463405+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RxMatcher,				#isMetaSide : false			},			#name : #asTeaUrlPattern,			#protocol : #'*Teapot-Core',			#sourceCode : 'asTeaUrlPattern\r\t^ TeaRxUrlPattern fromRxMatcher: self',			#stamp : 'AttilaMagyar 8/14/2014 22:32',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '569' ],		#self : OmReference [ '570' ],		#time : DateAndTime [ '2017-07-29T14:12:23.464897+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #asTeaUrlPattern,			#protocol : #'*Teapot-Core',			#sourceCode : 'asTeaUrlPattern\r\t^ TeaGlobUrlPattern parseString: self',			#stamp : 'AttilaMagyar 8/14/2014 22:33',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '570' ],		#self : OmReference [ '571' ],		#time : DateAndTime [ '2017-07-29T14:12:23.465989+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaNoSuchParam class',				#isMetaSide : true			},			#name : #'signalWithParam:',			#protocol : #signaling,			#sourceCode : 'signalWithParam: aSymbol\r\t(self new setParam: aSymbol) signal: \'Param \', aSymbol printString, \' not found\'',			#stamp : 'AttilaNamed 2/28/2015 22:54',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '571' ],		#self : OmReference [ '572' ],		#time : DateAndTime [ '2017-07-29T14:12:23.466817+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaNoSuchParam,				#isMetaSide : false			},			#name : #param,			#protocol : #accessing,			#sourceCode : 'param\r\t^ param',			#stamp : 'AttilaNamed 2/28/2015 22:43',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '572' ],		#self : OmReference [ '573' ],		#time : DateAndTime [ '2017-07-29T14:12:23.467611+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaNoSuchParam,				#isMetaSide : false			},			#name : #'setParam:',			#protocol : #initialization,			#sourceCode : 'setParam: aSymbol\r\tparam := aSymbol.\r\t^ self',			#stamp : 'AttilaNamed 2/28/2015 22:42',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '573' ],		#self : OmReference [ '574' ],		#time : DateAndTime [ '2017-07-29T14:12:23.468467+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaAbort class',				#isMetaSide : true			},			#name : #'response:',			#protocol : #'instance creation',			#sourceCode : 'response: aZnResponse\r\t^ self new setResponse: aZnResponse',			#stamp : 'AttilaMagyar 8/17/2014 19:14',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '574' ],		#self : OmReference [ '575' ],		#time : DateAndTime [ '2017-07-29T14:12:23.469317+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaAbort,				#isMetaSide : false			},			#name : #response,			#protocol : #converting,			#sourceCode : 'response\r\t^ response',			#stamp : 'AttilaMagyar 10/13/2014 20:30',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '575' ],		#self : OmReference [ '576' ],		#time : DateAndTime [ '2017-07-29T14:12:23.470067+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaAbort,				#isMetaSide : false			},			#name : #'setResponse:',			#protocol : #initialization,			#sourceCode : 'setResponse: aZnResponse\r\tresponse := aZnResponse.\r\t^ self',			#stamp : 'AttilaMagyar 8/17/2014 19:14',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '576' ],		#self : OmReference [ '577' ],		#time : DateAndTime [ '2017-07-29T14:12:23.471774+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockClosure,				#isMetaSide : false			},			#name : #'teaEvalActionOnException:request:',			#protocol : #'*Teapot-Core',			#sourceCode : 'teaEvalActionOnException: anException request: aTeaRequest\r\t^ self cull: anException cull: aTeaRequest',			#stamp : 'AttilaMagyar 9/28/2014 19:41',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '577' ],		#self : OmReference [ '578' ],		#time : DateAndTime [ '2017-07-29T14:12:23.472752+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockClosure,				#isMetaSide : false			},			#name : #'teaEvalActionOnRequest:',			#protocol : #'*Teapot-Core',			#sourceCode : 'teaEvalActionOnRequest: aTeaRequest\r\t^ self cull: aTeaRequest',			#stamp : 'AttilaMagyar 9/28/2014 19:41',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '578' ],		#self : OmReference [ '579' ],		#time : DateAndTime [ '2017-07-29T14:12:23.473621+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockClosure,				#isMetaSide : false			},			#name : #'teaEvalActionOnRequest:response:',			#protocol : #'*Teapot-Core',			#sourceCode : 'teaEvalActionOnRequest: aTeaRequest response: aZnResponse\r\t^ self cull: aTeaRequest cull: aZnResponse',			#stamp : 'AttilaMagyar 10/8/2014 19:48',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '579' ],		#self : OmReference [ '580' ],		#time : DateAndTime [ '2017-07-29T14:12:23.474449+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'IsInteger class',				#isMetaSide : true			},			#name : #'matchesTo:',			#protocol : #'type constraint',			#sourceCode : 'matchesTo: aString\r\t^ \'-?\\d+\' asRegex matches: aString',			#stamp : 'AttilaMagyar 8/3/2014 17:23',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '580' ],		#self : OmReference [ '581' ],		#time : DateAndTime [ '2017-07-29T14:12:23.475197+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'IsInteger class',				#isMetaSide : true			},			#name : #'parseString:',			#protocol : #'type constraint',			#sourceCode : 'parseString: aString\r\t^ aString asInteger',			#stamp : 'AttilaMagyar 8/3/2014 17:55',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '581' ],		#self : OmReference [ '582' ],		#time : DateAndTime [ '2017-07-29T14:12:23.475938+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'IsNumber class',				#isMetaSide : true			},			#name : #'matchesTo:',			#protocol : #'type constraint',			#sourceCode : 'matchesTo: aString\r\tNumber readFrom: aString ifFail: [ ^false ].\r\t^ true',			#stamp : 'AttilaMagyar 8/16/2014 14:23',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '582' ],		#self : OmReference [ '583' ],		#time : DateAndTime [ '2017-07-29T14:12:23.476742+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'IsNumber class',				#isMetaSide : true			},			#name : #'parseString:',			#protocol : #'type constraint',			#sourceCode : 'parseString: aString\r\t^ aString asNumber',			#stamp : 'AttilaMagyar 8/3/2014 17:56',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '583' ],		#self : OmReference [ '584' ],		#time : DateAndTime [ '2017-07-29T14:12:23.47749+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'IsObject class',				#isMetaSide : true			},			#name : #'matchesTo:',			#protocol : #'type constraint',			#sourceCode : 'matchesTo: aString\r\t^ true',			#stamp : 'AttilaMagyar 8/3/2014 17:09',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '584' ],		#self : OmReference [ '585' ],		#time : DateAndTime [ '2017-07-29T14:12:23.478212+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'IsObject class',				#isMetaSide : true			},			#name : #'parseString:',			#protocol : #'type constraint',			#sourceCode : 'parseString: aString\r\t^ aString',			#stamp : 'AttilaMagyar 8/3/2014 17:07',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '585' ],		#self : OmReference [ '586' ],		#time : DateAndTime [ '2017-07-29T14:12:23.480581+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Object,				#isMetaSide : false			},			#name : #'teaEvalActionOnException:request:',			#protocol : #'*Teapot-Core',			#sourceCode : 'teaEvalActionOnException: anException request: aTeaRequest\r\t^ self',			#stamp : 'AttilaMagyar 9/28/2014 19:41',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '586' ],		#self : OmReference [ '587' ],		#time : DateAndTime [ '2017-07-29T14:12:23.481873+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Object,				#isMetaSide : false			},			#name : #'teaEvalActionOnRequest:',			#protocol : #'*Teapot-Core',			#sourceCode : 'teaEvalActionOnRequest: aTeaRequest\r\t^ self',			#stamp : 'AttilaMagyar 9/28/2014 19:41',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '587' ],		#self : OmReference [ '588' ],		#time : DateAndTime [ '2017-07-29T14:12:23.483082+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Object,				#isMetaSide : false			},			#name : #'teaTransform:request:',			#protocol : #'*Teapot-Core',			#sourceCode : 'teaTransform: aResponseTransformer request: aTeaRequest\r\t^ aResponseTransformer cull: (TeaResponse ok body: self) cull: aTeaRequest',			#stamp : 'AttilaNamed 2/28/2015 23:27',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '588' ],		#self : OmReference [ '589' ],		#time : DateAndTime [ '2017-07-29T14:12:23.483868+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Send class',				#isMetaSide : true			},			#name : #'message:to:',			#protocol : #'instance creation',			#sourceCode : 'message: aSymbol to: anObject\r\t^ self new \r\t\tsetSelector: aSymbol \r\t\treceiver: anObject',			#stamp : 'AttilaMagyar 8/10/2014 21:16',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '589' ],		#self : OmReference [ '590' ],		#time : DateAndTime [ '2017-07-29T14:12:23.484697+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Send,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream \r\t\tnextPutAll: \'(Send message: \';\r\t\tnextPutAll: selector printString;\r\t\tnextPutAll: \' to: \'.\r\treceiver printOn: aStream.\r\taStream nextPut: $)',			#stamp : 'AttilaMagyar 8/16/2014 18:28',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '590' ],		#self : OmReference [ '591' ],		#time : DateAndTime [ '2017-07-29T14:12:23.485777+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Send,				#isMetaSide : false			},			#name : #'setSelector:receiver:',			#protocol : #initialization,			#sourceCode : 'setSelector: aSymbol receiver: anObject\r\tselector := aSymbol.\r\treceiver := anObject.\r\t^ self\t',			#stamp : 'AttilaMagyar 8/10/2014 20:53',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '591' ],		#self : OmReference [ '592' ],		#time : DateAndTime [ '2017-07-29T14:12:23.486508+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Send,				#isMetaSide : false			},			#name : #'teaEvalActionOnException:request:',			#protocol : #'tea action',			#sourceCode : 'teaEvalActionOnException: anException request: aTeaRequest\r\t^ receiver \r\t\tperform: selector \r\t\twithEnoughArguments: { anException. aTeaRequest }\r\t\r',			#stamp : 'AttilaMagyar 9/28/2014 19:41',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '592' ],		#self : OmReference [ '593' ],		#time : DateAndTime [ '2017-07-29T14:12:23.487223+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Send,				#isMetaSide : false			},			#name : #'teaEvalActionOnRequest:',			#protocol : #'tea action',			#sourceCode : 'teaEvalActionOnRequest: aTeaRequest\r\t^ receiver \r\t\tperform: selector \r\t\twithEnoughArguments: { aTeaRequest }\r\t\r',			#stamp : 'AttilaMagyar 9/28/2014 19:41',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '593' ],		#self : OmReference [ '594' ],		#time : DateAndTime [ '2017-07-29T14:12:23.487965+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Send,				#isMetaSide : false			},			#name : #'teaEvalActionOnRequest:response:',			#protocol : #'tea action',			#sourceCode : 'teaEvalActionOnRequest: aTeaRequest response: aZnResponse\r\t^ receiver \r\t\tperform: selector \r\t\twithEnoughArguments: { aTeaRequest. aZnResponse }\r\t\r',			#stamp : 'AttilaMagyar 10/8/2014 19:48',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '594' ],		#self : OmReference [ '595' ],		#time : DateAndTime [ '2017-07-29T14:12:23.489701+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaErrorHandler class',				#isMetaSide : true			},			#name : #'for:action:responseTransformer:',			#protocol : #'instance creation',			#sourceCode : 'for: anExceptionSet action: aTeaAction responseTransformer: aResponseTransformer\r\t^ self new \r\t\tsetExceptions: anExceptionSet \r\t\taction: aTeaAction \r\t\tresponseTransformer: aResponseTransformer',			#stamp : 'AttilaMagyar 8/24/2014 16:35',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '595' ],		#self : OmReference [ '596' ],		#time : DateAndTime [ '2017-07-29T14:12:23.490495+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaErrorHandler,				#isMetaSide : false			},			#name : #'canHandleError:',			#protocol : #'error handler',			#sourceCode : 'canHandleError: anException\r\t^ exceptions handles: anException',			#stamp : 'AttilaMagyar 8/24/2014 17:56',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '596' ],		#self : OmReference [ '597' ],		#time : DateAndTime [ '2017-07-29T14:12:23.491215+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaErrorHandler,				#isMetaSide : false			},			#name : #'handleError:request:',			#protocol : #'error handler',			#sourceCode : 'handleError: anException request: aTeaRequest\r\t| result |\r\t^ (self canHandleError: anException)\r\t\tifTrue:\r\t\t\t[ result := action teaEvalActionOnException: anException request: aTeaRequest.\r\t\t\tresult teaTransform: responseTransformer request: aTeaRequest ]\r\t\tifFalse: \r\t\t\t[ self error: \'Cannot handle \', anException printString ]',			#stamp : 'AttilaMagyar 9/28/2014 19:41',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '597' ],		#self : OmReference [ '598' ],		#time : DateAndTime [ '2017-07-29T14:12:23.491947+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaErrorHandler,				#isMetaSide : false			},			#name : #'responseTransformer:',			#protocol : #'error handler',			#sourceCode : 'responseTransformer: aResponseTransformer \r\tresponseTransformer := aResponseTransformer',			#stamp : 'AttilaMagyar 8/24/2014 17:00',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '598' ],		#self : OmReference [ '599' ],		#time : DateAndTime [ '2017-07-29T14:12:23.492737+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaErrorHandler,				#isMetaSide : false			},			#name : #'setExceptions:action:responseTransformer:',			#protocol : #initialization,			#sourceCode : 'setExceptions: anExceptionSet action: aTeaAction responseTransformer: aResponseTransformer\r\texceptions := anExceptionSet.\r\taction := aTeaAction.\r\tresponseTransformer := aResponseTransformer.\r\t^ self',			#stamp : 'AttilaMagyar 8/24/2014 18:00',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '599' ],		#self : OmReference [ '600' ],		#time : DateAndTime [ '2017-07-29T14:12:23.493499+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaAfterFilter,				#isMetaSide : false			},			#name : #'handleRequest:response:',			#protocol : #'response handling',			#sourceCode : 'handleRequest: aZnRequest response: aZnResponse\r\trequestMatcher \r\t\tmatchRequest: aZnRequest \r\t\tifMatch: [ :aTeaRequest | action teaEvalActionOnRequest: aTeaRequest response: aZnResponse ]\r\t\tifNoMatch: [ ]',			#stamp : 'AttilaMagyar 10/8/2014 19:55',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '600' ],		#self : OmReference [ '601' ],		#time : DateAndTime [ '2017-07-29T14:12:23.494299+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaBeforeFilter,				#isMetaSide : false			},			#name : #'handleRequest:',			#protocol : #'request handling',			#sourceCode : 'handleRequest: aZnRequest\r\trequestMatcher \r\t\tmatchRequest: aZnRequest \r\t\tifMatch: [ :aTeaRequest | action teaEvalActionOnRequest: aTeaRequest ]\r\t\tifNoMatch: [ ]',			#stamp : 'AttilaMagyar 10/8/2014 19:53',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '601' ],		#self : OmReference [ '602' ],		#time : DateAndTime [ '2017-07-29T14:12:23.495086+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaFilter class',				#isMetaSide : true			},			#name : #'urlPattern:action:',			#protocol : #'instance creation',			#sourceCode : 'urlPattern: anUrlPattern action: aTeaAction\r\t^ self new \r\t\tsetMatcher: (TeaRequestMatcher method: TeaMethodMatcher any url: anUrlPattern)\r\t\taction: aTeaAction\r',			#stamp : 'AttilaMagyar 9/27/2014 22:29',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '602' ],		#self : OmReference [ '603' ],		#time : DateAndTime [ '2017-07-29T14:12:23.495834+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaFilter,				#isMetaSide : false			},			#name : #'setMatcher:action:',			#protocol : #initialization,			#sourceCode : 'setMatcher: aTeaRequestMatcher action: aTeaAction\r\trequestMatcher := aTeaRequestMatcher.\r\taction := aTeaAction.\r\t^ self',			#stamp : 'AttilaMagyar 9/27/2014 22:33',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '603' ],		#self : OmReference [ '604' ],		#time : DateAndTime [ '2017-07-29T14:12:23.496542+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaFilter,				#isMetaSide : false			},			#name : #'whenClause:',			#protocol : #acccessing,			#sourceCode : 'whenClause: aBlockClosure \r\trequestMatcher whenClause: aBlockClosure ',			#stamp : 'AttilaMagyar 5/8/2015 19:01',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '604' ],		#self : OmReference [ '605' ],		#time : DateAndTime [ '2017-07-29T14:12:23.498321+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaGlobUrlSegment,				#isMetaSide : false			},			#name : #'matches:rest:placeholders:',			#protocol : #'url pattern segment',			#sourceCode : 'matches: urlSegments rest: adjacentPatterns placeholders: aDictionary\r\tself subclassResponsibility',			#stamp : 'AttilaMagyar 7/27/2014 15:09',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '605' ],		#self : OmReference [ '606' ],		#time : DateAndTime [ '2017-07-29T14:12:23.499114+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaLiteral class',				#isMetaSide : true			},			#name : #'fromString:atLast:',			#protocol : #'instance creation',			#sourceCode : 'fromString: aString atLast: aBoolean\r\t| class |\r\tclass := aBoolean ifTrue: [ TeaLiteralStop ] ifFalse: [ TeaLiteral ].\r\t^ class new setLiteral: aString',			#stamp : 'AttilaMagyar 7/30/2014 22:00',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '606' ],		#self : OmReference [ '607' ],		#time : DateAndTime [ '2017-07-29T14:12:23.499863+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaLiteral,				#isMetaSide : false			},			#name : #'matches:rest:placeholders:',			#protocol : #'url pattern segment',			#sourceCode : 'matches: urlSegments rest: adjacentPatterns placeholders: aDictionary\r\t^ literal = urlSegments first and: \r\t\t[ adjacentPatterns first \r\t\t\tmatches: urlSegments allButFirst \r\t\t\trest: adjacentPatterns allButFirst \r\t\t\tplaceholders: aDictionary ]',			#stamp : 'AttilaMagyar 8/3/2014 18:22',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '607' ],		#self : OmReference [ '608' ],		#time : DateAndTime [ '2017-07-29T14:12:23.500811+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaLiteral,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: literal.\r\t',			#stamp : 'AttilaMagyar 7/30/2014 22:20',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '608' ],		#self : OmReference [ '609' ],		#time : DateAndTime [ '2017-07-29T14:12:23.501635+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaLiteral,				#isMetaSide : false			},			#name : #'setLiteral:',			#protocol : #initialization,			#sourceCode : 'setLiteral: aString\r\tliteral := aString.\r\t^ self',			#stamp : 'AttilaMagyar 7/27/2014 16:30',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '609' ],		#self : OmReference [ '610' ],		#time : DateAndTime [ '2017-07-29T14:12:23.50239+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaLiteralStop,				#isMetaSide : false			},			#name : #'matches:rest:placeholders:',			#protocol : #'url pattern segment',			#sourceCode : 'matches: urlSegments rest: adjacentPatterns placeholders: aDictionary\r\t^ urlSegments size = 1 and: [ literal = urlSegments first ]',			#stamp : 'AttilaMagyar 8/3/2014 18:11',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '610' ],		#self : OmReference [ '611' ],		#time : DateAndTime [ '2017-07-29T14:12:23.503149+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaPlaceholder class',				#isMetaSide : true			},			#name : #'createPlaceholderName:typeConstraint:atLast:',			#protocol : #private,			#sourceCode : 'createPlaceholderName: key typeConstraint: aTypeConstraint atLast: aBoolean\r\t| class |\r\tclass := aBoolean\r\t\tifTrue: [ TeaPlaceholderStop ]\r\t\tifFalse: [ TeaPlaceholder ].\r\t^ class new \r\t\tsetPlaceholderName: key \r\t\ttypeConstraint: aTypeConstraint',			#stamp : 'AttilaMagyar 8/3/2014 17:33',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '611' ],		#self : OmReference [ '612' ],		#time : DateAndTime [ '2017-07-29T14:12:23.503908+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaPlaceholder class',				#isMetaSide : true			},			#name : #'fromString:atLast:',			#protocol : #'instance creation',			#sourceCode : 'fromString: aString atLast: aBoolean\r\t| spec typeConstraint key |\r\tself mustBeValidPlaceholder: aString.\r\tspec := aString allButFirst allButLast findTokens: \':\'.\r\tkey := spec first.\r\ttypeConstraint := spec at: 2 ifAbsent: #IsObject.\r\t^ self \r\t\tcreatePlaceholderName: key \r\t\ttypeConstraint: (Smalltalk at: typeConstraint asSymbol)\r\t\tatLast: aBoolean',			#stamp : 'AttilaMagyar 8/3/2014 17:31',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '612' ],		#self : OmReference [ '613' ],		#time : DateAndTime [ '2017-07-29T14:12:23.504684+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaPlaceholder class',				#isMetaSide : true			},			#name : #'mustBeValidPlaceholder:',			#protocol : #private,			#sourceCode : 'mustBeValidPlaceholder: aString\r\t((aString beginsWith: \'<\') and: [ aString endsWith: \'>\' ])\r\t\tifFalse: [ self error: \'Invalid placeholder name: \', aString ]',			#stamp : 'AttilaMagyar 7/28/2014 22:28',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '613' ],		#self : OmReference [ '614' ],		#time : DateAndTime [ '2017-07-29T14:12:23.505489+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaPlaceholder,				#isMetaSide : false			},			#name : #'matches:rest:placeholders:',			#protocol : #'url pattern segment',			#sourceCode : 'matches: urlSegments rest: adjacentPatterns placeholders: aDictionary\r\t(typeConstraint matchesTo: urlSegments first) \r\t\tifFalse: [ ^ false ].\t\t\t\r\taDictionary \r\t\tat: placeholderName \r\t\tput: (typeConstraint parseString: urlSegments first).\t\t\t\t\r\t^ adjacentPatterns first \r\t\tmatches: urlSegments allButFirst \r\t\trest: adjacentPatterns allButFirst \r\t\tplaceholders: aDictionary',			#stamp : 'AttilaMagyar 8/3/2014 17:58',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '614' ],		#self : OmReference [ '615' ],		#time : DateAndTime [ '2017-07-29T14:12:23.507386+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaPlaceholder,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream \r\t\tnextPut: $<;\r\t\tnextPutAll: placeholderName;\r\t\tnextPut: $>',			#stamp : 'AttilaMagyar 7/28/2014 22:28',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '615' ],		#self : OmReference [ '616' ],		#time : DateAndTime [ '2017-07-29T14:12:23.508203+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaPlaceholder,				#isMetaSide : false			},			#name : #'setPlaceholderName:typeConstraint:',			#protocol : #initialization,			#sourceCode : 'setPlaceholderName: aString typeConstraint: aTypeConstraint\r\tplaceholderName := aString asSymbol.\r\ttypeConstraint := aTypeConstraint.\r\t^ self',			#stamp : 'AttilaMagyar 8/3/2014 17:32',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '616' ],		#self : OmReference [ '617' ],		#time : DateAndTime [ '2017-07-29T14:12:23.50898+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaPlaceholderStop,				#isMetaSide : false			},			#name : #'matches:rest:placeholders:',			#protocol : #'url pattern segment',			#sourceCode : 'matches: urlSegments rest: adjacentPatterns placeholders: aDictionary\r\t| match |\r\tmatch := urlSegments size = 1 \r\t\tand: [ urlSegments first ~= TeaPadding \r\t\tand: [ (typeConstraint matchesTo: urlSegments first) ] ].\r\tmatch ifTrue:\r\t\t [ aDictionary\r\t\t\tat: placeholderName \r\t\t\tput: (typeConstraint parseString: urlSegments first) ].\r\t^ match',			#stamp : 'AttilaMagyar 8/3/2014 18:00',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '617' ],		#self : OmReference [ '618' ],		#time : DateAndTime [ '2017-07-29T14:12:23.509786+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaWildcard class',				#isMetaSide : true			},			#name : #'atLast:',			#protocol : #'instance creation',			#sourceCode : 'atLast: aBoolean\r\t^ aBoolean\r\t\tifTrue: [ TeaWildcardStop new ]\r\t\tifFalse: [ TeaWildcard new ]',			#stamp : 'AttilaMagyar 7/30/2014 22:00',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '618' ],		#self : OmReference [ '619' ],		#time : DateAndTime [ '2017-07-29T14:12:23.510594+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaWildcard,				#isMetaSide : false			},			#name : #'matches:rest:placeholders:',			#protocol : #'url pattern segment',			#sourceCode : 'matches: urlSegments rest: adjacentPatterns placeholders: aDictionary\r\t^ adjacentPatterns first \r\t\tmatches: urlSegments allButFirst \r\t\trest: adjacentPatterns allButFirst \r\t\tplaceholders: aDictionary',			#stamp : 'AttilaMagyar 7/27/2014 15:10',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '619' ],		#self : OmReference [ '620' ],		#time : DateAndTime [ '2017-07-29T14:12:23.511331+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaWildcard,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPut: $*',			#stamp : 'AttilaMagyar 7/27/2014 12:54',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '620' ],		#self : OmReference [ '621' ],		#time : DateAndTime [ '2017-07-29T14:12:23.512109+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaWildcardStop,				#isMetaSide : false			},			#name : #'matches:rest:placeholders:',			#protocol : #'url pattern segment',			#sourceCode : 'matches: urlSegments rest: adjacentPatterns placeholders: aDictionary\r\t^ true',			#stamp : 'AttilaMagyar 7/27/2014 15:10',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '621' ],		#self : OmReference [ '622' ],		#time : DateAndTime [ '2017-07-29T14:12:23.512899+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaMethodMatcher class',				#isMetaSide : true			},			#name : #any,			#protocol : #'instance creation',			#sourceCode : 'any\r\t^ self new \r\t\tsetMatcherBlock: [ :anyMethod | true ] \r\t\tname: \'ANY\'',			#stamp : 'AttilaMagyar 8/16/2014 18:12',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '622' ],		#self : OmReference [ '623' ],		#time : DateAndTime [ '2017-07-29T14:12:23.513644+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaMethodMatcher class',				#isMetaSide : true			},			#name : #'exactly:',			#protocol : #'instance creation',			#sourceCode : 'exactly: aSymbol\r\t^ self new \r\t\tsetMatcherBlock: [ :actual | actual = aSymbol ] \r\t\tname: aSymbol asString',			#stamp : 'AttilaMagyar 8/16/2014 18:12',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '623' ],		#self : OmReference [ '624' ],		#time : DateAndTime [ '2017-07-29T14:12:23.515363+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaMethodMatcher,				#isMetaSide : false			},			#name : #'matchesHttpMethod:',			#protocol : #'http method matcher',			#sourceCode : 'matchesHttpMethod: aSymbol\r\t^ matcherBlock value: aSymbol\t',			#stamp : 'AttilaMagyar 8/12/2014 20:58',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '624' ],		#self : OmReference [ '625' ],		#time : DateAndTime [ '2017-07-29T14:12:23.516195+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaMethodMatcher,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream \r\t\tnextPutAll: name;\r\t\tnextPut: $:',			#stamp : 'AttilaMagyar 8/16/2014 18:15',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '625' ],		#self : OmReference [ '626' ],		#time : DateAndTime [ '2017-07-29T14:12:23.517401+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaMethodMatcher,				#isMetaSide : false			},			#name : #'setMatcherBlock:name:',			#protocol : #initialization,			#sourceCode : 'setMatcherBlock: aBlockClosure name: aString\r\tmatcherBlock := aBlockClosure.\r\tname := aString.\r\t^ self',			#stamp : 'AttilaMagyar 8/16/2014 18:11',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '626' ],		#self : OmReference [ '627' ],		#time : DateAndTime [ '2017-07-29T14:12:23.518486+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaOutput class',				#isMetaSide : true			},			#name : #html,			#protocol : #'response transformers',			#sourceCode : 'html\r\t^ self stringWithContentType: ZnMimeType textHtml',			#stamp : 'AttilaMagyar 8/16/2014 13:52',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '627' ],		#self : OmReference [ '628' ],		#time : DateAndTime [ '2017-07-29T14:12:23.519246+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaOutput class',				#isMetaSide : true			},			#name : #json,			#protocol : #'response transformers',			#sourceCode : 'json\r\t^ [ :aTeaResponse | | entity |\r\t\tentity := ZnStringEntity \r\t\t\twith: ((self optionalClass: #NeoJSONWriter) toString: aTeaResponse body) \r\t\t\ttype: (ZnMimeType applicationJson charSet: aTeaResponse charSet; yourself).\r\t\tself \r\t\t\tznEntity: entity\r\t\t\tcode: aTeaResponse code \r\t\t\theaders: aTeaResponse headers ]',			#stamp : 'AttilaMagyar 5/9/2015 17:00',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '628' ],		#self : OmReference [ '629' ],		#time : DateAndTime [ '2017-07-29T14:12:23.5202+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaOutput class',				#isMetaSide : true			},			#name : #'mustache:contentType:',			#protocol : #'response transformers',			#sourceCode : 'mustache: templateStringOrStream contentType: contentType\r\t^ [ :aTeaResponse | | model object entity |\r\t\tobject := aTeaResponse body.\r\t\tmodel := (object respondsTo: #asDictionary) ifTrue: [ object asDictionary ] ifFalse: [ object ].\t\t\r\t\tentity := (ZnStringEntity \r\t\t\twith: (((self optionalClass: #MustacheTemplate) on: templateStringOrStream) value: model) \r\t\t\ttype: contentType).\r\t\tself \r\t\t\tznEntity: entity\r\t\t\tcode: aTeaResponse code \r\t\t\theaders: aTeaResponse headers ]\r',			#stamp : 'AttilaMagyar 9/28/2014 19:20',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '629' ],		#self : OmReference [ '630' ],		#time : DateAndTime [ '2017-07-29T14:12:23.521136+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaOutput class',				#isMetaSide : true			},			#name : #'mustacheHtml:',			#protocol : #'response transformers',			#sourceCode : 'mustacheHtml: templateString \r\t^ self mustache: templateString contentType: ZnMimeType textHtml.',			#stamp : 'AttilaMagyar 7/30/2014 22:09',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '630' ],		#self : OmReference [ '631' ],		#time : DateAndTime [ '2017-07-29T14:12:23.522265+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaOutput class',				#isMetaSide : true			},			#name : #'optionalClass:',			#protocol : #private,			#sourceCode : 'optionalClass: aSymbol\r\t[ ^ Smalltalk at: aSymbol ]\r\t\ton: KeyNotFound\r\t\tdo: [ self error: \'An optional dependency \', aSymbol, \' was not found. Please load it first.\' ]',			#stamp : 'AttilaMagyar 9/5/2014 15:40',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '631' ],		#self : OmReference [ '632' ],		#time : DateAndTime [ '2017-07-29T14:12:23.523444+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaOutput class',				#isMetaSide : true			},			#name : #ston,			#protocol : #'response transformers',			#sourceCode : 'ston\r\t^ [ :aTeaResponse | | entity |\r\t\tentity := ZnStringEntity \r\t\t\twith: ((self optionalClass: #STON) toString: aTeaResponse body) \r\t\t\ttype: (ZnMimeType textPlain charSet: aTeaResponse charSet; yourself).\r\t\tself \r\t\t\tznEntity: entity\r\t\t\tcode: aTeaResponse code \r\t\t\theaders: aTeaResponse headers ]',			#stamp : 'AttilaMagyar 5/9/2015 17:02',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '632' ],		#self : OmReference [ '633' ],		#time : DateAndTime [ '2017-07-29T14:12:23.524681+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaOutput class',				#isMetaSide : true			},			#name : #stream,			#protocol : #'response transformers',			#sourceCode : 'stream\r\t^ self stream: ZnMimeType applicationOctetStream ',			#stamp : 'AttilaMagyar 8/8/2014 20:07',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '633' ],		#self : OmReference [ '634' ],		#time : DateAndTime [ '2017-07-29T14:12:23.526841+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaOutput class',				#isMetaSide : true			},			#name : #'stream:',			#protocol : #'response transformers',			#sourceCode : 'stream: aZnMimeType\r\t^ [ :aTeaResponse | | entity |\r\t\tentity := ZnStreamingEntity \r\t\t\treadFrom: aTeaResponse body\r\t\t\tusingType: aZnMimeType\r\t\t\tandLength: aTeaResponse body size.\r\t\tself \r\t\t\tznEntity: entity\r\t\t\tcode: aTeaResponse code \r\t\t\theaders: aTeaResponse headers ]\r',			#stamp : 'AttilaMagyar 9/28/2014 19:20',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '634' ],		#self : OmReference [ '635' ],		#time : DateAndTime [ '2017-07-29T14:12:23.527912+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaOutput class',				#isMetaSide : true			},			#name : #'stringWithContentType:',			#protocol : #'response transformers',			#sourceCode : 'stringWithContentType: aZnMimeType \r\t^ [ :aTeaResponse | | entity |\r\t\tentity := ZnStringEntity new\r\t\t\tcontentType: (aZnMimeType charSet: aTeaResponse charSet; yourself);\r\t\t\tstring: aTeaResponse body asString;\r\t\t\tyourself.\r\t\tself \r\t\t\tznEntity: entity \r\t\t\tcode: aTeaResponse code \r\t\t\theaders: aTeaResponse headers ]',			#stamp : 'AttilaMagyar 5/9/2015 17:18',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '635' ],		#self : OmReference [ '636' ],		#time : DateAndTime [ '2017-07-29T14:12:23.528905+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaOutput class',				#isMetaSide : true			},			#name : #text,			#protocol : #'response transformers',			#sourceCode : 'text\r\t^ self stringWithContentType: ZnMimeType textPlain\r',			#stamp : 'AttilaMagyar 8/16/2014 13:52',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '636' ],		#self : OmReference [ '637' ],		#time : DateAndTime [ '2017-07-29T14:12:23.529899+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaOutput class',				#isMetaSide : true			},			#name : #'znEntity:code:headers:',			#protocol : #private,			#sourceCode : 'znEntity: aZnEntity code: anInteger headers: aDictionary\r\t| headers |\r\theaders := ZnHeaders defaultResponseHeaders.\r\theaders addAll: aDictionary.\r\t^ ZnResponse new\r\t\tstatusLine: (ZnStatusLine code: anInteger);\r\t\theaders: headers;\r\t\tentity: aZnEntity;\r\t\tyourself',			#stamp : 'AttilaNamed 2/28/2015 23:58',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '637' ],		#self : OmReference [ '638' ],		#time : DateAndTime [ '2017-07-29T14:12:23.5309+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaRequest class',				#isMetaSide : true			},			#name : #'fromZnRequest:',			#protocol : #'instance creation',			#sourceCode : 'fromZnRequest: aZnRequest\r\t^ self fromZnRequest: aZnRequest pathParams: Dictionary new',			#stamp : 'AttilaMagyar 8/12/2014 21:41',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '638' ],		#self : OmReference [ '639' ],		#time : DateAndTime [ '2017-07-29T14:12:23.53177+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaRequest class',				#isMetaSide : true			},			#name : #'fromZnRequest:pathParams:',			#protocol : #'instance creation',			#sourceCode : 'fromZnRequest: aZnRequest pathParams: aDictionary\r\t^ self new setZnRequest: aZnRequest pathParams: aDictionary',			#stamp : 'AttilaMagyar 8/12/2014 21:42',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '639' ],		#self : OmReference [ '640' ],		#time : DateAndTime [ '2017-07-29T14:12:23.532665+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequest,				#isMetaSide : false			},			#name : #'abort:',			#protocol : #aborting,			#sourceCode : 'abort: response\r\t(TeaAbort response: response) signal',			#stamp : 'AttilaNamed 3/1/2015 20:01',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '640' ],		#self : OmReference [ '641' ],		#time : DateAndTime [ '2017-07-29T14:12:23.533483+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequest,				#isMetaSide : false			},			#name : #'at:',			#protocol : #'acccessing - params',			#sourceCode : 'at: aSymbol\r\t^ self \r\t\tat: aSymbol \r\t\tifAbsent: [ TeaNoSuchParam signalWithParam: aSymbol ]',			#stamp : 'AttilaNamed 2/28/2015 22:40',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '641' ],		#self : OmReference [ '642' ],		#time : DateAndTime [ '2017-07-29T14:12:23.534242+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequest,				#isMetaSide : false			},			#name : #'at:ifAbsent:',			#protocol : #'acccessing - params',			#sourceCode : 'at: aSymbol ifAbsent: aBlock\r\t"Gets the value of a path parameter, query parameter for form parameter.\r\t\tE.g. /foo/<path-param>/bar\r\t\tE.g. /foo?queryParam=value"\r\r\t^ pathParams at: aSymbol ifAbsent: [ self queryOrFormParam: aSymbol ifAbsent: aBlock\t"XXX do something better" ]',			#stamp : 'AttilaMagyar 7/30/2014 16:51',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '642' ],		#self : OmReference [ '643' ],		#time : DateAndTime [ '2017-07-29T14:12:23.535001+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequest,				#isMetaSide : false			},			#name : #'doesNotUnderstand:',			#protocol : #'reflective operations',			#sourceCode : 'doesNotUnderstand: aMessage\r\t^ aMessage sendTo: znRequest',			#stamp : 'AttilaMagyar 7/28/2014 20:31',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '643' ],		#self : OmReference [ '644' ],		#time : DateAndTime [ '2017-07-29T14:12:23.536808+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequest,				#isMetaSide : false			},			#name : #'formParam:ifAbsent:',			#protocol : #private,			#sourceCode : 'formParam: aSymbol ifAbsent: aBlock\r\t^ (znRequest entity isKindOf: ZnApplicationFormUrlEncodedEntity) "XXX do something better" \r\t\tifTrue: [ znRequest entity at: aSymbol ifAbsent: aBlock ]\r\t\tifFalse: aBlock',			#stamp : 'AttilaMagyar 7/30/2014 16:40',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '644' ],		#self : OmReference [ '645' ],		#time : DateAndTime [ '2017-07-29T14:12:23.537663+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequest,				#isMetaSide : false			},			#name : #'queryOrFormParam:ifAbsent:',			#protocol : #private,			#sourceCode : 'queryOrFormParam: aSymbol ifAbsent: aBlock\r\t^ znRequest uri \r\t\tqueryAt: aSymbol \r\t\tifAbsent: [ self formParam: aSymbol ifAbsent: aBlock ]',			#stamp : 'AttilaMagyar 7/30/2014 16:40',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '645' ],		#self : OmReference [ '646' ],		#time : DateAndTime [ '2017-07-29T14:12:23.538435+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequest,				#isMetaSide : false			},			#name : #'setZnRequest:pathParams:',			#protocol : #initialization,			#sourceCode : 'setZnRequest: aZnRequest pathParams: aDictionary\r\tznRequest := aZnRequest.\r\tpathParams := aDictionary.\r\t^ self',			#stamp : 'AttilaMagyar 7/28/2014 21:04',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '646' ],		#self : OmReference [ '647' ],		#time : DateAndTime [ '2017-07-29T14:12:23.539247+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaRequestMatcher class',				#isMetaSide : true			},			#name : #'method:url:',			#protocol : #'instance creation',			#sourceCode : 'method: aMethodMatcher url: anUrlPattern\r\t^ self new setPattern: anUrlPattern method: aMethodMatcher\r',			#stamp : 'AttilaMagyar 9/27/2014 22:25',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '647' ],		#self : OmReference [ '648' ],		#time : DateAndTime [ '2017-07-29T14:12:23.540174+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequestMatcher,				#isMetaSide : false			},			#name : #'matchRequest:ifMatch:ifNoMatch:',			#protocol : #'request matcher',			#sourceCode : 'matchRequest: aZnRequest ifMatch: matchBlock ifNoMatch: noMatchBlock\r\t| matches placeholders |\r\tplaceholders := Dictionary new.\r\tmatches := self matchesRequest: aZnRequest placeholders: placeholders.\r\t^ matches\r\t\tifTrue: [ matchBlock value: (TeaRequest fromZnRequest: aZnRequest pathParams: placeholders) ]\r\t\tifFalse: [ noMatchBlock value ]',			#stamp : 'AttilaMagyar 9/27/2014 21:19',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '648' ],		#self : OmReference [ '649' ],		#time : DateAndTime [ '2017-07-29T14:12:23.541197+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequestMatcher,				#isMetaSide : false			},			#name : #'matchesRequest:placeholders:',			#protocol : #private,			#sourceCode : 'matchesRequest: aZnRequest placeholders: placeholders\r\t| matchesPartially |\r\tmatchesPartially := (methodMatcher matchesHttpMethod: aZnRequest method)\r\t\tand: [ urlPattern matchesUrl: aZnRequest url placeholders: placeholders ].\t\r\tmatchesPartially ifFalse: [ ^ false ].\r\t^ whenClause cull: (TeaRequest fromZnRequest: aZnRequest pathParams: placeholders).',			#stamp : 'AttilaMagyar 5/8/2015 19:25',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '649' ],		#self : OmReference [ '650' ],		#time : DateAndTime [ '2017-07-29T14:12:23.542063+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequestMatcher,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tmethodMatcher printOn: aStream.\r\taStream space.\r\turlPattern printOn: aStream.',			#stamp : 'AttilaMagyar 10/26/2015 21:54',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '650' ],		#self : OmReference [ '651' ],		#time : DateAndTime [ '2017-07-29T14:12:23.542875+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequestMatcher,				#isMetaSide : false			},			#name : #'setPattern:method:',			#protocol : #initialization,			#sourceCode : 'setPattern: anUrlPattern method: aMethodMatcher\r\turlPattern := anUrlPattern.\r\tmethodMatcher := aMethodMatcher.\r\twhenClause := [ :anyRequest | true ].\r\t^ self',			#stamp : 'AttilaMagyar 5/4/2015 22:17',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '651' ],		#self : OmReference [ '652' ],		#time : DateAndTime [ '2017-07-29T14:12:23.54365+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequestMatcher,				#isMetaSide : false			},			#name : #'whenClause:',			#protocol : #accessing,			#sourceCode : 'whenClause: aBlockClosure \r\twhenClause := aBlockClosure',			#stamp : 'AttilaMagyar 5/4/2015 21:49',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '652' ],		#self : OmReference [ '653' ],		#time : DateAndTime [ '2017-07-29T14:12:23.544473+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaResponse class',				#isMetaSide : true			},			#name : #badRequest,			#protocol : #'instance creation',			#sourceCode : 'badRequest\r\t^ self code: ZnStatusLine badRequest code',			#stamp : 'AttilaNamed 2/28/2015 23:09',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '653' ],		#self : OmReference [ '654' ],		#time : DateAndTime [ '2017-07-29T14:12:23.546323+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaResponse class',				#isMetaSide : true			},			#name : #'code:',			#protocol : #'instance creation',			#sourceCode : 'code: anInteger\r\t^ self new code: anInteger',			#stamp : 'AttilaNamed 2/28/2015 23:21',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '654' ],		#self : OmReference [ '655' ],		#time : DateAndTime [ '2017-07-29T14:12:23.547253+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaResponse class',				#isMetaSide : true			},			#name : #created,			#protocol : #'instance creation',			#sourceCode : 'created\r\t^ self code: ZnStatusLine created code',			#stamp : 'AttilaNamed 2/28/2015 23:23',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '655' ],		#self : OmReference [ '656' ],		#time : DateAndTime [ '2017-07-29T14:12:23.54806+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaResponse class',				#isMetaSide : true			},			#name : #methodNotAllowed,			#protocol : #'instance creation',			#sourceCode : 'methodNotAllowed\r\t^ self code: ZnStatusLine methodNotAllowed code \r',			#stamp : 'AttilaNamed 2/28/2015 23:10',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '656' ],		#self : OmReference [ '657' ],		#time : DateAndTime [ '2017-07-29T14:12:23.548879+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaResponse class',				#isMetaSide : true			},			#name : #notFound,			#protocol : #'instance creation',			#sourceCode : 'notFound\r\t^ self code: ZnStatusLine notFound code ',			#stamp : 'AttilaNamed 2/28/2015 23:11',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '657' ],		#self : OmReference [ '658' ],		#time : DateAndTime [ '2017-07-29T14:12:23.549676+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaResponse class',				#isMetaSide : true			},			#name : #notModified,			#protocol : #'instance creation',			#sourceCode : 'notModified\r\t^ self code: ZnStatusLine notModified code\r',			#stamp : 'AttilaNamed 2/28/2015 23:11',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '658' ],		#self : OmReference [ '659' ],		#time : DateAndTime [ '2017-07-29T14:12:23.550458+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaResponse class',				#isMetaSide : true			},			#name : #ok,			#protocol : #'instance creation',			#sourceCode : 'ok\r\t^ self code: ZnStatusLine ok code',			#stamp : 'AttilaNamed 2/28/2015 23:44',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '659' ],		#self : OmReference [ '660' ],		#time : DateAndTime [ '2017-07-29T14:12:23.55123+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaResponse class',				#isMetaSide : true			},			#name : #redirect,			#protocol : #'instance creation',			#sourceCode : 'redirect\r\t^ self code: ZnStatusLine redirect code',			#stamp : 'AttilaNamed 2/28/2015 23:11',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '660' ],		#self : OmReference [ '661' ],		#time : DateAndTime [ '2017-07-29T14:12:23.552013+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaResponse class',				#isMetaSide : true			},			#name : #serverError,			#protocol : #'instance creation',			#sourceCode : 'serverError\r\t^ self code: ZnStatusLine internalServerError code',			#stamp : 'AttilaNamed 2/28/2015 23:11',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '661' ],		#self : OmReference [ '662' ],		#time : DateAndTime [ '2017-07-29T14:12:23.552801+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaResponse class',				#isMetaSide : true			},			#name : #unauthorized,			#protocol : #'instance creation',			#sourceCode : 'unauthorized\r\t^ self code: ZnStatusLine unauthorized code',			#stamp : 'AttilaNamed 2/28/2015 23:54',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '662' ],		#self : OmReference [ '663' ],		#time : DateAndTime [ '2017-07-29T14:12:23.554572+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaResponse,				#isMetaSide : false			},			#name : #body,			#protocol : #accessing,			#sourceCode : 'body\r\t^ body',			#stamp : 'AttilaMagyar 9/28/2014 18:51',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '663' ],		#self : OmReference [ '664' ],		#time : DateAndTime [ '2017-07-29T14:12:23.555357+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaResponse,				#isMetaSide : false			},			#name : #'body:',			#protocol : #accessing,			#sourceCode : 'body: anObject\r\tbody := anObject.\r\t^ self',			#stamp : 'AttilaNamed 2/28/2015 23:21',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '664' ],		#self : OmReference [ '665' ],		#time : DateAndTime [ '2017-07-29T14:12:23.556161+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaResponse,				#isMetaSide : false			},			#name : #charSet,			#protocol : #accessing,			#sourceCode : 'charSet\r\t^ charSet',			#stamp : 'AttilaMagyar 5/9/2015 16:53',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '665' ],		#self : OmReference [ '666' ],		#time : DateAndTime [ '2017-07-29T14:12:23.556927+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaResponse,				#isMetaSide : false			},			#name : #'charSet:',			#protocol : #accessing,			#sourceCode : 'charSet: aString\r\tcharSet := aString.\r\t^ self',			#stamp : 'AttilaMagyar 5/9/2015 18:05',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '666' ],		#self : OmReference [ '667' ],		#time : DateAndTime [ '2017-07-29T14:12:23.557675+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaResponse,				#isMetaSide : false			},			#name : #code,			#protocol : #accessing,			#sourceCode : 'code\r\t^ code',			#stamp : 'AttilaMagyar 9/28/2014 19:00',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '667' ],		#self : OmReference [ '668' ],		#time : DateAndTime [ '2017-07-29T14:12:23.55845+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaResponse,				#isMetaSide : false			},			#name : #'code:',			#protocol : #accessing,			#sourceCode : 'code: anInteger\r\tcode := anInteger.\r\t^ self',			#stamp : 'AttilaNamed 2/28/2015 23:21',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '668' ],		#self : OmReference [ '669' ],		#time : DateAndTime [ '2017-07-29T14:12:23.559219+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaResponse,				#isMetaSide : false			},			#name : #'headerName:value:',			#protocol : #accessing,			#sourceCode : 'headerName: nameString value: valueString\r\theaders at: nameString put: valueString.\r\t^ self',			#stamp : 'AttilaNamed 2/28/2015 23:29',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '669' ],		#self : OmReference [ '670' ],		#time : DateAndTime [ '2017-07-29T14:12:23.559978+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaResponse,				#isMetaSide : false			},			#name : #headers,			#protocol : #accessing,			#sourceCode : 'headers\r\t^ headers',			#stamp : 'AttilaMagyar 9/28/2014 19:11',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '670' ],		#self : OmReference [ '671' ],		#time : DateAndTime [ '2017-07-29T14:12:23.560756+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaResponse,				#isMetaSide : false			},			#name : #'headers:',			#protocol : #accessing,			#sourceCode : 'headers: aDictionary\r\theaders := aDictionary asDictionary.\r\t^ self',			#stamp : 'AttilaNamed 2/28/2015 23:30',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '671' ],		#self : OmReference [ '672' ],		#time : DateAndTime [ '2017-07-29T14:12:23.56152+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaResponse,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\theaders := Dictionary new.\r\tbody := String crlf.\r\tcode := ZnStatusLine ok code.\r\tcharSet := \'utf-8\'.',			#stamp : 'AttilaMagyar 5/9/2015 16:54',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '672' ],		#self : OmReference [ '673' ],		#time : DateAndTime [ '2017-07-29T14:12:23.563315+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaResponse,				#isMetaSide : false			},			#name : #'location:',			#protocol : #accessing,			#sourceCode : 'location: url\r\tself headerName: \'Location\' value: url asString.\r\t^ self',			#stamp : 'AttilaNamed 2/28/2015 23:41',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '673' ],		#self : OmReference [ '674' ],		#time : DateAndTime [ '2017-07-29T14:12:23.564128+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaResponse,				#isMetaSide : false			},			#name : #'teaTransform:request:',			#protocol : #'response transforming',			#sourceCode : 'teaTransform: aResponseTransformer request: aTeaRequest\r\t^ aResponseTransformer cull: self cull: aTeaRequest',			#stamp : 'AttilaMagyar 9/28/2014 18:49',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '674' ],		#self : OmReference [ '675' ],		#time : DateAndTime [ '2017-07-29T14:12:23.564941+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaRoute class',				#isMetaSide : true			},			#name : #'matcher:action:transformer:port:',			#protocol : #'instance creation',			#sourceCode : 'matcher: aTeaRequestMatcher action: aTeaAction transformer: aResponseTransformer port: portNumber\r\t^ self new \r\t\tsetMatcher: aTeaRequestMatcher\r\t\taction: aTeaAction\r\t\ttransformer: aResponseTransformer\r\t\tport: portNumber "XXX only used by teapsoon inspector"',			#stamp : 'AttilaMagyar 11/8/2015 18:31',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '675' ],		#self : OmReference [ '676' ],		#time : DateAndTime [ '2017-07-29T14:12:23.565825+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRoute,				#isMetaSide : false			},			#name : #'handleRequest:',			#protocol : #'request handling',			#sourceCode : 'handleRequest: aZnRequest\r\t^ requestMatcher \r\t\tmatchRequest: aZnRequest \r\t\tifMatch: \r\t\t\t[ :aTeaRequest | | result |\r\t\t\tresult := action teaEvalActionOnRequest: aTeaRequest.\r\t\t\tresult teaTransform: responseTransformer request: aTeaRequest ]\r\t\tifNoMatch: \r\t\t\t[ ZnResponse notFound: aZnRequest uri ]',			#stamp : 'AttilaMagyar 9/28/2014 19:41',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '676' ],		#self : OmReference [ '677' ],		#time : DateAndTime [ '2017-07-29T14:12:23.566637+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRoute,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\trequestMatcher printOn: aStream.\r\taStream nextPutAll: \' -> \'.\r\taction printOn: aStream.',			#stamp : 'AttilaMagyar 10/26/2015 21:52',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '677' ],		#self : OmReference [ '678' ],		#time : DateAndTime [ '2017-07-29T14:12:23.567502+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRoute,				#isMetaSide : false			},			#name : #'responseTransformer:',			#protocol : #accessing,			#sourceCode : 'responseTransformer: aBlock\r\tresponseTransformer := aBlock',			#stamp : 'AttilaMagyar 7/31/2014 21:18',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '678' ],		#self : OmReference [ '679' ],		#time : DateAndTime [ '2017-07-29T14:12:23.568262+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRoute,				#isMetaSide : false			},			#name : #'setMatcher:action:transformer:port:',			#protocol : #initialization,			#sourceCode : 'setMatcher: aTeaRequestMatcher action: aTeaAction transformer: aResponseTransformer port: portNumber\r\trequestMatcher := aTeaRequestMatcher.\r\taction := aTeaAction.\r\tresponseTransformer := aResponseTransformer.\r\tport := portNumber.\r\t^ self',			#stamp : 'AttilaMagyar 11/8/2015 18:32',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '679' ],		#self : OmReference [ '680' ],		#time : DateAndTime [ '2017-07-29T14:12:23.56901+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRoute,				#isMetaSide : false			},			#name : #'whenClause:',			#protocol : #acccessing,			#sourceCode : 'whenClause: aBlockClosure \r\trequestMatcher whenClause: aBlockClosure',			#stamp : 'AttilaMagyar 5/8/2015 18:55',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '680' ],		#self : OmReference [ '681' ],		#time : DateAndTime [ '2017-07-29T14:12:23.569828+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaCompositeRouter class',				#isMetaSide : true			},			#name : #'routers:',			#protocol : #'instance creation',			#sourceCode : 'routers: teaRouterCollection\r\t^ self new setRouters: teaRouterCollection',			#stamp : 'AttilaMagyar 8/3/2014 11:25',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '681' ],		#self : OmReference [ '682' ],		#time : DateAndTime [ '2017-07-29T14:12:23.570651+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaCompositeRouter,				#isMetaSide : false			},			#name : #'addAfterFilter:',			#protocol : #filters,			#sourceCode : 'addAfterFilter: aTeaFilter\r\t^ afterFilters add: aTeaFilter',			#stamp : 'AttilaMagyar 5/8/2015 19:00',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '682' ],		#self : OmReference [ '683' ],		#time : DateAndTime [ '2017-07-29T14:12:23.572423+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaCompositeRouter,				#isMetaSide : false			},			#name : #'addBeforeFilter:',			#protocol : #filters,			#sourceCode : 'addBeforeFilter: aTeaFilter\r\t^ beforeFilters add: aTeaFilter',			#stamp : 'AttilaMagyar 5/8/2015 19:00',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '683' ],		#self : OmReference [ '684' ],		#time : DateAndTime [ '2017-07-29T14:12:23.573221+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaCompositeRouter,				#isMetaSide : false			},			#name : #'addErrorHandler:',			#protocol : #'error handing',			#sourceCode : 'addErrorHandler: aTeaErrorHandler\r\t^ errorhandlers add: aTeaErrorHandler',			#stamp : 'AttilaMagyar 8/24/2014 17:10',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '684' ],		#self : OmReference [ '685' ],		#time : DateAndTime [ '2017-07-29T14:12:23.574004+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaCompositeRouter,				#isMetaSide : false			},			#name : #'evaluateAfterFilters:response:',			#protocol : #private,			#sourceCode : 'evaluateAfterFilters: aZnRequest response: aZnResponse\r\tafterFilters do: [ :each | each handleRequest: aZnRequest response: aZnResponse ]',			#stamp : 'AttilaMagyar 9/27/2014 21:40',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '685' ],		#self : OmReference [ '686' ],		#time : DateAndTime [ '2017-07-29T14:12:23.574796+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaCompositeRouter,				#isMetaSide : false			},			#name : #'evaluateBeforeFilters:',			#protocol : #private,			#sourceCode : 'evaluateBeforeFilters: aZnRequest\r\tbeforeFilters do: [ :each | each handleRequest: aZnRequest ]',			#stamp : 'AttilaMagyar 9/27/2014 19:54',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '686' ],		#self : OmReference [ '687' ],		#time : DateAndTime [ '2017-07-29T14:12:23.575544+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaCompositeRouter,				#isMetaSide : false			},			#name : #'evaluateRouters:',			#protocol : #private,			#sourceCode : 'evaluateRouters: aZnRequest\r\trouters do: [ :each | | response |\r\t\tresponse := each handleRequest: aZnRequest.\r\t\tresponse isNotFound ifFalse: [ ^ response ] ].\r\t^ ZnResponse notFound: aZnRequest uri',			#stamp : 'AttilaMagyar 9/27/2014 22:43',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '687' ],		#self : OmReference [ '688' ],		#time : DateAndTime [ '2017-07-29T14:12:23.576321+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaCompositeRouter,				#isMetaSide : false			},			#name : #'exceptionOccurred:request:',			#protocol : #private,			#sourceCode : 'exceptionOccurred: anException request: aZnRequest\r\t| handler |\r\thandler := errorhandlers \r\t\tdetect: [ :each | each canHandleError: anException ]\r\t\tifNone: [ anException pass ].\t\t\r\t^ handler handleError: anException request: (TeaRequest fromZnRequest: aZnRequest).\r\t',			#stamp : 'AttilaMagyar 9/22/2014 21:44',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '688' ],		#self : OmReference [ '689' ],		#time : DateAndTime [ '2017-07-29T14:12:23.577123+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaCompositeRouter,				#isMetaSide : false			},			#name : #'handleRequest:',			#protocol : #'zn delegate',			#sourceCode : 'handleRequest: aZnRequest\r\t| response |\r\t^ [ self evaluateBeforeFilters: aZnRequest.\r\t     response := self evaluateRouters: aZnRequest.\r\t     self evaluateAfterFilters: aZnRequest response: response.\r\t     response\t\r\t   ] on: Exception \r\t     do: [ :ex | self exceptionOccurred: ex request: aZnRequest ]',			#stamp : 'AttilaMagyar 9/27/2014 22:21',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '689' ],		#self : OmReference [ '690' ],		#time : DateAndTime [ '2017-07-29T14:12:23.577919+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaCompositeRouter,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\terrorhandlers := OrderedCollection new.\r\tbeforeFilters := OrderedCollection new.\r\tafterFilters := OrderedCollection new.',			#stamp : 'AttilaMagyar 9/27/2014 19:50',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '690' ],		#self : OmReference [ '691' ],		#time : DateAndTime [ '2017-07-29T14:12:23.578672+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaCompositeRouter,				#isMetaSide : false			},			#name : #'setRouters:',			#protocol : #initialization,			#sourceCode : 'setRouters: teaRouterCollection\r\trouters := teaRouterCollection asArray.\r\t^ self',			#stamp : 'AttilaMagyar 8/3/2014 11:28',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '691' ],		#self : OmReference [ '692' ],		#time : DateAndTime [ '2017-07-29T14:12:23.579468+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaDynamicRouter,				#isMetaSide : false			},			#name : #'addRoute:',			#protocol : #'route dispatcher',			#sourceCode : 'addRoute: aRoute\r\t^ routes add: aRoute.\r\t',			#stamp : 'AttilaMagyar 7/31/2014 23:15',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '692' ],		#self : OmReference [ '693' ],		#time : DateAndTime [ '2017-07-29T14:12:23.581239+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaDynamicRouter,				#isMetaSide : false			},			#name : #'handleRequest:',			#protocol : #'zn delegate',			#sourceCode : 'handleRequest: aZnRequest\r\troutes do: [ :each | | aZnResponse |\r\t\taZnResponse := each handleRequest: aZnRequest.\r\t\taZnResponse isNotFound ifFalse: [ ^ aZnResponse ] ].\t\r\t^ ZnResponse notFound: aZnRequest uri',			#stamp : 'AttilaMagyar 8/16/2014 18:58',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '693' ],		#self : OmReference [ '694' ],		#time : DateAndTime [ '2017-07-29T14:12:23.582028+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaDynamicRouter,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\troutes := OrderedCollection new.',			#stamp : 'AttilaMagyar 7/31/2014 23:12',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '694' ],		#self : OmReference [ '695' ],		#time : DateAndTime [ '2017-07-29T14:12:23.582766+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaDynamicRouter,				#isMetaSide : false			},			#name : #routes,			#protocol : #accessing,			#sourceCode : 'routes\r\r\t^routes',			#stamp : 'TorstenBergmann 10/12/2015 13:58',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '695' ],		#self : OmReference [ '696' ],		#time : DateAndTime [ '2017-07-29T14:12:23.583577+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRouter,				#isMetaSide : false			},			#name : #'handleRequest:',			#protocol : #'zn delegate',			#sourceCode : 'handleRequest: aZnRequest\r\tself subclassResponsibility ',			#stamp : 'AttilaMagyar 8/2/2014 23:09',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '696' ],		#self : OmReference [ '697' ],		#time : DateAndTime [ '2017-07-29T14:12:23.584355+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaStaticRouter,				#isMetaSide : false			},			#name : #'handleRequest:',			#protocol : #'zn delegate',			#sourceCode : 'handleRequest: aZnRequest\r\t^ delegate \r\t\tifNil: [ ZnResponse notFound: aZnRequest uri  ] \r\t\tifNotNil: [ delegate handleRequest: aZnRequest ]',			#stamp : 'AttilaMagyar 8/2/2014 23:06',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '697' ],		#self : OmReference [ '698' ],		#time : DateAndTime [ '2017-07-29T14:12:23.585121+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaStaticRouter,				#isMetaSide : false			},			#name : #'urlPrefix:path:',			#protocol : #acccessing,			#sourceCode : 'urlPrefix: urlPrefixString path: pathString\r\tdelegate ifNil: [ delegate := ZnStaticFileServerDelegate new ].\r\tdelegate\r\t\tprefixFromString: urlPrefixString;\r\t\tdirectory: pathString asFileReference.',			#stamp : 'AttilaMagyar 8/2/2014 23:06',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '698' ],		#self : OmReference [ '699' ],		#time : DateAndTime [ '2017-07-29T14:12:23.585947+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaGlobUrlPattern class',				#isMetaSide : true			},			#name : #'createSegment:atLast:',			#protocol : #private,			#sourceCode : 'createSegment: aString atLast: aBoolean\r\taString = \'*\' \r\t\tifTrue: [ ^ TeaWildcard atLast: aBoolean ].\r\t(aString beginsWith: \'<\')\r\t\tifTrue: [ ^ TeaPlaceholder fromString: aString atLast: aBoolean ].\r\t^ TeaLiteral fromString: aString atLast: aBoolean',			#stamp : 'AttilaMagyar 8/16/2014 18:36',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '699' ],		#self : OmReference [ '700' ],		#time : DateAndTime [ '2017-07-29T14:12:23.58672+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaGlobUrlPattern class',				#isMetaSide : true			},			#name : #'parseSegments:',			#protocol : #private,			#sourceCode : 'parseSegments: aString\r\t| tokens |\r\ttokens := aString findTokens: \'/\'.\r\t^ tokens collectWithIndex: [ :each :idx | \r\t\tself createSegment: each atLast: idx = tokens size ]',			#stamp : 'AttilaMagyar 8/16/2014 18:37',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '700' ],		#self : OmReference [ '701' ],		#time : DateAndTime [ '2017-07-29T14:12:23.587578+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaGlobUrlPattern class',				#isMetaSide : true			},			#name : #'parseString:',			#protocol : #'instance creation',			#sourceCode : 'parseString: aString\r\t^ self new setSegments: (self parseSegments: aString)',			#stamp : 'AttilaMagyar 7/26/2014 23:04',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '701' ],		#self : OmReference [ '702' ],		#time : DateAndTime [ '2017-07-29T14:12:23.589348+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaGlobUrlPattern,				#isMetaSide : false			},			#name : #'matchesUrl:placeholders:',			#protocol : #'url matcher',			#sourceCode : 'matchesUrl: anUrl placeholders: aDictionary\r\t| urlSegments |\r\turlSegments := self padUrlSegments: anUrl with: TeaPadding size: segments size.\r\tsegments isEmpty\r\t\tifTrue: [ ^ urlSegments isEmpty ].\r\t^ segments first \r\t\tmatches: urlSegments \r\t\trest: segments allButFirst \r\t\tplaceholders: aDictionary',			#stamp : 'AttilaMagyar 7/30/2014 22:01',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '702' ],		#self : OmReference [ '703' ],		#time : DateAndTime [ '2017-07-29T14:12:23.590172+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaGlobUrlPattern,				#isMetaSide : false			},			#name : #'padUrlSegments:with:size:',			#protocol : #private,			#sourceCode : 'padUrlSegments: anUrl with: padding size: anInteger\r\t| urlSegments |\r\turlSegments := anUrl segments isEmptyOrNil \r\t\tifTrue: [ OrderedCollection new ]\r\t\tifFalse: [ self trimTrailingSlash: anUrl segments ].\r\turlSegments size < segments size\r\t\tifTrue: [ urlSegments := urlSegments forceTo: anInteger paddingWith: padding ].\r\t^ urlSegments',			#stamp : 'AttilaMagyar 8/3/2014 18:36',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '703' ],		#self : OmReference [ '704' ],		#time : DateAndTime [ '2017-07-29T14:12:23.590927+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaGlobUrlPattern,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPut: $\'.\r\tsegments \r\t\tdo: [ :each | each printOn: aStream ]\r\t\tseparatedBy: [ aStream nextPut: $/ ].\r\taStream nextPut: $\'.',			#stamp : 'AttilaMagyar 10/26/2015 21:55',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '704' ],		#self : OmReference [ '705' ],		#time : DateAndTime [ '2017-07-29T14:12:23.591664+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaGlobUrlPattern,				#isMetaSide : false			},			#name : #'setSegments:',			#protocol : #initialization,			#sourceCode : 'setSegments: anArray\r\tsegments := anArray.\r\t^ self',			#stamp : 'AttilaMagyar 7/26/2014 23:23',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '705' ],		#self : OmReference [ '706' ],		#time : DateAndTime [ '2017-07-29T14:12:23.592406+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaGlobUrlPattern,				#isMetaSide : false			},			#name : #'trimTrailingSlash:',			#protocol : #private,			#sourceCode : 'trimTrailingSlash: urlSegments \r\t^ (urlSegments isNotEmpty and: [ urlSegments last = \'/\' ])\r\t\tifTrue: [ urlSegments allButLast ]\r\t\tifFalse: [ urlSegments ]',			#stamp : 'AttilaMagyar 8/3/2014 18:29',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '706' ],		#self : OmReference [ '707' ],		#time : DateAndTime [ '2017-07-29T14:12:23.593191+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaRxUrlPattern class',				#isMetaSide : true			},			#name : #'fromRxMatcher:',			#protocol : #'instance creation',			#sourceCode : 'fromRxMatcher: aRxMatcher \r\t^ self new initializeRxMatcher: aRxMatcher ',			#stamp : 'AttilaMagyar 8/14/2014 22:27',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '707' ],		#self : OmReference [ '708' ],		#time : DateAndTime [ '2017-07-29T14:12:23.593964+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRxUrlPattern,				#isMetaSide : false			},			#name : #'hasMatched:',			#protocol : #private,			#sourceCode : 'hasMatched: aZnUrl\r\t"XXX RxMatcher has state. Consider something better"\r\t^ lock critical: [ (regexp matches: aZnUrl path) or: [ regexp matches: \'/\', aZnUrl path ] ]',			#stamp : 'AttilaMagyar 8/16/2014 19:21',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '708' ],		#self : OmReference [ '709' ],		#time : DateAndTime [ '2017-07-29T14:12:23.594746+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRxUrlPattern,				#isMetaSide : false			},			#name : #'initializeRxMatcher:',			#protocol : #initialization,			#sourceCode : 'initializeRxMatcher: aRxMatcher \r\tregexp := aRxMatcher.\r\tlock := Mutex new.\r\t^ self',			#stamp : 'AttilaMagyar 8/14/2014 22:27',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '709' ],		#self : OmReference [ '710' ],		#time : DateAndTime [ '2017-07-29T14:12:23.595483+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRxUrlPattern,				#isMetaSide : false			},			#name : #'matchesUrl:placeholders:',			#protocol : #'url matcher',			#sourceCode : 'matchesUrl: aZnUrl placeholders: aDictionary \r\t| match |\r\tmatch := self hasMatched: aZnUrl.\r\tmatch ifTrue:\r\t\t[ 2 to: regexp subexpressionCount do: [ :i | \r\t\t\taDictionary at: i - 1put: (regexp subexpression: i) ] ].\r\t^ match\r',			#stamp : 'AttilaMagyar 8/14/2014 22:28',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '710' ],		#self : OmReference [ '711' ],		#time : DateAndTime [ '2017-07-29T14:12:23.59624+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRxUrlPattern,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: \'<regexp>\'.',			#stamp : 'AttilaMagyar 10/26/2015 22:01',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '711' ],		#self : OmReference [ '712' ],		#time : DateAndTime [ '2017-07-29T14:12:23.598035+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPattern,				#isMetaSide : false			},			#name : #'matchesUrl:placeholders:',			#protocol : #'url matcher',			#sourceCode : 'matchesUrl: anUrl placeholders: aDictionary\r\tself subclassResponsibility ',			#stamp : 'AttilaMagyar 8/14/2014 21:21',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '712' ],		#self : OmReference [ '713' ],		#time : DateAndTime [ '2017-07-29T14:12:23.598805+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaUrlPatternSet class',				#isMetaSide : true			},			#name : #'fromCollection:',			#protocol : #'instance creation',			#sourceCode : 'fromCollection: aCollection \r\t^ self new setPatterns: (aCollection collect: #asTeaUrlPattern)',			#stamp : 'AttilaMagyar 6/16/2015 18:27',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '713' ],		#self : OmReference [ '714' ],		#time : DateAndTime [ '2017-07-29T14:12:23.599592+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternSet,				#isMetaSide : false			},			#name : #'matchesUrl:placeholders:',			#protocol : #'url matcher',			#sourceCode : 'matchesUrl: anUrl placeholders: aDictionary\r\t^ patterns anySatisfy: [ :each | each matchesUrl: anUrl placeholders: aDictionary ]',			#stamp : 'AttilaMagyar 6/16/2015 18:45',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '714' ],		#self : OmReference [ '715' ],		#time : DateAndTime [ '2017-07-29T14:12:23.600357+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternSet,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPut: ${.\r\tpatterns \r\t\tdo: [ :each | each printOn: aStream ]\r\t\tseparatedBy: [ aStream nextPut: $. ].\r\taStream nextPut: $}.',			#stamp : 'AttilaMagyar 6/16/2015 18:53',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '715' ],		#self : OmReference [ '716' ],		#time : DateAndTime [ '2017-07-29T14:12:23.601096+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternSet,				#isMetaSide : false			},			#name : #'setPatterns:',			#protocol : #initialization,			#sourceCode : 'setPatterns: aCollection \r\tpatterns := aCollection.\r\t^ self',			#stamp : 'AttilaMagyar 6/16/2015 18:27',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '716' ],		#self : OmReference [ '717' ],		#time : DateAndTime [ '2017-07-29T14:12:23.601863+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Teapot class',				#isMetaSide : true			},			#name : #'configure:',			#protocol : #'instance creation',			#sourceCode : 'configure: optionsAssociations\r\t"Create a new Teapot instance with optional properties.\r \t - Teapot properties: #defaultOutput\r\t - ZnServer properties: See options protocol of ZnServer for specific usages.\t\r\tExample: Teapot configure: { \r\t\t#defaultOutput -> #json. \r\t\t#bindAddress -> #[192 168 0 3].\r\t\t#port -> 8080. \r\t\t#debugMode -> true \r\t}."\r\t\r\t^ self new initializeOptions: optionsAssociations',			#stamp : 'AttilaMagyar 6/8/2016 22:24',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '717' ],		#self : OmReference [ '718' ],		#time : DateAndTime [ '2017-07-29T14:12:23.602593+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Teapot class',				#isMetaSide : true			},			#name : #on,			#protocol : #'instance creation',			#sourceCode : 'on\r\t"Create Teapot with default properties."\r\t\r\t^ self configure: { }',			#stamp : 'AttilaMagyar 8/13/2014 21:09',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '718' ],		#self : OmReference [ '719' ],		#time : DateAndTime [ '2017-07-29T14:12:23.603312+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Teapot class',				#isMetaSide : true			},			#name : #stopAll,			#protocol : #controlling,			#sourceCode : 'stopAll\r\tself allInstancesDo: #stop',			#stamp : 'AttilaMagyar 8/9/2014 17:11',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '719' ],		#self : OmReference [ '720' ],		#time : DateAndTime [ '2017-07-29T14:12:23.604073+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'CONNECT:',			#protocol : #'url mapping',			#sourceCode : 'CONNECT: patternActionAssoc\r\tself\r\t\taddRouteMethod: (TeaMethodMatcher exactly: #CONNECT)\r\t\tpattern: patternActionAssoc key\r\t\taction: patternActionAssoc value',			#stamp : 'AttilaMagyar 4/17/2015 23:48',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '720' ],		#self : OmReference [ '721' ],		#time : DateAndTime [ '2017-07-29T14:12:23.604823+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'DELETE:',			#protocol : #'url mapping',			#sourceCode : 'DELETE: patternActionAssoc\r\tself\r\t\taddRouteMethod: (TeaMethodMatcher exactly: #DELETE)\r\t\tpattern: patternActionAssoc key\r\t\taction: patternActionAssoc value',			#stamp : 'AttilaMagyar 4/17/2015 23:48',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '721' ],		#self : OmReference [ '722' ],		#time : DateAndTime [ '2017-07-29T14:12:23.606613+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'GET:',			#protocol : #'url mapping',			#sourceCode : 'GET: patternActionAssoc\r\tself \r\t\taddRouteMethod: (TeaMethodMatcher exactly: #GET) \r\t\tpattern: patternActionAssoc key \r\t\taction: patternActionAssoc value',			#stamp : 'AttilaMagyar 4/18/2015 00:09',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '722' ],		#self : OmReference [ '723' ],		#time : DateAndTime [ '2017-07-29T14:12:23.607363+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'HEAD:',			#protocol : #'url mapping',			#sourceCode : 'HEAD: patternActionAssoc\r\tself \r\t\taddRouteMethod: (TeaMethodMatcher exactly: #HEAD) \r\t\tpattern: patternActionAssoc key \r\t\taction: patternActionAssoc value',			#stamp : 'AttilaMagyar 4/17/2015 23:48',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '723' ],		#self : OmReference [ '724' ],		#time : DateAndTime [ '2017-07-29T14:12:23.608204+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'OPTIONS:',			#protocol : #'url mapping',			#sourceCode : 'OPTIONS: patternActionAssoc\r\tself\r\t\taddRouteMethod: (TeaMethodMatcher exactly: #OPTIONS)\r\t\tpattern: patternActionAssoc key\r\t\taction: patternActionAssoc value',			#stamp : 'AttilaMagyar 4/17/2015 23:48',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '724' ],		#self : OmReference [ '725' ],		#time : DateAndTime [ '2017-07-29T14:12:23.608941+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'PATCH:',			#protocol : #'url mapping',			#sourceCode : 'PATCH: patternActionAssoc\r\tself\r\t\taddRouteMethod: (TeaMethodMatcher exactly: #PATCH)\r\t\tpattern: patternActionAssoc key\r\t\taction: patternActionAssoc value',			#stamp : 'AttilaMagyar 4/17/2015 23:48',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '725' ],		#self : OmReference [ '726' ],		#time : DateAndTime [ '2017-07-29T14:12:23.609667+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'POST:',			#protocol : #'url mapping',			#sourceCode : 'POST: patternActionAssoc\r\tself \r\t\taddRouteMethod: (TeaMethodMatcher exactly: #POST) \r\t\tpattern: patternActionAssoc key \r\t\taction: patternActionAssoc value',			#stamp : 'AttilaMagyar 4/17/2015 23:48',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '726' ],		#self : OmReference [ '727' ],		#time : DateAndTime [ '2017-07-29T14:12:23.610426+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'PUT:',			#protocol : #'url mapping',			#sourceCode : 'PUT: patternActionAssoc\r\tself \r\t\taddRouteMethod: (TeaMethodMatcher exactly: #PUT) \r\t\tpattern: patternActionAssoc key \r\t\taction: patternActionAssoc value',			#stamp : 'AttilaMagyar 4/17/2015 23:48',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '727' ],		#self : OmReference [ '728' ],		#time : DateAndTime [ '2017-07-29T14:12:23.611181+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'TRACE:',			#protocol : #'url mapping',			#sourceCode : 'TRACE: patternActionAssoc\r\tself\r\t\taddRouteMethod: (TeaMethodMatcher exactly: #TRACE)\r\t\tpattern: patternActionAssoc key\r\t\taction: patternActionAssoc value',			#stamp : 'AttilaMagyar 4/17/2015 23:48',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '728' ],		#self : OmReference [ '729' ],		#time : DateAndTime [ '2017-07-29T14:12:23.611916+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'addRouteMethod:pattern:action:',			#protocol : #private,			#sourceCode : 'addRouteMethod: aTeaMethodMatcher pattern: pattern action: aTeaAction\r\tcurrent := dynamicRouter addRoute:\r\t\t(TeaRoute\r\t\t\tmatcher: (TeaRequestMatcher method: aTeaMethodMatcher url: pattern asTeaUrlPattern)\r\t\t\taction: aTeaAction\r\t\t\ttransformer: defaultOutput\r\t\t\tport: server port)',			#stamp : 'AttilaMagyar 11/8/2015 18:31',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '729' ],		#self : OmReference [ '730' ],		#time : DateAndTime [ '2017-07-29T14:12:23.612674+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'after:',			#protocol : #filters,			#sourceCode : 'after: patternActionAssoc\r\tcurrent := compositeRouter addAfterFilter:\t\t\r\t\t(TeaAfterFilter \r\t\t\turlPattern: patternActionAssoc key asTeaUrlPattern \r\t\t\taction: patternActionAssoc value)',			#stamp : 'AttilaMagyar 5/8/2015 19:17',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '730' ],		#self : OmReference [ '731' ],		#time : DateAndTime [ '2017-07-29T14:12:23.613476+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'any:',			#protocol : #'url mapping',			#sourceCode : 'any: patternActionAssoc\r\tself\r\t\taddRouteMethod: TeaMethodMatcher any\r\t\tpattern: patternActionAssoc key\r\t\taction: patternActionAssoc value',			#stamp : 'AttilaMagyar 4/18/2015 00:02',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '731' ],		#self : OmReference [ '732' ],		#time : DateAndTime [ '2017-07-29T14:12:23.615206+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'before:',			#protocol : #filters,			#sourceCode : 'before: patternActionAssoc\r\tcurrent := compositeRouter addBeforeFilter:\t\t\r\t\t(TeaBeforeFilter \r\t\t\turlPattern: patternActionAssoc key asTeaUrlPattern \r\t\t\taction: patternActionAssoc value)',			#stamp : 'AttilaMagyar 5/8/2015 19:17',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '732' ],		#self : OmReference [ '733' ],		#time : DateAndTime [ '2017-07-29T14:12:23.615957+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'exception:',			#protocol : #'url mapping',			#sourceCode : 'exception: anExceptionSetActionAssoc\r\tcurrent := compositeRouter addErrorHandler:\r\t\t(TeaErrorHandler\r\t\t\tfor: anExceptionSetActionAssoc key\r\t\t\taction: anExceptionSetActionAssoc value\r\t\t\tresponseTransformer: defaultOutput)',			#stamp : 'AttilaMagyar 5/8/2015 19:17',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '733' ],		#self : OmReference [ '734' ],		#time : DateAndTime [ '2017-07-29T14:12:23.616705+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'initializeOptions:',			#protocol : #initialization,			#sourceCode : 'initializeOptions: optionsAssociations\t\t\r\tdynamicRouter := TeaDynamicRouter new.\r\tstaticRouter := TeaStaticRouter new.\r\tcompositeRouter := TeaCompositeRouter routers: {dynamicRouter. staticRouter}.\t\r\tdefaultOutput := self responseTransformer: (optionsAssociations asDictionary at: #defaultOutput ifAbsent: #html).\t\t\t\t\t\t\t\t\t\r\tself exception: TeaAbort -> [ :abort :req | abort response teaTransform: [ :same | same ] request: req].\r\tserver := ZnServer defaultServerClass new.\r\tserver delegate: compositeRouter.\t\r\toptionsAssociations do: [ :each | server optionAt: each key put:  each value ].\t\r\t^ self',			#stamp : 'AttilaMagyar 10/13/2014 20:41',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '734' ],		#self : OmReference [ '735' ],		#time : DateAndTime [ '2017-07-29T14:12:23.617521+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'output:',			#protocol : #'url mapping',			#sourceCode : 'output: transformerBlockOrSymbol\r\tcurrent responseTransformer: (self responseTransformer: transformerBlockOrSymbol)\r\t',			#stamp : 'AttilaMagyar 5/8/2015 19:17',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '735' ],		#self : OmReference [ '736' ],		#time : DateAndTime [ '2017-07-29T14:12:23.618242+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'responseTransformer:',			#protocol : #private,			#sourceCode : 'responseTransformer: transformerBlockOrSymbol\r\t^ transformerBlockOrSymbol isSymbol\r\t\tifTrue: [ TeaOutput perform: transformerBlockOrSymbol ]\r\t\tifFalse: [ transformerBlockOrSymbol ]',			#stamp : 'AttilaMagyar 8/13/2014 20:51',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '736' ],		#self : OmReference [ '737' ],		#time : DateAndTime [ '2017-07-29T14:12:23.61897+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'serveStatic:from:',			#protocol : #'url mapping',			#sourceCode : 'serveStatic: urlPrefixString from: pathString\t\r\tstaticRouter urlPrefix: urlPrefixString path: pathString',			#stamp : 'AttilaMagyar 8/16/2014 18:38',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '737' ],		#self : OmReference [ '738' ],		#time : DateAndTime [ '2017-07-29T14:12:23.61971+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #server,			#protocol : #accessing,			#sourceCode : 'server\r\t^ server',			#stamp : 'AttilaMagyar 8/2/2014 20:56',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '738' ],		#self : OmReference [ '739' ],		#time : DateAndTime [ '2017-07-29T14:12:23.620421+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #start,			#protocol : #controlling,			#sourceCode : 'start\r\tserver start',			#stamp : 'AttilaMagyar 9/28/2014 18:14',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '739' ],		#self : OmReference [ '740' ],		#time : DateAndTime [ '2017-07-29T14:12:23.621186+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #stop,			#protocol : #controlling,			#sourceCode : 'stop\r\tserver stop',			#stamp : 'AttilaMagyar 8/13/2014 20:24',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '740' ],		#self : OmReference [ '741' ],		#time : DateAndTime [ '2017-07-29T14:12:23.622907+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'when:',			#protocol : #filters,			#sourceCode : 'when: aBlockClosure \r\tcurrent whenClause: aBlockClosure\r\t',			#stamp : 'AttilaMagyar 5/8/2015 19:17',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '741' ],		#self : OmReference [ '742' ],		#time : DateAndTime [ '2017-07-29T14:12:23.623887+09:00' ],		#trigger : OmReference [ '500' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Collection,				#isMetaSide : false			},			#name : #asTeaUrlPattern,			#protocol : #'*Teapot-Core',			#sourceCode : 'asTeaUrlPattern\r\t^ TeaUrlPatternSet fromCollection: self',			#stamp : 'AttilaMagyar 6/16/2015 18:26',			#package : #Teapot-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-07-29T14:12:23.735295+09:00' ],		#prior : OmReference [ '742' ],		#self : OmReference [ '743' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Teapot-Tools-TorstenBergmann.19'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '743' ],		#self : OmReference [ '744' ],		#time : DateAndTime [ '2017-07-29T14:12:23.876159+09:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'DynamicComposableModel',				#traitCompositionSource : '{}',				#definitionSource : 'DynamicComposableModel subclass: #TeaKeyValueList\r\tinstanceVariableNames: \'models\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaKeyValueList,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaKeyValueList,						#isMetaSide : false					},					#name : #models,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaKeyValueList class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaKeyValueList class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaKeyValueList,					#isMetaSide : false				},				#parent : @7,				#content : 'I\'m built up from a dynamically extensible list of other components.',				#stamp : 'AttilaMagyar 10/31/2015 16:20'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m built up from a dynamically extensible list of other components.',		#newStamp : 'AttilaMagyar 10/31/2015 16:20'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '744' ],		#self : OmReference [ '745' ],		#time : DateAndTime [ '2017-07-29T14:12:23.877373+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Teapot-Tools-UI-Components,		#affectedPackageName : #Teapot-Tools	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '745' ],		#self : OmReference [ '746' ],		#time : DateAndTime [ '2017-07-29T14:12:23.915656+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'DynamicComposableModel',				#traitCompositionSource : '{}',				#definitionSource : 'DynamicComposableModel subclass: #TeaKeyValueList\r\tinstanceVariableNames: \'models\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tools-UI-Components\''			},			#name : #TeaKeyValueList,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaKeyValueList,						#isMetaSide : false					},					#name : #models,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaKeyValueList class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaKeyValueList class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaKeyValueList,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m built up from a dynamically extensible list of other components.',				#stamp : 'AttilaMagyar 10/31/2015 16:20'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tools-UI-Components,			#package : #Teapot-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '746' ],		#self : OmReference [ '747' ],		#time : DateAndTime [ '2017-07-29T14:12:23.949532+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Cupboard\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Cupboard,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Cupboard class\r\tinstanceVariableNames: \'soleInstance icons\''				},				#name : #'Cupboard class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Cupboard class',							#isMetaSide : true						},						#name : #soleInstance,						#parent : @13					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Cupboard class',							#isMetaSide : true						},						#name : #icons,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Cupboard,					#isMetaSide : false				},				#parent : @8,				#content : 'A cupboad for teapots',				#stamp : 'TorstenBergmann 10/8/2015 21:36'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A cupboad for teapots',		#newStamp : 'TorstenBergmann 10/8/2015 21:36'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '747' ],		#self : OmReference [ '748' ],		#time : DateAndTime [ '2017-07-29T14:12:23.950713+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Teapot-Tools-UI,		#affectedPackageName : #Teapot-Tools	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '748' ],		#self : OmReference [ '749' ],		#time : DateAndTime [ '2017-07-29T14:12:23.952206+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Cupboard\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tools-UI\''			},			#name : #Cupboard,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Cupboard class\r\tinstanceVariableNames: \'soleInstance icons\''				},				#name : #'Cupboard class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Cupboard class',							#isMetaSide : true						},						#name : #soleInstance,						#parent : @13					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Cupboard class',							#isMetaSide : true						},						#name : #icons,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Cupboard,					#isMetaSide : false				},				#parent : @8,				#content : 'A cupboad for teapots',				#stamp : 'TorstenBergmann 10/8/2015 21:36'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tools-UI,			#package : #Teapot-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '749' ],		#self : OmReference [ '750' ],		#time : DateAndTime [ '2017-07-29T14:12:23.957057+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaIconProvider\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'IconCache\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaIconProvider,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaIconProvider class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaIconProvider class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaIconProvider,					#isMetaSide : false				},				#parent : @8,				#content : 'An icon provider for tools icons with an icon cache',				#stamp : 'TorstenBergmann 10/5/2016 21:57'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaIconProvider,						#isMetaSide : false					},					#name : #IconCache,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An icon provider for tools icons with an icon cache',		#newStamp : 'TorstenBergmann 10/5/2016 21:57'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '750' ],		#self : OmReference [ '751' ],		#time : DateAndTime [ '2017-07-29T14:12:23.958058+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Teapot-Tools-Utilities,		#affectedPackageName : #Teapot-Tools	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '751' ],		#self : OmReference [ '752' ],		#time : DateAndTime [ '2017-07-29T14:12:23.959374+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaIconProvider\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'IconCache\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tools-Utilities\''			},			#name : #TeaIconProvider,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaIconProvider class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaIconProvider class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaIconProvider,					#isMetaSide : false				},				#parent : @8,				#content : 'An icon provider for tools icons with an icon cache',				#stamp : 'TorstenBergmann 10/5/2016 21:57'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaIconProvider,						#isMetaSide : false					},					#name : #IconCache,					#parent : @8				}			],			#category : #Teapot-Tools-Utilities,			#package : #Teapot-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '752' ],		#self : OmReference [ '753' ],		#time : DateAndTime [ '2017-07-29T14:12:23.963407+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ComposableModel',				#traitCompositionSource : '{}',				#definitionSource : 'ComposableModel subclass: #TeaFormTab\r\tinstanceVariableNames: \'form addButton\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaFormTab,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaFormTab,						#isMetaSide : false					},					#name : #form,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaFormTab,						#isMetaSide : false					},					#name : #addButton,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaFormTab class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaFormTab class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaFormTab,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m built up from a dynamically extensible key value pair list (TeaKeyValueInput). I can represent POST parameters or HTTP headers for example.',				#stamp : 'AttilaMagyar 10/30/2015 19:47'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m built up from a dynamically extensible key value pair list (TeaKeyValueInput). I can represent POST parameters or HTTP headers for example.',		#newStamp : 'AttilaMagyar 10/30/2015 19:47'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '753' ],		#self : OmReference [ '754' ],		#time : DateAndTime [ '2017-07-29T14:12:23.964948+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ComposableModel',				#traitCompositionSource : '{}',				#definitionSource : 'ComposableModel subclass: #TeaFormTab\r\tinstanceVariableNames: \'form addButton\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tools-UI-Components\''			},			#name : #TeaFormTab,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaFormTab,						#isMetaSide : false					},					#name : #form,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaFormTab,						#isMetaSide : false					},					#name : #addButton,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaFormTab class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaFormTab class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaFormTab,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m built up from a dynamically extensible key value pair list (TeaKeyValueInput). I can represent POST parameters or HTTP headers for example.',				#stamp : 'AttilaMagyar 10/30/2015 19:47'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tools-UI-Components,			#package : #Teapot-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '754' ],		#self : OmReference [ '755' ],		#time : DateAndTime [ '2017-07-29T14:12:23.968282+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ComposableModel',				#traitCompositionSource : '{}',				#definitionSource : 'ComposableModel subclass: #TeaKeyValueInput\r\tinstanceVariableNames: \'keyInput valueInput removeButton\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaKeyValueInput,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaKeyValueInput,						#isMetaSide : false					},					#name : #keyInput,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaKeyValueInput,						#isMetaSide : false					},					#name : #valueInput,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaKeyValueInput,						#isMetaSide : false					},					#name : #removeButton,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaKeyValueInput class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaKeyValueInput class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaKeyValueInput,					#isMetaSide : false				},				#parent : @8,				#content : 'Two inputs and a remove button.',				#stamp : 'AttilaMagyar 10/30/2015 20:21'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Two inputs and a remove button.',		#newStamp : 'AttilaMagyar 10/30/2015 20:21'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '755' ],		#self : OmReference [ '756' ],		#time : DateAndTime [ '2017-07-29T14:12:23.969908+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ComposableModel',				#traitCompositionSource : '{}',				#definitionSource : 'ComposableModel subclass: #TeaKeyValueInput\r\tinstanceVariableNames: \'keyInput valueInput removeButton\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tools-UI-Components\''			},			#name : #TeaKeyValueInput,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaKeyValueInput,						#isMetaSide : false					},					#name : #keyInput,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaKeyValueInput,						#isMetaSide : false					},					#name : #valueInput,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaKeyValueInput,						#isMetaSide : false					},					#name : #removeButton,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaKeyValueInput class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaKeyValueInput class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaKeyValueInput,					#isMetaSide : false				},				#parent : @8,				#content : 'Two inputs and a remove button.',				#stamp : 'AttilaMagyar 10/30/2015 20:21'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tools-UI-Components,			#package : #Teapot-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '756' ],		#self : OmReference [ '757' ],		#time : DateAndTime [ '2017-07-29T14:12:23.974426+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ComposableModel',				#traitCompositionSource : '{}',				#definitionSource : 'ComposableModel subclass: #TeaRequestBodyTabs\r\tinstanceVariableNames: \'requestBody label raw form\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaRequestBodyTabs,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequestBodyTabs,						#isMetaSide : false					},					#name : #requestBody,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequestBodyTabs,						#isMetaSide : false					},					#name : #label,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequestBodyTabs,						#isMetaSide : false					},					#name : #raw,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequestBodyTabs,						#isMetaSide : false					},					#name : #form,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaRequestBodyTabs class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaRequestBodyTabs class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaRequestBodyTabs,					#isMetaSide : false				},				#parent : @8,				#content : 'I graphically represent a request body that can be viewed in multiple ways.',				#stamp : 'AttilaMagyar 10/30/2015 20:17'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I graphically represent a request body that can be viewed in multiple ways.',		#newStamp : 'AttilaMagyar 10/30/2015 20:17'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '757' ],		#self : OmReference [ '758' ],		#time : DateAndTime [ '2017-07-29T14:12:23.975953+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ComposableModel',				#traitCompositionSource : '{}',				#definitionSource : 'ComposableModel subclass: #TeaRequestBodyTabs\r\tinstanceVariableNames: \'requestBody label raw form\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tools-UI-Components\''			},			#name : #TeaRequestBodyTabs,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequestBodyTabs,						#isMetaSide : false					},					#name : #requestBody,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequestBodyTabs,						#isMetaSide : false					},					#name : #label,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequestBodyTabs,						#isMetaSide : false					},					#name : #raw,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeaRequestBodyTabs,						#isMetaSide : false					},					#name : #form,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaRequestBodyTabs class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaRequestBodyTabs class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaRequestBodyTabs,					#isMetaSide : false				},				#parent : @8,				#content : 'I graphically represent a request body that can be viewed in multiple ways.',				#stamp : 'AttilaMagyar 10/30/2015 20:17'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tools-UI-Components,			#package : #Teapot-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '758' ],		#self : OmReference [ '759' ],		#time : DateAndTime [ '2017-07-29T14:12:23.979468+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ComposableModel',				#traitCompositionSource : '{}',				#definitionSource : 'ComposableModel subclass: #Teaspoon\r\tinstanceVariableNames: \'urlInput contentTypeDropList contentTypeLabel methodDropList execButton requestBody consumer\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Teaspoon,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teaspoon,						#isMetaSide : false					},					#name : #urlInput,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teaspoon,						#isMetaSide : false					},					#name : #contentTypeDropList,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teaspoon,						#isMetaSide : false					},					#name : #contentTypeLabel,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teaspoon,						#isMetaSide : false					},					#name : #methodDropList,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teaspoon,						#isMetaSide : false					},					#name : #execButton,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teaspoon,						#isMetaSide : false					},					#name : #requestBody,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teaspoon,						#isMetaSide : false					},					#name : #consumer,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Teaspoon class\r\tinstanceVariableNames: \'\''				},				#name : #'Teaspoon class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Teaspoon,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide a graphical interface for quickly testing and excesising routes. Right click on a route in the inspector to open me.',				#stamp : 'AttilaMagyar 10/30/2015 19:33'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I provide a graphical interface for quickly testing and excesising routes. Right click on a route in the inspector to open me.',		#newStamp : 'AttilaMagyar 10/30/2015 19:33'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '759' ],		#self : OmReference [ '760' ],		#time : DateAndTime [ '2017-07-29T14:12:23.980908+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ComposableModel',				#traitCompositionSource : '{}',				#definitionSource : 'ComposableModel subclass: #Teaspoon\r\tinstanceVariableNames: \'urlInput contentTypeDropList contentTypeLabel methodDropList execButton requestBody consumer\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tools-UI\''			},			#name : #Teaspoon,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teaspoon,						#isMetaSide : false					},					#name : #urlInput,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teaspoon,						#isMetaSide : false					},					#name : #contentTypeDropList,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teaspoon,						#isMetaSide : false					},					#name : #contentTypeLabel,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teaspoon,						#isMetaSide : false					},					#name : #methodDropList,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teaspoon,						#isMetaSide : false					},					#name : #execButton,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teaspoon,						#isMetaSide : false					},					#name : #requestBody,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Teaspoon,						#isMetaSide : false					},					#name : #consumer,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Teaspoon class\r\tinstanceVariableNames: \'\''				},				#name : #'Teaspoon class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Teaspoon,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide a graphical interface for quickly testing and excesising routes. Right click on a route in the inspector to open me.',				#stamp : 'AttilaMagyar 10/30/2015 19:33'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tools-UI,			#package : #Teapot-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '760' ],		#self : OmReference [ '761' ],		#time : DateAndTime [ '2017-07-29T14:12:24.075108+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaKeyValueList class',				#isMetaSide : true			},			#name : #defaultSpec,			#protocol : #specs,			#sourceCode : 'defaultSpec\r\t^ SpecLayout composed',			#stamp : 'AttilaMagyar 10/31/2015 14:28',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '761' ],		#self : OmReference [ '762' ],		#time : DateAndTime [ '2017-07-29T14:12:24.076677+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaKeyValueList,				#isMetaSide : false			},			#name : #'addKey:value:',			#protocol : #protocol,			#sourceCode : 'addKey: keyString value: valueString\r\tself needFullRebuild: false.\t\r\tself buildWithSpecLayout: \r\t\t(self dynamicLayout: \r\t\t\t(self asAssociations copyWith: keyString -> valueString))',			#stamp : 'AttilaMagyar 10/31/2015 19:45',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '762' ],		#self : OmReference [ '763' ],		#time : DateAndTime [ '2017-07-29T14:12:24.077838+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaKeyValueList,				#isMetaSide : false			},			#name : #asAssociations,			#protocol : #private,			#sourceCode : 'asAssociations\r\t^ models collect: #asAssociation',			#stamp : 'AttilaMagyar 10/31/2015 19:42',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '763' ],		#self : OmReference [ '764' ],		#time : DateAndTime [ '2017-07-29T14:12:24.078768+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaKeyValueList,				#isMetaSide : false			},			#name : #'dynamicLayout:',			#protocol : #private,			#sourceCode : 'dynamicLayout: associations\r\tself focusOrder removeAll.\r\tmodels removeAll.\r\tself widgets removeAll.\r\t^ SpecLayout composed newColumn: [ :col |\r\t\t\tassociations doWithIndex: [:assoc :i | \r\t\t\t\t| inputName widget |\r\t\t\t\tinputName := (\'input\', i asString) asSymbol.\r\t\t\t\tself instantiateModels: {inputName.  #TeaKeyValueInput}.\r\t\t\t\twidget := self perform: inputName.\r\t\t\t\twidget\r\t\t\t\t\tsetKey: assoc key\r\t\t\t\t\tvalue: assoc value\r\t\t\t\t\tremoveAction: [ :me | self remove: me ].\r\t\t\t\tmodels add: widget.\r\t\t\t\tself focusOrder add: widget.\r\t\t\t\tcol \r\t\t\t\t\tnewRow: [ :row | row add: inputName ] ] ].\r\t\t',			#stamp : 'AttilaMagyar 10/31/2015 19:52',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '764' ],		#self : OmReference [ '765' ],		#time : DateAndTime [ '2017-07-29T14:12:24.079667+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaKeyValueList,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tmodels := OrderedCollection new.',			#stamp : 'AttilaMagyar 10/31/2015 19:32',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '765' ],		#self : OmReference [ '766' ],		#time : DateAndTime [ '2017-07-29T14:12:24.080409+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaKeyValueList,				#isMetaSide : false			},			#name : #items,			#protocol : #protocol,			#sourceCode : 'items\r\t^ self withoutDuplicatesAndBlanks: (self asAssociations asOrderedDictionary)',			#stamp : 'AttilaMagyar 10/31/2015 19:42',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '766' ],		#self : OmReference [ '767' ],		#time : DateAndTime [ '2017-07-29T14:12:24.08114+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaKeyValueList,				#isMetaSide : false			},			#name : #'items:',			#protocol : #protocol,			#sourceCode : 'items: keyedCollection\r\tself needFullRebuild: false.\r\tself buildWithSpecLayout: \r\t\t(self dynamicLayout: \r\t\t\t(self withoutDuplicatesAndBlanks: keyedCollection))',			#stamp : 'AttilaMagyar 10/31/2015 19:39',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '767' ],		#self : OmReference [ '768' ],		#time : DateAndTime [ '2017-07-29T14:12:24.081881+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaKeyValueList,				#isMetaSide : false			},			#name : #'remove:',			#protocol : #private,			#sourceCode : 'remove: model\r\tself needFullRebuild: false.\r\tmodels remove: model.\r\tself buildWithSpecLayout: (self dynamicLayout: self asAssociations)',			#stamp : 'AttilaMagyar 10/31/2015 19:42',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '768' ],		#self : OmReference [ '769' ],		#time : DateAndTime [ '2017-07-29T14:12:24.082711+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaKeyValueList,				#isMetaSide : false			},			#name : #'withoutDuplicatesAndBlanks:',			#protocol : #private,			#sourceCode : 'withoutDuplicatesAndBlanks: keyedCollection\r\t| keyset |\r\tkeyset := PluggableSet new\r\t\tequalBlock: [ :a :b | a key = b key ];\r\t\thashBlock: [ :x | x key hash ];\r\t\tyourself.\t\t\t\t\r\tkeyedCollection keysAndValuesDo: [ :key :value | \r\t\tkeyset add: (key -> value) ].\r\t^ keyset reject: [ :each | \r\t\teach key isEmptyOrNil or: [ each value isEmptyOrNil ] ]',			#stamp : 'AttilaMagyar 10/31/2015 19:38',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '769' ],		#self : OmReference [ '770' ],		#time : DateAndTime [ '2017-07-29T14:12:24.083676+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Cupboard class',				#isMetaSide : true			},			#name : #iconProvider,			#protocol : #accessing,			#sourceCode : 'iconProvider\r\r\t^TeaIconProvider',			#stamp : 'TorstenBergmann 10/5/2016 21:56',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '770' ],		#self : OmReference [ '771' ],		#time : DateAndTime [ '2017-07-29T14:12:24.086418+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Cupboard class',				#isMetaSide : true			},			#name : #'menuCommandOn:',			#protocol : #'world menu',			#sourceCode : 'menuCommandOn: aBuilder \r\t<worldMenu> \r\t\r\t(aBuilder item: #\'Teapot\')\t \r\t\thelp: \'Teatime\'; \r\t\tparent: #\'Tools\' translated;\r\t\ticon: self iconProvider teapotIcon;\r\t\taction: [ self soleInstance inspect ].\r\t aBuilder withSeparatorAfter ',			#stamp : 'TorstenBergmann 10/5/2016 21:55',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '771' ],		#self : OmReference [ '772' ],		#time : DateAndTime [ '2017-07-29T14:12:24.087293+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Cupboard class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\r\tself error: \'Do not create new instances - access using #soleInstance\'',			#stamp : 'TorstenBergmann 10/8/2015 21:37',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '772' ],		#self : OmReference [ '773' ],		#time : DateAndTime [ '2017-07-29T14:12:24.088069+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Cupboard class',				#isMetaSide : true			},			#name : #reset,			#protocol : #private,			#sourceCode : 'reset\r\t<script>\r\t\r\tsoleInstance := nil.\r\t ',			#stamp : 'TorstenBergmann 10/8/2015 21:38',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '773' ],		#self : OmReference [ '774' ],		#time : DateAndTime [ '2017-07-29T14:12:24.088791+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Cupboard class',				#isMetaSide : true			},			#name : #soleInstance,			#protocol : #accessing,			#sourceCode : 'soleInstance\r\t<script: \'self soleInstance inspect\'>\r\t\r\t^ soleInstance ifNil: [ soleInstance := self basicNew initialize ]',			#stamp : 'TorstenBergmann 10/8/2015 21:38',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '774' ],		#self : OmReference [ '775' ],		#time : DateAndTime [ '2017-07-29T14:12:24.089603+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Cupboard,				#isMetaSide : false			},			#name : #'gtInspectorTeapotsIn:',			#protocol : #inspecting,			#sourceCode : 'gtInspectorTeapotsIn: composite\r\t<gtInspectorPresentationOrder: 0>  \r\t\r\t^(composite list)\r\t\ttitle: \'Teapots\';\r\t\ticon: [:each | self iconForTeapot: each ];\r\t\tdisplay: [ self teapots ]; \r\t\tformat: [:each | self nameForTeapot: each ];\r\t\tselectionAct:  [:each | each selection ifNotNil: [ each selection start ]. each update ] icon: self iconProvider teapotServerStartIcon entitled: \'Start\';\r\t\tselectionAct: [:each | each selection ifNotNil: [ each selection stop ]. each update ] icon: self iconProvider teapotServerStopIcon entitled: \'Stop\';\r\t\tact: [:each | self onNewServer. each update ] icon: self iconProvider teapotServerIcon entitled: \'New Teapot\';\r\t\tact: [:each | self onNewStaticServer. each update ] icon: self iconProvider teapotServerStaticIcon entitled: \'New Teapot (serving static)\'\r\t\t',			#stamp : 'TorstenBergmann 10/5/2016 22:05',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '775' ],		#self : OmReference [ '776' ],		#time : DateAndTime [ '2017-07-29T14:12:24.09054+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Cupboard,				#isMetaSide : false			},			#name : #'iconForTeapot:',			#protocol : #private,			#sourceCode : 'iconForTeapot: aTeapot\r\t^aTeapot server isRunning \r\t\t\tifTrue: [ self iconProvider teapotServerStartIcon ] \r\t\t\tifFalse: [ self iconProvider teapotServerStopIcon ]',			#stamp : 'TorstenBergmann 10/5/2016 21:57',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '776' ],		#self : OmReference [ '777' ],		#time : DateAndTime [ '2017-07-29T14:12:24.091263+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Cupboard,				#isMetaSide : false			},			#name : #iconProvider,			#protocol : #accessing,			#sourceCode : 'iconProvider\r\r\t^self class iconProvider',			#stamp : 'TorstenBergmann 10/5/2016 21:56',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '777' ],		#self : OmReference [ '778' ],		#time : DateAndTime [ '2017-07-29T14:12:24.091975+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Cupboard,				#isMetaSide : false			},			#name : #'nameForTeapot:',			#protocol : #private,			#sourceCode : 'nameForTeapot: aTeapot\r\t^String streamContents: [:stream |\r\t\tstream nextPutAll: aTeapot server port asString.\r\t\tstream nextPutAll: \' - \'.\r\t\tstream nextPutAll: (aTeapot server isRunning ifTrue: [ \'running\' ] ifFalse: [ \'stopped\' ]) ].\r',			#stamp : 'TorstenBergmann 10/8/2015 21:39',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '778' ],		#self : OmReference [ '779' ],		#time : DateAndTime [ '2017-07-29T14:12:24.092745+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Cupboard,				#isMetaSide : false			},			#name : #onNewServer,			#protocol : #actions,			#sourceCode : 'onNewServer\r\t|port pot |\r\tport := UIManager default request: \'New server\' initialAnswer: \'80\'.\r\tport ifNil: [ ^self ].\r\tpot := Teapot configure: { \r\t\t#port -> port asNumber\r\t}.\r\tpot start\r\t\r\t\t\r',			#stamp : 'TorstenBergmann 10/5/2016 21:33',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '779' ],		#self : OmReference [ '780' ],		#time : DateAndTime [ '2017-07-29T14:12:24.095362+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Cupboard,				#isMetaSide : false			},			#name : #onNewStaticServer,			#protocol : #actions,			#sourceCode : 'onNewStaticServer\r\t|port directory pot |\r\tport := UIManager default request: \'New server\' initialAnswer: \'80\'.\r\tport ifNil: [ ^self ].\r\tdirectory := UIManager default chooseDirectory: \'Serve directory\'.\r\tdirectory ifNil: [ ^self ].\r\tpot := Teapot configure: { \r\t\t#port -> port asNumber\r\t}.\r\tpot serveStatic: \'/\' from: directory.\r\tpot start\r\t\r\t\t\r',			#stamp : 'TorstenBergmann 10/5/2016 21:33',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '780' ],		#self : OmReference [ '781' ],		#time : DateAndTime [ '2017-07-29T14:12:24.096249+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Cupboard,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\taStream nextPutAll: \'Cupboard\'',			#stamp : 'TorstenBergmann 10/8/2015 21:39',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '781' ],		#self : OmReference [ '782' ],		#time : DateAndTime [ '2017-07-29T14:12:24.097+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Cupboard,				#isMetaSide : false			},			#name : #teapots,			#protocol : #accessing,			#sourceCode : 'teapots\r\r\t^Teapot allInstances',			#stamp : 'TorstenBergmann 10/12/2015 09:38',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '782' ],		#self : OmReference [ '783' ],		#time : DateAndTime [ '2017-07-29T14:12:24.097798+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaIconProvider class',				#isMetaSide : true			},			#name : #icons,			#protocol : #accessing,			#sourceCode : 'icons\r\r\tIconCache ifNil: [ IconCache := Dictionary new ].\r\t^IconCache',			#stamp : 'TorstenBergmann 10/5/2016 21:55',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '783' ],		#self : OmReference [ '784' ],		#time : DateAndTime [ '2017-07-29T14:12:24.098632+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaIconProvider class',				#isMetaSide : true			},			#name : #teapotIcon,			#protocol : #icons,			#sourceCode : 'teapotIcon\r\r\t^ self icons\r\t\t\tat: #\'teapotIcon\'\r\t\t\tifAbsentPut: [ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self teapotIconContents readStream) ].',			#stamp : 'TorstenBergmann 10/5/2016 21:52',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '784' ],		#self : OmReference [ '785' ],		#time : DateAndTime [ '2017-07-29T14:12:24.099458+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaIconProvider class',				#isMetaSide : true			},			#name : #teapotIconContents,			#protocol : #'private - icons',			#sourceCode : 'teapotIconContents\r\r\t^\'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABhklEQVR42rWSPSxDURTHzzmv\rr8TyRBP00Y1BQiwiRD+YkKiPyWqTSDAZjUaj2SyS0lbEpNWPRCTEYBeNKrv4qN57nFYiPoqX\rNM7Nzcs799zf/Z//vQg1Bv4rIO4LdDCgF5FPwrn0s2PAdmsf1RkNvbK6KbMLGGaR4SCcTz19\rA0S8A3NkGo/TuexWORG1A/2MvE9EHuQ3PsuQeFFcWjXQtaEVjpHBzZLexj07cK4Je1jTKBn6\rkhmzCNzyJo7h41dAD8z6FJEs+TuT1hijdnAICdJS8ShFRSlv/Ms4Zp6ZzKd2Y75gBqM+v9Do\rChgt587zsrtObRSLdFFpMm4Hk0AQcgpw89N6CdyHCnGtAthp93e6gI6l0yZ08DTEi1NibSmC\rpffqeFvILF+C3MD47/LFK8Y9MNRiOJe5+3RczDviYXpJisvdP+wXo2FCVCbC10dc9SHF7eF6\rQD2vUC8Qkkf0uiT9wFon5OSVqUL65oui6hGxBy3TMMsAU+Y9Ki5M3KZ1lZZqi5oBr2z5j75R\rN5raAAAAAElFTkSuQmCC\'',			#stamp : 'TorstenBergmann 10/5/2016 21:52',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '785' ],		#self : OmReference [ '786' ],		#time : DateAndTime [ '2017-07-29T14:12:24.100179+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaIconProvider class',				#isMetaSide : true			},			#name : #teapotServerIcon,			#protocol : #icons,			#sourceCode : 'teapotServerIcon\r\r\t^ self icons\r\t\t\tat: #\'teapotServerIcon\'\r\t\t\tifAbsentPut: [ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self teapotServerIconContents readStream) ].',			#stamp : 'TorstenBergmann 10/5/2016 21:52',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '786' ],		#self : OmReference [ '787' ],		#time : DateAndTime [ '2017-07-29T14:12:24.100998+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaIconProvider class',				#isMetaSide : true			},			#name : #teapotServerIconContents,			#protocol : #'private - icons',			#sourceCode : 'teapotServerIconContents\r\r\t^\'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAC0UlEQVR4Xo2SbU+SURzG+RS2\rhDdufQBtM0e58GHa8o2W3mbWkjbLhzURTTNEHnwowNKG2oM6JUWF2+fHTJ2aJaFCPlAzJygG\rOMPM8qF8wqtbXli2rK7t2v7n7Fy/c8520fbk4nKEkZkpIUViKckXSEj9qBEjehNG3kxDILxL\renoyCVdXVwbtMHl7s4hJ4ypsi1uUHbDad2Fz2kGtd2G2bWBIZ0Jz6wvLHtDL69RBIIvlS2hG\rFqEbW4FhcgWmuU0YzduYNu9QswOmDw7MWhwUaAe2Tw7M29dxIyGV3Af4+voR3X1mDAwuoLd/\rHl09c9Q8D/34MgVcxYz1O+yft2Ff3sTYWxvKK/oRxU44CGhpe4/Orlm0tk+joWkS6toJ1KhH\roax5jdLyPsgLn0GUrUZMnBTnw64jPj7lIEBNjqK+8R1U5DiU1XqUP9WitGwQfEEJMgRS5D8o\rhrJKjampKQhF9+HjG8j9BeBPlCk0qFDqUKbQ4knJSzwsom6Vd1N/lcJgMGBraxvf1jfw5es6\r4mJvwfMEk9gHBAaeIeQFXXhcPIDCwl7k5z9HrqwDUkkL2Ox0aLXDWFvbwsLCMmZm7QgJYeNs\rUNBPgLu7B1MirUdeXidk0nbkZDdBLKqjXIuIiBS0tXXBal2C0bSEVxoTgoOjQGfQD/YiLU1M\rioQqZ1AoUEOQoYZISCI8PBnVNc2YMFiocpnR1jEM9lUO/lioa9FJZDqvygnYsxNwIQmKikYq\rbMGAZgbquh4kcsU4tJUyWYklg6/aBxDhXBQ9UkE3/hGDQzNIThUg5BxbcyjgKFVRHk9uEWSo\rnIAwgoukm3eo0CW4uR1DQEAktRdN0v4md4/jTA4n17L3ipjYe2D5ROK0z0VcTuSBL6zElajY\rPNq/5OcfQGRlKZHAKaLal4/bPAXkBa3IypZr6HQ6g/Y/8vI6SVRW9qChUYPsnCJNaGgE9/cz\rPwCyhvLlWzqQAwAAAABJRU5ErkJggg==\'',			#stamp : 'TorstenBergmann 10/5/2016 21:52',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '787' ],		#self : OmReference [ '788' ],		#time : DateAndTime [ '2017-07-29T14:12:24.10176+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaIconProvider class',				#isMetaSide : true			},			#name : #teapotServerStartIcon,			#protocol : #icons,			#sourceCode : 'teapotServerStartIcon\r\r\t^ self icons\r\t\t\tat: #\'teapotServerStartIcon\'\r\t\t\tifAbsentPut: [ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self teapotServerStartIconContents readStream) ].',			#stamp : 'TorstenBergmann 10/5/2016 21:52',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '788' ],		#self : OmReference [ '789' ],		#time : DateAndTime [ '2017-07-29T14:12:24.102575+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaIconProvider class',				#isMetaSide : true			},			#name : #teapotServerStartIconContents,			#protocol : #'private - icons',			#sourceCode : 'teapotServerStartIconContents\r\r\t^\'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAADR0lEQVR4Xn2T71fTZRyG+S80\r4RV56k3Hc6jciTpHICnNOnVYfCWhCZiiCAxGlEbbhCg2TjQdIYlCwWIIU0crDhAiiOA8xL6B\r4kFqG7+22QYRHCL5Nbia7ByOnNPpc859zvPmup7nOef+hDw5JzOydQWfaU0qtdYkDjro/9VJ\rv2in8lKdVaMtNUkkksiQ/xtr3ygu3yqe6TU8U4+zHjgHM/FwmT5xFMtP3S71GY1JocjT7dgR\rGrZF0NH1O+LdBe7en8c+tohzfBXHmB/HhB/n5BpjrkA8fh4GLnB7/0aRm2/aImhpG6LH6qOz\r20N7xwQ3ezzYBv/i3vBCAF7CN7PK1NwyA0Muqr69wcmMj7cKmiw22q6P09xip8nyANPVIeob\rBqhv/IXq7zopK2+l4PNG0k5oiBfSSUxM1W0RNDRaMf8wTOOVe9TVi9QY+rhY1UthkQGlUsPZ\rc5UYjSbsdgenPikmIkIibMK7JS9G5p0vIfF8Dqll+ZRUmKmouIlef52c3HOINhsrKys8+meZ\r2dkFUlKziY19LSiQ7JUIh5vep2SgmNbJFgy/1XC09SgHNXI0xRbSjmvo6uxiIQB7vbPYHX8g\rlaYSFxcnhGx7altYglmgxl5Ns+tHFlcfMTI3TJ2zluzeLA4pPyLlSCENDddwu2dwOP+kq/tB\r4P/pbNwe/UGU7thtGbXOSuaX51hfX9+IdfoW+pESdpdHkpx6hksXjQzdn6TfNo7Z0kumXBUU\rPK/YZZKLR5ha9G7Cj+Nf82NxX+E5YziyFCXlFbXYRDc9t0epu9yCUlUaFLycJzEliq9TMfkF\r7TPmALyGb9nDhUkN6hE5uy4/TVLyp3xZWoU46KM30FZ5zile3SsNdkCaJdW9eecF0u1vUT+t\r3xC4lhx86BQ4OPgKMd/EIktWkZmlJu5dGeHhO9m3T4bscEZQEBoWGpbbeZwi1zF+nq8LvmBl\rgq+8uSTciiFNpSUzs4zomCT2RL9HUk4+6oLv2f/GO4rNDhx4+4CQcTXFVTRygralKmqnNMit\rhyisLrBqtUYUiguB9p3ldH4N+q+bAxU+bfrPbYzaHyVsj9guPBv5jCB5Kbi6UXtiBIOhnWvm\rO3TcsBEfn6B4kvkXxV9YN+ClYBQAAAAASUVORK5CYII=\'',			#stamp : 'TorstenBergmann 10/5/2016 21:52',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '789' ],		#self : OmReference [ '790' ],		#time : DateAndTime [ '2017-07-29T14:12:24.105048+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaIconProvider class',				#isMetaSide : true			},			#name : #teapotServerStaticIcon,			#protocol : #icons,			#sourceCode : 'teapotServerStaticIcon\r\r\t^ self icons\r\t\t\tat: #\'teapotServerStaticIcon\'\r\t\t\tifAbsentPut: [ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self teapotServerStaticIconContents readStream) ].',			#stamp : 'TorstenBergmann 10/5/2016 22:05',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '790' ],		#self : OmReference [ '791' ],		#time : DateAndTime [ '2017-07-29T14:12:24.105928+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaIconProvider class',				#isMetaSide : true			},			#name : #teapotServerStaticIconContents,			#protocol : #'private - icons',			#sourceCode : 'teapotServerStaticIconContents\r\r\t^\'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAADIElEQVR42l2Ta0gUURTH/1fH\rWVNz2dLNIinQ0shAKCsSixIp7EMQ7VKbH8SICopo6UFaiBqZBm5R1Bc1i7ZwJw1DlzbQfKTr\r9rA+aGX2MFbbNsu21Np259Gdcczwwsw5c+85vzn/e+8hoCM0NHThjh07KySJQBAl5BcUGUSR\rAEREWWkh19Ls4H788DkFQRjCjEHkV0xMrKGj+70tWquRcZBBygIkGkEQDATg9Qyjr/f5kL2p\r3vmw5QHn831XgEpcbKze0GDvs7FhGmgoIyJCQyEhNJ0ghBDlNyGyCZEQpqFw0Y+8XBN3395g\rVAB6vd5grX1s07Dh4IMieD6I8FlhiIyaBZZlEDmbQVQEo0j6NPwVz3sGcL26nGtttU8DKqvb\rbSyrQTDIq08QoijQPfHD7/fj14Qfo76f8AwPYmTkHSbGPnMOx71pwKXLDhsTxirJPD8JoBox\rOPiSKhjFnDk6KlWLtFWpuHW7EdVVl8xu96BFBcwznCu/a2MYdjo5QEECjzdve7BvbzaSkpKp\rPAEBXsDJE8WotVUaR0e/cQogLi7OkF9ww8Zq6B4EJgFysCjyePXahf37tyElJRXj4xP49TsI\r85HjcLkcRo/Hw5HVaQlRSUv0pdu3rj/IIAj30E/09Osxf8EKMAxDAY+Rk5OF1NSV8P8BPnt9\rOF9WjMamm/ECT48xL3fzoePmLSW6CEYLegISL6HD9RFdL3jodDqMfHEjOTke0XOTkLw8HV7v\rF9zhrKi5dlGpnpwpybHmH0s3EZ5+C/Tq8HRSkFQ7OQfqV9S+QtrGw/B8eg9nZycuWApVQNFu\ra8HRDJMcJKnBRJj0CfX/Abh+rM06hPq6Gjx1PXO2tTWtUwAlhbsoYINJDpbUBKLCiJoszx04\rWwfHow9ITFyNsXEv1+1sNiqA4tNG6ynzRhNouUSYgkhqJdMS9pzhEIhbg8XaZXDYr1qePOky\rK4CiUwbr6SOZJjJTgmqnAEevtGJRym709j50VlVeNE51Jtm0IcWcmbE0WxLpCdBWlgQRoFdY\r9sfG/PqYeQkr5IZqfzrg7n/nsQwM9Fv+b+e/lwaeIIipiHQAAAAASUVORK5CYII=\'',			#stamp : 'TorstenBergmann 10/5/2016 22:05',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '791' ],		#self : OmReference [ '792' ],		#time : DateAndTime [ '2017-07-29T14:12:24.106746+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaIconProvider class',				#isMetaSide : true			},			#name : #teapotServerStopIcon,			#protocol : #icons,			#sourceCode : 'teapotServerStopIcon\r\r\t^ self icons\r\t\t\tat: #\'teapotServerStopIcon\'\r\t\t\tifAbsentPut: [ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self teapotServerStopIconContents readStream) ].',			#stamp : 'TorstenBergmann 10/5/2016 21:52',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '792' ],		#self : OmReference [ '793' ],		#time : DateAndTime [ '2017-07-29T14:12:24.107507+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaIconProvider class',				#isMetaSide : true			},			#name : #teapotServerStopIconContents,			#protocol : #'private - icons',			#sourceCode : 'teapotServerStopIconContents\r\r\t^\'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAADO0lEQVR4Xn2T7U+TVxiH+xds\rGfso0Q+Gbh+UBYFEsjeSzS6yKWDWdKyMurEXytDyVsfcKHRtFKdWRFyljxoiVbEoq3vxPVM2\rqKwd5XXZYK30BYotuEXWQaSUa8/GdDZLdidX7i/nvk7OOb8jebhK399uqtfvsdXqGmx9A15c\rbi9Ot4cWi9VRUrLNtGnTZrnk/6q710swHCM0vchkeInJyH3iTIQX+WHAj6vPw8e1u2ylpRrT\runXpWQmCq9+M4h6KMjByl7HxOby+RTzjcbx+kcAStwJxxicWRVmc8K/3uHSlhwTB1xeH+c4R\r4XpXiCvXAlz/Nige4w6DI7/j8c8zNR1j5m6MUe805+xOzC32REGn3cXlq36+uuDh8/M/Yzs7\rzKn2fto7XAitN2g+chljQwea8kMoCspQKsscCYJT7T102n/iTMcQJ0+7aT3hRDjWw8HmC2zb\rvpP9piMcP96G0+nCaj1NXv5W24PhZLGExjO06Fux7LdjOdrNZ+YbHGy6hmFXO21tVhYWYszP\r32N2do69ew/xVrFmWaDKzatoK1IFbxoM/GhpoddoxKpS0/CBwO7dX1Dz4TGaD5uZm1sgEpkl\rEJihvEJHdfVHNsnG7Gz5RaUSryA84NY/vXOLAl25mR07BOrqDExMzuAL/IZ78DbKwjLS0jLl\rEqtCERyqqmasvp5fHmJUZKSmhk8zXxJ3sqDV1jI8EqSv3ye+zCQvv1LIixtkcok9dS1Rv49Y\rNCryR0JfiM5yMvNpqkSBpnwn/YMhurq99Nz0kpPzOiuSVyRLvpRKmQuFiC/F/0s8ztn09VRW\rmSlRa+l1BcWQ3WHPvhaKVGXLGegqKGAsO5tg7mZuFxYSURUxVfgGvtw8RmUyhLTnqKg0o3jt\rXd4s1iBNeZL1WTL0emFZ8Iw0Rf79Y0kEVq4kLBJZtYopsY+LOB55FJ2qXrwDgRc2bOXZ5xW8\rqq5AU3kYXd2Bf0O0JUVaMZiRQTQ3l/miImbz8xlIz0AoUTuamjqo1gq8856JKu1R9h04T2Oj\rNZia+lTiR0p9Qppl3JhjM65ZYzPIZLa1q1f/vSAp6fHkE9ZLdJzrRv9Jk6P4bbXpr9Ddn/sT\rU0VgFvyaFxkAAAAASUVORK5CYII=\'',			#stamp : 'TorstenBergmann 10/5/2016 21:52',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '793' ],		#self : OmReference [ '794' ],		#time : DateAndTime [ '2017-07-29T14:12:24.108229+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaIconProvider class',				#isMetaSide : true			},			#name : #teaspoonIcon,			#protocol : #icons,			#sourceCode : 'teaspoonIcon\r\r\t^ self icons\r\t\t\tat: #\'teaspoonIcon\'\r\t\t\tifAbsentPut: [ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self teaspoonIconContents readStream) ].',			#stamp : 'TorstenBergmann 10/5/2016 21:53',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '794' ],		#self : OmReference [ '795' ],		#time : DateAndTime [ '2017-07-29T14:12:24.109013+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaIconProvider class',				#isMetaSide : true			},			#name : #teaspoonIconContents,			#protocol : #'private - icons',			#sourceCode : 'teaspoonIconContents\r\r\t^\'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABdklEQVR42mNkoBAwgoiJs6fL\rvHv/oe/d27cM6urqTxQVFfq8HV2fEG1AQ1f7qlevX4XCBDk5OBnExcWLynLy+4kyIK+idNWf\rv39C0SUNDQz7U6PjiggaMG3+3L4r164UokvycPMwdDU0MxI0YNfhgzK7du96/O37NwwFCfEJ\rYWY6+qvxGgACPdMmF967f68PXYG8nHxYeW4BYQNAYM6yxX23bt0q/PL1C1xMVFRsdWNZZRhR\rBsDA8YtnQw8ePMTw8+fP0JevXoby8vCu7qxvCiPaAGRQ2dyw6uOnj6FArzzR09Oz9LR3ekKS\rASDQNWXi4wcPH8hwc3E/YefgsGyprHlCkgGgWNqzd89xYNjIMDMxP2FkZLSc1NH9hGgDQKCu\ro1Xm/fv3x//++yvDyMD4hIWV1XJiW+cTog0AAWCKlfn79+/x/wz/ZZiZmZ+oKCtbkmQACORX\rlcv8//fvODDpy0hJSh0n2QAQmDx3lsynT59W/fnz5wkA2dSUkQj2i7UAAAAASUVORK5CYII=\'',			#stamp : 'TorstenBergmann 10/5/2016 21:51',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '795' ],		#self : OmReference [ '796' ],		#time : DateAndTime [ '2017-07-29T14:12:24.109873+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaMethodMatcher,				#isMetaSide : false			},			#name : #asString,			#protocol : #'*Teapot-Tools',			#sourceCode : 'asString\r\t^ name',			#stamp : 'AttilaMagyar 10/25/2015 18:06',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '796' ],		#self : OmReference [ '797' ],		#time : DateAndTime [ '2017-07-29T14:12:24.110696+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRoute,				#isMetaSide : false			},			#name : #'gtInspectorRouteIn:',			#protocol : #'*Teapot-Tools',			#sourceCode : 'gtInspectorRouteIn: composite\r\t<gtInspectorPresentationOrder: 80>\r\t| presentation |\r\tpresentation := composite morph.\r\tpresentation\r\t\ttitle: \'Teaspoon\';\r\t\tdisplay: \r\t\t\t[ | teaspoon |\r\t\t\t\tteaspoon := Teaspoon new \r\t\t\t\t\tmethod: requestMatcher methodMatcher asString\r\t\t\t\t\turl: requestMatcher urlPattern asTeaspoonPath\r\t\t\t\t\tport: port.\r\t\t\t\tteaspoon onHttpResultDo: [ :result | presentation selection: result ].\r\t\t\t\tteaspoon buildWithSpec ]',			#stamp : 'AttilaMagyar 11/8/2015 19:02',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '797' ],		#self : OmReference [ '798' ],		#time : DateAndTime [ '2017-07-29T14:12:24.11149+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternSet,				#isMetaSide : false			},			#name : #asRequestBuilderPath,			#protocol : #'*Teapot-Tools',			#sourceCode : 'asRequestBuilderPath\r\t^ patterns \r\t\tifEmpty: [ \'/\' ]\r\t\tifNotEmpty: [ patterns first asTeaspoonPath ]',			#stamp : 'AttilaMagyar 11/8/2015 18:25',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '798' ],		#self : OmReference [ '799' ],		#time : DateAndTime [ '2017-07-29T14:12:24.112195+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternSet,				#isMetaSide : false			},			#name : #asTeaspoonPath,			#protocol : #'*Teapot-Tools',			#sourceCode : 'asTeaspoonPath\r\t^ patterns \r\t\tifEmpty: [ \'/\' ]\r\t\tifNotEmpty: [ patterns first asTeaspoonPath ]',			#stamp : 'AttilaMagyar 11/8/2015 18:25',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '799' ],		#self : OmReference [ '800' ],		#time : DateAndTime [ '2017-07-29T14:12:24.114861+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'gtInspectorDynamicRoutesIn:',			#protocol : #'*Teapot-Tools',			#sourceCode : 'gtInspectorDynamicRoutesIn: composite\r\t<gtInspectorPresentationOrder: 0>  \r\t\r\t^(composite list)\r\t\ttitle: [\'Dynamic routes\' translated];\t\t \r\t\tdisplay: [ dynamicRouter routes ]; \r\t\tformat: [:each | each printString ];\r\t\tselectionAct: [:p | p entity removeDynamicRoute: p selection. \r\t\t\tp pane browser update ] entitled: \'Remove route\' translated;\r\t\tselectionAct: [:p | p entity removeAllDynamicRoutes. \r\t\t\tp pane browser update ] entitled: \'Remove all\' translated',			#stamp : 'TorstenBergmann 10/7/2016 23:02',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '800' ],		#self : OmReference [ '801' ],		#time : DateAndTime [ '2017-07-29T14:12:24.115823+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #removeAllDynamicRoutes,			#protocol : #'*Teapot-Tools',			#sourceCode : 'removeAllDynamicRoutes \r\tdynamicRouter routes removeAll',			#stamp : 'TorstenBergmann 10/7/2016 23:01',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '801' ],		#self : OmReference [ '802' ],		#time : DateAndTime [ '2017-07-29T14:12:24.116509+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teapot,				#isMetaSide : false			},			#name : #'removeDynamicRoute:',			#protocol : #'*Teapot-Tools',			#sourceCode : 'removeDynamicRoute: aRoute\r\r\tdynamicRouter routes remove: aRoute',			#stamp : 'TorstenBergmann 10/5/2016 20:59',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '802' ],		#self : OmReference [ '803' ],		#time : DateAndTime [ '2017-07-29T14:12:24.117327+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaFormTab class',				#isMetaSide : true			},			#name : #defaultSpec,			#protocol : #specs,			#sourceCode : 'defaultSpec\r\t^ SpecLayout composed\r\t\tnewColumn: [ :col |\r\t\t\tcol \r\t\t\t\tadd: #form;\r\t\t\t\tadd: #addButton height: self buttonHeight ]',			#stamp : 'AttilaMagyar 10/26/2015 21:14',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '803' ],		#self : OmReference [ '804' ],		#time : DateAndTime [ '2017-07-29T14:12:24.118107+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaFormTab,				#isMetaSide : false			},			#name : #addButton,			#protocol : #accessing,			#sourceCode : 'addButton\r\t^ addButton ',			#stamp : 'AttilaMagyar 10/26/2015 21:13',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '804' ],		#self : OmReference [ '805' ],		#time : DateAndTime [ '2017-07-29T14:12:24.11887+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaFormTab,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^ form',			#stamp : 'AttilaMagyar 10/25/2015 20:16',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '805' ],		#self : OmReference [ '806' ],		#time : DateAndTime [ '2017-07-29T14:12:24.119613+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaFormTab,				#isMetaSide : false			},			#name : #initializePresenter,			#protocol : #initialization,			#sourceCode : 'initializePresenter\r\taddButton whenActionPerformedDo: [ form addKey: \'\' value: \'\' ]',			#stamp : 'AttilaMagyar 10/31/2015 19:45',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '806' ],		#self : OmReference [ '807' ],		#time : DateAndTime [ '2017-07-29T14:12:24.120356+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaFormTab,				#isMetaSide : false			},			#name : #initializeWidgets,			#protocol : #initialization,			#sourceCode : 'initializeWidgets\r\taddButton := self newButton label: \'Add parameter\'; yourself.\r\tform := self instantiate: TeaKeyValueList.\r\tself focusOrder \r\t\tadd: form;\r\t\tadd: addButton.',			#stamp : 'AttilaMagyar 10/31/2015 19:44',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '807' ],		#self : OmReference [ '808' ],		#time : DateAndTime [ '2017-07-29T14:12:24.121093+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaFormTab,				#isMetaSide : false			},			#name : #'updateKeyValus:',			#protocol : #protocol,			#sourceCode : 'updateKeyValus: keyValueCollection\r\tform items: keyValueCollection',			#stamp : 'AttilaMagyar 10/31/2015 16:30',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '808' ],		#self : OmReference [ '809' ],		#time : DateAndTime [ '2017-07-29T14:12:24.123629+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaFormTab,				#isMetaSide : false			},			#name : #urlEncoded,			#protocol : #private,			#sourceCode : 'urlEncoded\r\t| url formParams |\r\turl := \'/\' asZnUrl.\r\tformParams := form items.\r\tformParams ifEmpty: [ ^ \'\' ].\r\tformParams do: [ :association | url := url withQuery: association ].\r\t^ url asString allButFirst: 2\r\t',			#stamp : 'AttilaMagyar 10/31/2015 17:42',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '809' ],		#self : OmReference [ '810' ],		#time : DateAndTime [ '2017-07-29T14:12:24.124517+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaFormTab,				#isMetaSide : false			},			#name : #'writeUrlEncodedTo:',			#protocol : #protocol,			#sourceCode : 'writeUrlEncodedTo: aTextModel\r\tself urlEncoded \r\t\tifNotEmpty: [ aTextModel text: self urlEncoded ]',			#stamp : 'AttilaMagyar 11/1/2015 21:00',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '810' ],		#self : OmReference [ '811' ],		#time : DateAndTime [ '2017-07-29T14:12:24.125368+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaKeyValueInput class',				#isMetaSide : true			},			#name : #defaultSpec,			#protocol : #specs,			#sourceCode : 'defaultSpec\r\t^ SpecLayout composed\r\t\tnewRow: [ :row |\r\t\t\trow\r\t\t\t\tadd: #keyInput;\r\t\t\t\tadd: #valueInput;\r\t\t\t\tadd: #removeButton ]\r\t\t height: self height',			#stamp : 'AttilaMagyar 10/25/2015 22:37',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '811' ],		#self : OmReference [ '812' ],		#time : DateAndTime [ '2017-07-29T14:12:24.126205+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaKeyValueInput class',				#isMetaSide : true			},			#name : #height,			#protocol : #accessing,			#sourceCode : 'height\r\t^ self inputTextHeight max: self buttonHeight',			#stamp : 'AttilaMagyar 10/25/2015 22:38',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '812' ],		#self : OmReference [ '813' ],		#time : DateAndTime [ '2017-07-29T14:12:24.127039+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaKeyValueInput class',				#isMetaSide : true			},			#name : #'key:value:removeAction:',			#protocol : #'instance creation',			#sourceCode : 'key: keyString value: valueString removeAction: aBlock\r\t^ self new\r\t\tsetKey: keyString \r\t\tvalue: valueString\r\t\tremoveAction: aBlock',			#stamp : 'AttilaMagyar 10/30/2015 20:34',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '813' ],		#self : OmReference [ '814' ],		#time : DateAndTime [ '2017-07-29T14:12:24.127808+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaKeyValueInput,				#isMetaSide : false			},			#name : #asAssociation,			#protocol : #converting,			#sourceCode : 'asAssociation\r\t^ keyInput text -> valueInput text',			#stamp : 'AttilaMagyar 10/30/2015 20:23',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '814' ],		#self : OmReference [ '815' ],		#time : DateAndTime [ '2017-07-29T14:12:24.128559+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaKeyValueInput,				#isMetaSide : false			},			#name : #initializeWidgets,			#protocol : #initialization,			#sourceCode : 'initializeWidgets\t\r\tkeyInput := self newTextInput autoAccept: true; ghostText: \'key\'; yourself.\r\tvalueInput := self newTextInput autoAccept: true; ghostText: \'value\'; yourself.\r\tremoveButton := self newButton label: \'Remove\'; yourself.\r\tself focusOrder\r\t\tadd: keyInput;\r\t\tadd: valueInput;\r\t\tadd: removeButton.\r\t\t\r',			#stamp : 'AttilaMagyar 10/30/2015 23:52',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '815' ],		#self : OmReference [ '816' ],		#time : DateAndTime [ '2017-07-29T14:12:24.129366+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaKeyValueInput,				#isMetaSide : false			},			#name : #keyInput,			#protocol : #accessing,			#sourceCode : 'keyInput\r\t^ keyInput',			#stamp : 'AttilaMagyar 10/25/2015 20:13',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '816' ],		#self : OmReference [ '817' ],		#time : DateAndTime [ '2017-07-29T14:12:24.130137+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaKeyValueInput,				#isMetaSide : false			},			#name : #removeButton,			#protocol : #accessing,			#sourceCode : 'removeButton\r\t^ removeButton',			#stamp : 'AttilaMagyar 10/25/2015 21:04',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '817' ],		#self : OmReference [ '818' ],		#time : DateAndTime [ '2017-07-29T14:12:24.130895+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaKeyValueInput,				#isMetaSide : false			},			#name : #'setKey:value:removeAction:',			#protocol : #initialization,			#sourceCode : 'setKey: keyString value: valueString removeAction: aBlock\r\tkeyInput text: keyString.\r\tvalueInput text: valueString.\r\tremoveButton whenActionPerformedDo: [ aBlock value: self ].\r\t^ self',			#stamp : 'AttilaMagyar 10/30/2015 20:39',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '818' ],		#self : OmReference [ '819' ],		#time : DateAndTime [ '2017-07-29T14:12:24.133341+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaKeyValueInput,				#isMetaSide : false			},			#name : #valueInput,			#protocol : #accessing,			#sourceCode : 'valueInput\r\t^ valueInput',			#stamp : 'AttilaMagyar 10/25/2015 20:13',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '819' ],		#self : OmReference [ '820' ],		#time : DateAndTime [ '2017-07-29T14:12:24.13412+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaRequestBodyTabs class',				#isMetaSide : true			},			#name : #defaultSpec,			#protocol : #specs,			#sourceCode : 'defaultSpec\r\t^ SpecLayout composed\r\t\tnewColumn: [ :col |\r\t\t\tcol \r\t\t\t\tadd: #label height: self inputTextHeight;\r\t\t\t\tadd: #requestBody ]',			#stamp : 'AttilaMagyar 10/30/2015 20:08',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '820' ],		#self : OmReference [ '821' ],		#time : DateAndTime [ '2017-07-29T14:12:24.134922+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequestBodyTabs,				#isMetaSide : false			},			#name : #formTabTitle,			#protocol : #private,			#sourceCode : 'formTabTitle\r\t^ \'Form\'',			#stamp : 'AttilaMagyar 10/30/2015 22:22',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '821' ],		#self : OmReference [ '822' ],		#time : DateAndTime [ '2017-07-29T14:12:24.13567+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequestBodyTabs,				#isMetaSide : false			},			#name : #initializeWidgets,			#protocol : #initialization,			#sourceCode : 'initializeWidgets\r\tlabel := self newLabel label: \'Request body\'; yourself.\r\trequestBody := self newRequestBody.',			#stamp : 'AttilaMagyar 10/30/2015 20:08',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '822' ],		#self : OmReference [ '823' ],		#time : DateAndTime [ '2017-07-29T14:12:24.136587+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequestBodyTabs,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ label',			#stamp : 'AttilaMagyar 10/30/2015 20:08',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '823' ],		#self : OmReference [ '824' ],		#time : DateAndTime [ '2017-07-29T14:12:24.137303+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequestBodyTabs,				#isMetaSide : false			},			#name : #newRequestBody,			#protocol : #initialization,			#sourceCode : 'newRequestBody\r\traw := self newText autoAccept: true; yourself.\r\tform := TeaFormTab new.\r\t^ self newTabManager\r\t\t\taddTab: (self newTab\r\t\t\t\tlabel: self rawTabTitle;\r\t\t\t\tcloseable: false;\r\t\t\t\tmodel: raw);\r\t\t\taddTab: (self newTab\r\t\t\t\tlabel: self formTabTitle;\r\t\t\t\tcloseable: false;\t\t\t\t\r\t\t\t\tmodel: form);\r\t\t\twhenTabSelected: [:selected |\r\t\t\t\tselected label = self formTabTitle\r\t\t\t\t\tifTrue: [ form updateKeyValus: (\'?\', raw text) asUrl query ] \r\t\t\t\t\tifFalse: [ form writeUrlEncodedTo: raw ] ]',			#stamp : 'AttilaMagyar 11/1/2015 21:01',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '824' ],		#self : OmReference [ '825' ],		#time : DateAndTime [ '2017-07-29T14:12:24.138447+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequestBodyTabs,				#isMetaSide : false			},			#name : #rawTabTitle,			#protocol : #private,			#sourceCode : 'rawTabTitle\r\t^ \'Raw\'',			#stamp : 'AttilaMagyar 10/30/2015 22:22',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '825' ],		#self : OmReference [ '826' ],		#time : DateAndTime [ '2017-07-29T14:12:24.139156+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequestBodyTabs,				#isMetaSide : false			},			#name : #requestBody,			#protocol : #accessing,			#sourceCode : 'requestBody\r\t^ requestBody',			#stamp : 'AttilaMagyar 10/30/2015 20:09',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '826' ],		#self : OmReference [ '827' ],		#time : DateAndTime [ '2017-07-29T14:12:24.139871+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequestBodyTabs,				#isMetaSide : false			},			#name : #urlEncoded,			#protocol : #protocol,			#sourceCode : 'urlEncoded\r\trequestBody selectedTab label = self formTabTitle\r\t\tifTrue: [ raw text: form urlEncoded ].\r\t^ raw text',			#stamp : 'AttilaMagyar 10/30/2015 22:22',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '827' ],		#self : OmReference [ '828' ],		#time : DateAndTime [ '2017-07-29T14:12:24.140694+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Teaspoon class',				#isMetaSide : true			},			#name : #defaultSpec,			#protocol : #specs,			#sourceCode : 'defaultSpec\r\t^ SpecLayout composed\r\t\tnewColumn: [ :col | \t\t\t\t\t\t\t\t\t\r\t\t\tcol \r\t\t\t\tnewRow: [ :row | \r\t\t\t\t\trow \r\t\t\t\t\t\tadd: #methodDropList width: 90;\r\t\t\t\t\t\tadd: #urlInput ]\r\t\t\t\theight: self inputTextHeight.\r\t\t\tcol\r\t\t\t\tadd: #requestBody;\r\t\t\t\tadd: #contentTypeLabel height: self inputTextHeight;\r\t\t\t\tadd: #contentTypeDropList height: self inputTextHeight.\r\t\t\tcol \r\t\t\t\tnewRow: \r\t\t\t\t\t[ :row | row add: #execButton ] \r\t\t\t\theight: self buttonHeight\t\t\t\t\r\t\t]',			#stamp : 'AttilaMagyar 10/30/2015 20:57',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '828' ],		#self : OmReference [ '829' ],		#time : DateAndTime [ '2017-07-29T14:12:24.143277+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Teaspoon class',				#isMetaSide : true			},			#name : #iconProvider,			#protocol : #'private - accessing',			#sourceCode : 'iconProvider\r\r\t^TeaIconProvider ',			#stamp : 'TorstenBergmann 10/5/2016 21:59',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '829' ],		#self : OmReference [ '830' ],		#time : DateAndTime [ '2017-07-29T14:12:24.144093+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Teaspoon class',				#isMetaSide : true			},			#name : #'menuCommandOn:',			#protocol : #'world menu',			#sourceCode : 'menuCommandOn: aBuilder \r\t<worldMenu> \r\t\r\t(aBuilder item: #\'Teaspoon\')\t \r\t\thelp: \'Teaspoon\'; \r\t\tparent: #\'Tools\' translated;\r\t\ticon: self iconProvider teaspoonIcon;\r\t\taction: [ self open ].',			#stamp : 'TorstenBergmann 10/5/2016 21:59',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '830' ],		#self : OmReference [ '831' ],		#time : DateAndTime [ '2017-07-29T14:12:24.144892+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Teaspoon class',				#isMetaSide : true			},			#name : #open,			#protocol : #interface,			#sourceCode : 'open\r\t<script>\r\t\r\t(self new)\r\t\topenWithSpec;\r\t\tyourself',			#stamp : 'TorstenBergmann 10/5/2016 21:35',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '831' ],		#self : OmReference [ '832' ],		#time : DateAndTime [ '2017-07-29T14:12:24.145651+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Teaspoon class',				#isMetaSide : true			},			#name : #title,			#protocol : #specs,			#sourceCode : 'title\r\t^ \'Teaspoon client\'',			#stamp : 'AttilaMagyar 10/30/2015 19:35',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '832' ],		#self : OmReference [ '833' ],		#time : DateAndTime [ '2017-07-29T14:12:24.146429+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #client,			#protocol : #private,			#sourceCode : 'client\r\t^ ZnClient new\r\t\turl: self urlInput text;\r\t\tmethod: self methodDropList selectedItem;\r\t\tentity: (ZnStreamingEntity \r\t\t\treadFrom: (ReadStream on: requestBody urlEncoded)\r\t\t\tusingType: self contentTypeDropList selectedItem\r\t\t\tandLength: requestBody urlEncoded size)\r\t\tyourself',			#stamp : 'AttilaMagyar 10/30/2015 22:09',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '833' ],		#self : OmReference [ '834' ],		#time : DateAndTime [ '2017-07-29T14:12:24.147269+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #consumer,			#protocol : #private,			#sourceCode : 'consumer\r\t^ consumer ifNil: [ consumer := [ :any | any inspect ] ]',			#stamp : 'TorstenBergmann 10/5/2016 23:32',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '834' ],		#self : OmReference [ '835' ],		#time : DateAndTime [ '2017-07-29T14:12:24.147992+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #contentTypeDropList,			#protocol : #accessing,			#sourceCode : 'contentTypeDropList\r\t^ contentTypeDropList',			#stamp : 'AttilaMagyar 10/25/2015 17:24',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '835' ],		#self : OmReference [ '836' ],		#time : DateAndTime [ '2017-07-29T14:12:24.14869+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #contentTypeLabel,			#protocol : #accessing,			#sourceCode : 'contentTypeLabel\r\t^ contentTypeLabel',			#stamp : 'AttilaMagyar 10/25/2015 17:28',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '836' ],		#self : OmReference [ '837' ],		#time : DateAndTime [ '2017-07-29T14:12:24.149393+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #execButton,			#protocol : #accessing,			#sourceCode : 'execButton\r\t^ execButton',			#stamp : 'AttilaMagyar 10/25/2015 18:27',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '837' ],		#self : OmReference [ '838' ],		#time : DateAndTime [ '2017-07-29T14:12:24.151947+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #initialExtent,			#protocol : #api,			#sourceCode : 'initialExtent\r\t^  580@420',			#stamp : 'AttilaMagyar 10/25/2015 22:32',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '838' ],		#self : OmReference [ '839' ],		#time : DateAndTime [ '2017-07-29T14:12:24.152689+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #initializePresenter,			#protocol : #initialization,			#sourceCode : 'initializePresenter\r\texecButton\r\t\twhenActionPerformedDo: [ \r\t\t\tself urlInput text notEmpty\r\t\t\t\tifTrue: [ self consumer value: self client execute ]]',			#stamp : 'TorstenBergmann 10/5/2016 23:31',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '839' ],		#self : OmReference [ '840' ],		#time : DateAndTime [ '2017-07-29T14:12:24.153433+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #initializeWidgets,			#protocol : #initialization,			#sourceCode : 'initializeWidgets\r\tmethodDropList := self newMethodDropList.\r\turlInput := self newTextInput autoAccept: true; yourself.\r\trequestBody := TeaRequestBodyTabs new.\r\tcontentTypeLabel := self newLabel label: \'Content Type\'; yourself.\r\tcontentTypeDropList := self newContentTypeDropList.\r\texecButton := self newButton label: \'Execute request\'; yourself.',			#stamp : 'AttilaMagyar 10/30/2015 22:11',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '840' ],		#self : OmReference [ '841' ],		#time : DateAndTime [ '2017-07-29T14:12:24.154207+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #'method:url:port:',			#protocol : #'tea spoon',			#sourceCode : 'method: methodString url: urlString port: portNumber\r\tself populateMethod: methodString.\r\tself populateUrl: urlString port: portNumber.',			#stamp : 'AttilaMagyar 11/8/2015 18:24',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '841' ],		#self : OmReference [ '842' ],		#time : DateAndTime [ '2017-07-29T14:12:24.154932+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #methodDropList,			#protocol : #accessing,			#sourceCode : 'methodDropList\r\t^ methodDropList',			#stamp : 'AttilaMagyar 10/25/2015 17:33',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '842' ],		#self : OmReference [ '843' ],		#time : DateAndTime [ '2017-07-29T14:12:24.155733+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #newContentTypeDropList,			#protocol : #initialization,			#sourceCode : 'newContentTypeDropList\r\t| dropList |\r\tdropList := self newDropList.\r\t#(\r\t\tapplicationFormUrlEncoded \r\t\tapplicationJson \r\t\tapplicationXml \r\t\tapplicationSton \r\t\tapplicationOctetStream \r\t\ttext \r\t\ttextHtml \r\t\ttextPlain\r\t) do: [ :each | dropList addItemLabeled: (each value: ZnMimeType) do: [] ].\t\r\t^ dropList',			#stamp : 'AttilaMagyar 10/30/2015 22:29',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '843' ],		#self : OmReference [ '844' ],		#time : DateAndTime [ '2017-07-29T14:12:24.156612+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #newMethodDropList,			#protocol : #initialization,			#sourceCode : 'newMethodDropList\r\t| dropList |\r\tdropList := self newDropList.\r\tZnConstants knownHTTPMethods do: [ :each | \r\t\tdropList addItemLabeled: each do: [] ].\r\t^ dropList',			#stamp : 'AttilaMagyar 10/30/2015 21:03',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '844' ],		#self : OmReference [ '845' ],		#time : DateAndTime [ '2017-07-29T14:12:24.157388+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #'onHttpResultDo:',			#protocol : #'tea spoon',			#sourceCode : 'onHttpResultDo: aBlock\r\tconsumer := aBlock',			#stamp : 'AttilaMagyar 11/8/2015 19:03',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '845' ],		#self : OmReference [ '846' ],		#time : DateAndTime [ '2017-07-29T14:12:24.158318+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #'populateMethod:',			#protocol : #private,			#sourceCode : 'populateMethod: methodString\r\t| selected |\r\tselected := methodDropList listItems\r\t\tdetect: [ :each | each = methodString ]\r\t\tifNone: [ methodDropList listItems first ].\r\tmethodDropList setSelectedItem: selected',			#stamp : 'AttilaMagyar 11/8/2015 18:23',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '846' ],		#self : OmReference [ '847' ],		#time : DateAndTime [ '2017-07-29T14:12:24.159108+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #'populateUrl:port:',			#protocol : #private,			#sourceCode : 'populateUrl: urlString port: portNumber\r\t| pathSegment |\r\tpathSegment := urlString.\r\t(pathSegment beginsWith: \'/\') \r\t\tifFalse: [ pathSegment := \'/\', pathSegment ].\t\r\turlInput text: (\'http://localhost:\', portNumber asString, pathSegment)',			#stamp : 'AttilaMagyar 11/8/2015 18:24',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '847' ],		#self : OmReference [ '848' ],		#time : DateAndTime [ '2017-07-29T14:12:24.161689+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #requestBody,			#protocol : #accessing,			#sourceCode : 'requestBody\r\t^ requestBody',			#stamp : 'AttilaMagyar 10/30/2015 20:56',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '848' ],		#self : OmReference [ '849' ],		#time : DateAndTime [ '2017-07-29T14:12:24.162418+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Teaspoon,				#isMetaSide : false			},			#name : #urlInput,			#protocol : #accessing,			#sourceCode : 'urlInput\r\t^ urlInput',			#stamp : 'AttilaMagyar 10/25/2015 17:22',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '849' ],		#self : OmReference [ '850' ],		#time : DateAndTime [ '2017-07-29T14:12:24.163272+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequestMatcher,				#isMetaSide : false			},			#name : #methodMatcher,			#protocol : #'*Teapot-Tools',			#sourceCode : 'methodMatcher\r\t^ methodMatcher',			#stamp : 'AttilaMagyar 10/25/2015 18:02',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '850' ],		#self : OmReference [ '851' ],		#time : DateAndTime [ '2017-07-29T14:12:24.163974+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRequestMatcher,				#isMetaSide : false			},			#name : #urlPattern,			#protocol : #'*Teapot-Tools',			#sourceCode : 'urlPattern\r\t^ urlPattern',			#stamp : 'AttilaMagyar 10/25/2015 18:03',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '851' ],		#self : OmReference [ '852' ],		#time : DateAndTime [ '2017-07-29T14:12:24.164698+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaGlobUrlPattern,				#isMetaSide : false			},			#name : #asTeaspoonPath,			#protocol : #'*Teapot-Tools',			#sourceCode : 'asTeaspoonPath\r\t^ String streamContents: [ :aStream |\r\t\t\tsegments \r\t\t\t\tdo: [ :each | each printOn: aStream ]\r\t\t\t\tseparatedBy: [ aStream nextPut: $/ ] ]',			#stamp : 'AttilaMagyar 11/8/2015 18:25',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '852' ],		#self : OmReference [ '853' ],		#time : DateAndTime [ '2017-07-29T14:12:24.165505+09:00' ],		#trigger : OmReference [ '743' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaRxUrlPattern,				#isMetaSide : false			},			#name : #asTeaspoonPath,			#protocol : #'*Teapot-Tools',			#sourceCode : 'asTeaspoonPath\r\t^ \'/\'',			#stamp : 'AttilaMagyar 11/8/2015 18:25',			#package : #Teapot-Tools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2017-07-29T14:12:24.299703+09:00' ],		#prior : OmReference [ '853' ],		#self : OmReference [ '854' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Teapot-Tests-AttilaMagyar.54'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '854' ],		#self : OmReference [ '855' ],		#time : DateAndTime [ '2017-07-29T14:12:24.459241+09:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #Teapot-Tests,		#affectedPackageName : #Teapot-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '855' ],		#self : OmReference [ '856' ],		#time : DateAndTime [ '2017-07-29T14:12:24.522323+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeaUrlPatternTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeaUrlPatternTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaUrlPatternTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaUrlPatternTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaUrlPatternTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '856' ],		#self : OmReference [ '857' ],		#time : DateAndTime [ '2017-07-29T14:12:24.547312+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotAbortTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotAbortTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotAbortTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotAbortTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotAbortTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotAbortTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '857' ],		#self : OmReference [ '858' ],		#time : DateAndTime [ '2017-07-29T14:12:24.554217+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotAfterTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotAfterTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotAfterTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotAfterTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotAfterTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotAfterTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '858' ],		#self : OmReference [ '859' ],		#time : DateAndTime [ '2017-07-29T14:12:24.558173+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotBeforeTest\r\tinstanceVariableNames: \'server log\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotBeforeTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotBeforeTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotBeforeTest,						#isMetaSide : false					},					#name : #log,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotBeforeTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotBeforeTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotBeforeTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '859' ],		#self : OmReference [ '860' ],		#time : DateAndTime [ '2017-07-29T14:12:24.562726+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotDefaultFormatTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotDefaultFormatTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotDefaultFormatTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotDefaultFormatTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotDefaultFormatTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotDefaultFormatTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '860' ],		#self : OmReference [ '861' ],		#time : DateAndTime [ '2017-07-29T14:12:24.566587+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotEncodingTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotEncodingTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotEncodingTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotEncodingTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotEncodingTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotEncodingTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '861' ],		#self : OmReference [ '862' ],		#time : DateAndTime [ '2017-07-29T14:12:24.570257+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotErrorHandlingTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotErrorHandlingTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotErrorHandlingTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotErrorHandlingTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotErrorHandlingTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotErrorHandlingTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '862' ],		#self : OmReference [ '863' ],		#time : DateAndTime [ '2017-07-29T14:12:24.573853+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotFormParamsTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotFormParamsTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotFormParamsTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotFormParamsTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotFormParamsTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotFormParamsTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '863' ],		#self : OmReference [ '864' ],		#time : DateAndTime [ '2017-07-29T14:12:24.579983+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotFormatTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotFormatTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotFormatTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotFormatTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotFormatTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotFormatTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '864' ],		#self : OmReference [ '865' ],		#time : DateAndTime [ '2017-07-29T14:12:24.583924+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotMessageSendTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotMessageSendTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotMessageSendTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotMessageSendTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotMessageSendTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotMessageSendTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '865' ],		#self : OmReference [ '866' ],		#time : DateAndTime [ '2017-07-29T14:12:24.588186+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotPathParamTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotPathParamTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotPathParamTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotPathParamTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotPathParamTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotPathParamTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '866' ],		#self : OmReference [ '867' ],		#time : DateAndTime [ '2017-07-29T14:12:24.591653+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotQueryParamsTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotQueryParamsTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotQueryParamsTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotQueryParamsTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotQueryParamsTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotQueryParamsTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '867' ],		#self : OmReference [ '868' ],		#time : DateAndTime [ '2017-07-29T14:12:24.595062+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotRegexpTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotRegexpTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotRegexpTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotRegexpTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotRegexpTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotRegexpTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '868' ],		#self : OmReference [ '869' ],		#time : DateAndTime [ '2017-07-29T14:12:24.598465+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotResponseTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotResponseTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotResponseTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotResponseTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotResponseTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotResponseTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '869' ],		#self : OmReference [ '870' ],		#time : DateAndTime [ '2017-07-29T14:12:24.60238+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotReturnResponseTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotReturnResponseTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotReturnResponseTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotReturnResponseTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotReturnResponseTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotReturnResponseTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '870' ],		#self : OmReference [ '871' ],		#time : DateAndTime [ '2017-07-29T14:12:24.608537+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotRouteSetTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotRouteSetTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotRouteSetTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotRouteSetTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotRouteSetTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotRouteSetTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '871' ],		#self : OmReference [ '872' ],		#time : DateAndTime [ '2017-07-29T14:12:24.61191+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotRoutingTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotRoutingTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotRoutingTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotRoutingTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotRoutingTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotRoutingTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '872' ],		#self : OmReference [ '873' ],		#time : DateAndTime [ '2017-07-29T14:12:24.615322+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotStaticFilesTest\r\tinstanceVariableNames: \'server htdocs\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotStaticFilesTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotStaticFilesTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotStaticFilesTest,						#isMetaSide : false					},					#name : #htdocs,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotStaticFilesTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotStaticFilesTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotStaticFilesTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '873' ],		#self : OmReference [ '874' ],		#time : DateAndTime [ '2017-07-29T14:12:24.61867+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotStreamingTest\r\tinstanceVariableNames: \'server downloadFile\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotStreamingTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotStreamingTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotStreamingTest,						#isMetaSide : false					},					#name : #downloadFile,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotStreamingTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotStreamingTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotStreamingTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '874' ],		#self : OmReference [ '875' ],		#time : DateAndTime [ '2017-07-29T14:12:24.623245+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotTeaResponseTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotTeaResponseTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotTeaResponseTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotTeaResponseTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotTeaResponseTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotTeaResponseTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '875' ],		#self : OmReference [ '876' ],		#time : DateAndTime [ '2017-07-29T14:12:24.628666+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TeapotWhenClauseTest\r\tinstanceVariableNames: \'server\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeapotWhenClauseTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TeapotWhenClauseTest,						#isMetaSide : false					},					#name : #server,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeapotWhenClauseTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TeapotWhenClauseTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeapotWhenClauseTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '876' ],		#self : OmReference [ '877' ],		#time : DateAndTime [ '2017-07-29T14:12:24.632355+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaTestClient\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TeaTestClient,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaTestClient class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaTestClient class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaTestClient,					#isMetaSide : false				},				#parent : @8,				#content : 'Http client for testing.',				#stamp : 'AttilaMagyar 7/29/2014 22:38'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Http client for testing.',		#newStamp : 'AttilaMagyar 7/29/2014 22:38'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '877' ],		#self : OmReference [ '878' ],		#time : DateAndTime [ '2017-07-29T14:12:24.63499+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TeaTestClient\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Teapot-Tests\''			},			#name : #TeaTestClient,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TeaTestClient class\r\tinstanceVariableNames: \'\''				},				#name : #'TeaTestClient class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TeaTestClient,					#isMetaSide : false				},				#parent : @8,				#content : 'Http client for testing.',				#stamp : 'AttilaMagyar 7/29/2014 22:38'			},			#classVariables : OrderedCollection [ ],			#category : #Teapot-Tests,			#package : #Teapot-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '878' ],		#self : OmReference [ '879' ],		#time : DateAndTime [ '2017-07-29T14:12:24.715986+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternTest,				#isMetaSide : false			},			#name : #'pattern:matches:',			#protocol : #private,			#sourceCode : 'pattern: patternString matches: urlString\r\t| placeholders |\r\tplaceholders := Dictionary new.\r\tself assert: ((TeaGlobUrlPattern parseString: patternString) matchesUrl: urlString asUrl placeholders: placeholders).\r\t^ placeholders',			#stamp : 'AttilaMagyar 8/14/2014 21:22',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '879' ],		#self : OmReference [ '880' ],		#time : DateAndTime [ '2017-07-29T14:12:24.719069+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternTest,				#isMetaSide : false			},			#name : #'pattern:noMatch:',			#protocol : #private,			#sourceCode : 'pattern: patternString noMatch: urlString\r\t| placeholders |\r\tplaceholders := Dictionary new.\r\tself deny: ((TeaGlobUrlPattern parseString: patternString) matchesUrl: urlString asUrl placeholders: placeholders).\r\t^ placeholders',			#stamp : 'AttilaMagyar 8/14/2014 21:22',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '880' ],		#self : OmReference [ '881' ],		#time : DateAndTime [ '2017-07-29T14:12:24.720551+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternTest,				#isMetaSide : false			},			#name : #testLongerPatternEndedPlaceholder,			#protocol : #tests,			#sourceCode : 'testLongerPatternEndedPlaceholder\r\tself pattern: \'/a/b/<id>\' noMatch: \'/a/b\'.\r',			#stamp : 'AttilaMagyar 7/29/2014 20:12',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '881' ],		#self : OmReference [ '882' ],		#time : DateAndTime [ '2017-07-29T14:12:24.722132+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternTest,				#isMetaSide : false			},			#name : #testLongerPatternEndedWildcard,			#protocol : #tests,			#sourceCode : 'testLongerPatternEndedWildcard\r\tself pattern: \'/a/b/c/*\' matches: \'/a/b/c\'.\r\tself pattern: \'/1/2/3/*/*\' matches: \'/1/2/3\'.\r\t\r\tself pattern: \'/a/b/c/*\' noMatch: \'/a/b\'.',			#stamp : 'AttilaMagyar 7/26/2014 21:18',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '882' ],		#self : OmReference [ '883' ],		#time : DateAndTime [ '2017-07-29T14:12:24.724343+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternTest,				#isMetaSide : false			},			#name : #testNoWildcard,			#protocol : #tests,			#sourceCode : 'testNoWildcard\t\r\tself pattern: \'/aa\' matches: \'/aa\'.\r\tself pattern: \'/aa\' noMatch: \'/bb\'.',			#stamp : 'AttilaMagyar 7/26/2014 21:11',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '883' ],		#self : OmReference [ '884' ],		#time : DateAndTime [ '2017-07-29T14:12:24.725477+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternTest,				#isMetaSide : false			},			#name : #testPlaceholderSubstitute,			#protocol : #tests,			#sourceCode : 'testPlaceholderSubstitute\r\t| placeholders |\r\t\r\tplaceholders := self pattern: \'/<id>/a/b\' matches: \'/123/a/b\'.\r\tself assert: (placeholders at: #id) equals: \'123\'.\r\t\r\tplaceholders := self pattern: \'/a/<id>/b\' matches: \'/a/25/b\'.\r\tself assert: (placeholders at: #id) equals: \'25\'.\r\t\r\tplaceholders := self pattern: \'/a/b/<id>\' matches: \'/a/b/xyz\'.\t\r\tself assert: (placeholders at: #id) equals: \'xyz\'.\t\t\r',			#stamp : 'AttilaMagyar 7/28/2014 22:29',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '884' ],		#self : OmReference [ '885' ],		#time : DateAndTime [ '2017-07-29T14:12:24.726463+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternTest,				#isMetaSide : false			},			#name : #testPlaceholderTypeMatch,			#protocol : #tests,			#sourceCode : 'testPlaceholderTypeMatch\r\t| placeholders |\r\tplaceholders := self pattern: \'/<id:IsInteger>\' matches: \'/12\'.\r\tself assert: (placeholders at: #id) equals: 12.\r\t\r\tplaceholders := self pattern: \'/<id:IsInteger>/abc\' matches: \'/-34/abc\'.\r\tself assert: (placeholders at: #id) equals: -34.\r\t\r\tplaceholders := self pattern: \'/<float:IsNumber>/<int:IsNumber>\' matches: \'/3.14/3\'.\r\tself assert: (placeholders at: #float) equals: 3.14.\r\tself assert: (placeholders at: #int) equals: 3.\t',			#stamp : 'AttilaMagyar 8/3/2014 17:25',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '885' ],		#self : OmReference [ '886' ],		#time : DateAndTime [ '2017-07-29T14:12:24.727311+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternTest,				#isMetaSide : false			},			#name : #testPlaceholderTypeNoMatch,			#protocol : #tests,			#sourceCode : 'testPlaceholderTypeNoMatch\r\tself pattern: \'/<id:IsInteger>\' noMatch: \'/foobar\'.\t\r\tself pattern: \'/<id:IsNumber>\' noMatch: \'/foobar\'.\r\tself pattern: \'/<id:IsInteger>\' noMatch: \'/12.3\'.\r\r\t\r\t',			#stamp : 'AttilaMagyar 8/3/2014 17:18',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '886' ],		#self : OmReference [ '887' ],		#time : DateAndTime [ '2017-07-29T14:12:24.7281+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternTest,				#isMetaSide : false			},			#name : #testPlaceholders,			#protocol : #tests,			#sourceCode : 'testPlaceholders\r\tself pattern: \'/<id>/a/b\' matches: \'/1/a/b\'.\r\tself pattern: \'/a/<id>/b\' matches: \'/a/2/b\'.\r\tself pattern: \'/a/b/<id>\' matches: \'/a/b/1\'.\t\r\t\r\tself pattern: \'/<id>/a/b\' noMatch: \'/1/a/c\'.\r\tself pattern: \'/a/<id>/b\' noMatch: \'/a/2/c\'.\r\tself pattern: \'/a/b/<id>\' noMatch: \'/a/c/1\'.',			#stamp : 'AttilaMagyar 7/28/2014 22:28',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '887' ],		#self : OmReference [ '888' ],		#time : DateAndTime [ '2017-07-29T14:12:24.728888+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternTest,				#isMetaSide : false			},			#name : #testRoot,			#protocol : #tests,			#sourceCode : 'testRoot\r\tself pattern: \'/\' matches: \'/\'.\t\r\tself pattern: \'/\' noMatch: \'/a\'.\t\r\tself pattern: \'/a\' noMatch: \'/\'.\r\tself pattern: \'/a/b\' noMatch: \'/\'.\t',			#stamp : 'AttilaMagyar 8/3/2014 18:36',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '888' ],		#self : OmReference [ '889' ],		#time : DateAndTime [ '2017-07-29T14:12:24.729782+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternTest,				#isMetaSide : false			},			#name : #testShorterPatternEndedPlaceholder,			#protocol : #tests,			#sourceCode : 'testShorterPatternEndedPlaceholder\r\tself pattern: \'/a/b/<id>\' noMatch: \'/a/b/1/2\'.\t\r',			#stamp : 'AttilaMagyar 7/29/2014 20:12',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '889' ],		#self : OmReference [ '890' ],		#time : DateAndTime [ '2017-07-29T14:12:24.730542+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternTest,				#isMetaSide : false			},			#name : #testShorterPatternEndedWildcard,			#protocol : #tests,			#sourceCode : 'testShorterPatternEndedWildcard\t\r \tself pattern: \'/a/*\' matches: \'/a/b/c\'.\r\tself pattern: \'/*\' matches: \'/1/2/3\'.\r\t\r \tself pattern: \'/a/*\' noMatch: \'/b/b/c\'.\r\tself pattern: \'/a/b\' noMatch: \'/a/b/c\'.\t',			#stamp : 'AttilaMagyar 7/27/2014 11:39',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '890' ],		#self : OmReference [ '891' ],		#time : DateAndTime [ '2017-07-29T14:12:24.731297+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternTest,				#isMetaSide : false			},			#name : #testTralingSlash,			#protocol : #tests,			#sourceCode : 'testTralingSlash\r\tself pattern: \'/a/b\' matches: \'/a/b/\'.\r',			#stamp : 'AttilaMagyar 7/27/2014 15:33',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '891' ],		#self : OmReference [ '892' ],		#time : DateAndTime [ '2017-07-29T14:12:24.732056+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeaUrlPatternTest,				#isMetaSide : false			},			#name : #testWildcards,			#protocol : #tests,			#sourceCode : 'testWildcards\r\tself pattern: \'/*/1/2\' matches: \'/0/1/2\'.\r\tself pattern: \'/a/b/*\' matches: \'/a/b/c\'.\r\tself pattern: \'/x/*/z\' matches: \'/x/y/z\'.\r\t\r\tself pattern: \'/*/1/2\' noMatch: \'/a/1/z\'.\t\r\tself pattern: \'/a/b/*\' noMatch: \'/a/1/z\'.\t\r\tself pattern: \'/x/*/z\' noMatch: \'/a/1/z\'.\t\t\t\t\t\r\r\t',			#stamp : 'AttilaMagyar 7/26/2014 21:09',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '892' ],		#self : OmReference [ '893' ],		#time : DateAndTime [ '2017-07-29T14:12:24.733497+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotAbortTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tGET: \'badrequest\' -> [ :req | req abort: (ZnResponse badRequest: req) ];\r\t\tGET: \'unauthorized\' -> [ :req | req abort: TeaResponse unauthorized ];\r\t\tGET: \'abortstring\' -> [ :req | req abort: \'abort test\' ];\t\t\r\t\tstart.',			#stamp : 'AttilaNamed 3/1/2015 20:08',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '893' ],		#self : OmReference [ '894' ],		#time : DateAndTime [ '2017-07-29T14:12:24.734296+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotAbortTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 8/9/2014 22:15',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '894' ],		#self : OmReference [ '895' ],		#time : DateAndTime [ '2017-07-29T14:12:24.735007+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotAbortTest,				#isMetaSide : false			},			#name : #testAbortSupportsAnyObject,			#protocol : #tests,			#sourceCode : 'testAbortSupportsAnyObject\r\tself assert: (TeaTestClient httpGetString: \'/abortstring\') equals: \'abort test\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '895' ],		#self : OmReference [ '896' ],		#time : DateAndTime [ '2017-07-29T14:12:24.735724+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotAbortTest,				#isMetaSide : false			},			#name : #testErrorCodes,			#protocol : #tests,			#sourceCode : 'testErrorCodes\r\tself assert: (TeaTestClient httpGet: \'/badrequest\') code equals: 400.\r\tself assert: (TeaTestClient httpGet: \'/unauthorized\') code equals: 401.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '896' ],		#self : OmReference [ '897' ],		#time : DateAndTime [ '2017-07-29T14:12:24.736588+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotAfterTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tafter: \'/after/<param>\' -> [ :req :resp | resp headers at: \'header-key\' put: (req at: #param) ];\r\t\tGET: \'/after/*\' -> \'after-return\';\t\t\r\t\tstart\t\t',			#stamp : 'AttilaMagyar 9/27/2014 22:24',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '897' ],		#self : OmReference [ '898' ],		#time : DateAndTime [ '2017-07-29T14:12:24.737331+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotAfterTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 9/22/2014 21:12',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '898' ],		#self : OmReference [ '899' ],		#time : DateAndTime [ '2017-07-29T14:12:24.73807+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotAfterTest,				#isMetaSide : false			},			#name : #testAfterFilterCanModifyResponse,			#protocol : #tests,			#sourceCode : 'testAfterFilterCanModifyResponse\r\t| response |\r\t\r\tresponse := TeaTestClient httpGet: \'/after/header-value\'.\r\tself assert: response entity string equals: \'after-return\'.\r\tself assert: (response headers at: \'header-key\') equals: \'header-value\'.\r\t\r\tresponse := TeaTestClient httpPost: \'/after/notfound\'.\r\tself assert: response code equals: 404.\r\tself assert: (response headers at: \'header-key\') equals: \'notfound\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '899' ],		#self : OmReference [ '900' ],		#time : DateAndTime [ '2017-07-29T14:12:24.738891+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotBeforeTest,				#isMetaSide : false			},			#name : #forbidden,			#protocol : #private,			#sourceCode : 'forbidden\r\t^ ZnResponse new\r\t\tstatusLine: ZnStatusLine forbidden;\r\t\theaders: ZnHeaders defaultResponseHeaders;\r\t\tyourself',			#stamp : 'AttilaMagyar 8/17/2014 19:35',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '900' ],		#self : OmReference [ '901' ],		#time : DateAndTime [ '2017-07-29T14:12:24.739655+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotBeforeTest,				#isMetaSide : false			},			#name : #'logRequest:',			#protocol : #private,			#sourceCode : 'logRequest: aTeaRequest\r\tlog add: (aTeaRequest at: #user)',			#stamp : 'AttilaMagyar 8/11/2014 21:45',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '901' ],		#self : OmReference [ '902' ],		#time : DateAndTime [ '2017-07-29T14:12:24.740393+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotBeforeTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tlog := OrderedCollection new.\r\tserver := Teapot on\r\t\tbefore: \'/secure/*\' -> [ :req | ((req at: #user) = \'admin\' and: [ (req at: #pass) = \'****\' ]) \r\t\t\tifFalse: [ req abort: self forbidden ] ];\r\t\tbefore: \'*\' -> (Send message: #logRequest: to: self);\r\t\tbefore: \'*\' -> \'any\';\r\t\tGET: \'/secure\' -> \'protected\';\r\t\tGET: \'/secure/1/2/3\' -> \'protected\';\r\t\tPOST: \'/public\' -> \'public\';\r\t\tstart\t\t',			#stamp : 'AttilaMagyar 8/24/2014 18:04',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '902' ],		#self : OmReference [ '903' ],		#time : DateAndTime [ '2017-07-29T14:12:24.741746+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotBeforeTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 8/11/2014 21:26',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '903' ],		#self : OmReference [ '904' ],		#time : DateAndTime [ '2017-07-29T14:12:24.742482+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotBeforeTest,				#isMetaSide : false			},			#name : #testAuthentication,			#protocol : #tests,			#sourceCode : 'testAuthentication\r\tself assert: (TeaTestClient httpGetString: \'/secure?user=admin&pass=****\') equals: \'protected\'.\r\tself assert: (TeaTestClient httpGetString: \'/secure/1/2/3?user=admin&pass=****\') equals: \'protected\'.\r\t\t\r\tself assert: (TeaTestClient httpGet: \'/secure?user=user01&pass=****\') code equals: 403.\r\tself assert: (TeaTestClient httpGet: \'/secure/1/2/3?user=user02&pass=****\') code equals: 403.\t\r\t\r\tself assert: (TeaTestClient httpPostString: \'/public?user=any\') equals: \'public\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '904' ],		#self : OmReference [ '905' ],		#time : DateAndTime [ '2017-07-29T14:12:24.743256+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotBeforeTest,				#isMetaSide : false			},			#name : #testMultipleBeforeHandlers,			#protocol : #tests,			#sourceCode : 'testMultipleBeforeHandlers\r\tTeaTestClient httpGet: \'/secure?user=admin&pass=****\'.\r\tTeaTestClient httpGet: \'/secure/1/2/3?user=admin&pass=****\'.\t\r\tTeaTestClient httpGet: \'/secure?user=user01&pass=****\'. "403 before second filter"\r\tTeaTestClient httpPost: \'/public?user=pubuser\'.\t\t\r\t\t\r\tself assert: log asArray equals: #(admin admin pubuser).',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '905' ],		#self : OmReference [ '906' ],		#time : DateAndTime [ '2017-07-29T14:12:24.744067+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotDefaultFormatTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := (Teapot configure: { #defaultOutput -> #text })\r\t\tGET: \'default\' -> \'any\';\r\t\tGET: \'html\' -> \'any\'; output: #html;\r\t\tstart\t\t',			#stamp : 'AttilaMagyar 8/13/2014 20:50',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '906' ],		#self : OmReference [ '907' ],		#time : DateAndTime [ '2017-07-29T14:12:24.744861+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotDefaultFormatTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 8/5/2014 20:51',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '907' ],		#self : OmReference [ '908' ],		#time : DateAndTime [ '2017-07-29T14:12:24.745626+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotDefaultFormatTest,				#isMetaSide : false			},			#name : #testDefault,			#protocol : #tests,			#sourceCode : 'testDefault\r\tself \r\t\tassert: (TeaTestClient httpGet: \'/default\') contentType \r\t\tequals: ZnMimeType textPlain',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '908' ],		#self : OmReference [ '909' ],		#time : DateAndTime [ '2017-07-29T14:12:24.746364+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotDefaultFormatTest,				#isMetaSide : false			},			#name : #testOverride,			#protocol : #tests,			#sourceCode : 'testOverride\r\tself \r\t\tassert: (TeaTestClient httpGet: \'/html\') contentType \r\t\tequals: ZnMimeType textHtml',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '909' ],		#self : OmReference [ '910' ],		#time : DateAndTime [ '2017-07-29T14:12:24.747212+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotEncodingTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tGET: \'enc\' -> (TeaResponse ok \r\t\t\t\t\t\t\t\tbody: \'árvíztűrő tükörfúrógép\'; \r\t\t\t\t\t\t\t\tcharSet: \'iso-8859-2\');\r\t\tstart',			#stamp : 'AttilaMagyar 5/9/2015 18:15',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '910' ],		#self : OmReference [ '911' ],		#time : DateAndTime [ '2017-07-29T14:12:24.748009+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotEncodingTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 5/9/2015 18:11',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '911' ],		#self : OmReference [ '912' ],		#time : DateAndTime [ '2017-07-29T14:12:24.749409+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotEncodingTest,				#isMetaSide : false			},			#name : #testUserSpecifiedEncoding,			#protocol : #tests,			#sourceCode : 'testUserSpecifiedEncoding\r\t| response |\r\tresponse := TeaTestClient httpGet: \'/enc\'.\r\tself \r\t\tassert: response entity string\r\t\tequals: \'árvíztűrő tükörfúrógép\'.\t\t\r\tself \r\t\tassert: response contentType charSet\r\t\tequals: \'iso-8859-2\'',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '912' ],		#self : OmReference [ '913' ],		#time : DateAndTime [ '2017-07-29T14:12:24.750374+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotErrorHandlingTest,				#isMetaSide : false			},			#name : #'handleError:request:',			#protocol : #private,			#sourceCode : 'handleError: ex request: req\r\tself assert: (ex isKindOf: Exception).\r\tself assert: (req isKindOf: TeaRequest).\r\t^ ZnResponse ok: (ZnStringEntity text: \'outofbounds/domainerror handled\')',			#stamp : 'AttilaMagyar 8/12/2014 21:40',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '913' ],		#self : OmReference [ '914' ],		#time : DateAndTime [ '2017-07-29T14:12:24.751158+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotErrorHandlingTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tGET: \'/zerodiv\' -> [ 1 / 0 ];\r\t\tGET: \'/sub\' -> [ #() at: 123 ];\t\t\t\r\t\tGET: \'/domain\' -> [ -2 sqrt ];\r\t\tGET: \'/nonbool\' -> [ NotYetImplemented signal ];\r\t\tGET: \'/keynotfound\' -> [ KeyNotFound signal ];\r\t\texception: ZeroDivide -> [ :ex :req | \'zerodiv handled\' ];\r\t\texception: SubscriptOutOfBounds, DomainError -> (Send message: #handleError:request: to: self);\r\t\texception: NotYetImplemented -> (ZnResponse ok: (ZnStringEntity text: \'nonbool handled\'));\r\t\texception: KeyNotFound -> 42;\r\t\toutput: [ :resp :req | ZnResponse ok: (ZnStringEntity text: resp body printStringRoman) ];\r\t\tstart\t\t',			#stamp : 'AttilaMagyar 9/28/2014 18:54',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '914' ],		#self : OmReference [ '915' ],		#time : DateAndTime [ '2017-07-29T14:12:24.752039+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotErrorHandlingTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 8/4/2014 13:05',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '915' ],		#self : OmReference [ '916' ],		#time : DateAndTime [ '2017-07-29T14:12:24.752768+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotErrorHandlingTest,				#isMetaSide : false			},			#name : #testHandlesExceptionSet,			#protocol : #tests,			#sourceCode : 'testHandlesExceptionSet\r\tself assert: (TeaTestClient httpGetString: \'/sub\') equals: \'outofbounds/domainerror handled\'.\t\r\tself assert: (TeaTestClient httpGetString: \'/domain\') equals: \'outofbounds/domainerror handled\'.\t\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '916' ],		#self : OmReference [ '917' ],		#time : DateAndTime [ '2017-07-29T14:12:24.753483+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotErrorHandlingTest,				#isMetaSide : false			},			#name : #testHandlesOneException,			#protocol : #tests,			#sourceCode : 'testHandlesOneException\r\tself assert: (TeaTestClient httpGetString: \'/zerodiv\') equals: \'zerodiv handled\'.\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '917' ],		#self : OmReference [ '918' ],		#time : DateAndTime [ '2017-07-29T14:12:24.754205+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotErrorHandlingTest,				#isMetaSide : false			},			#name : #testTransformingErroHandlerResponse,			#protocol : #tests,			#sourceCode : 'testTransformingErroHandlerResponse\r\tself assert: (TeaTestClient httpGetString: \'/keynotfound\') equals: \'XLII\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '918' ],		#self : OmReference [ '919' ],		#time : DateAndTime [ '2017-07-29T14:12:24.754941+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotErrorHandlingTest,				#isMetaSide : false			},			#name : #testValueAsExceptionHandler,			#protocol : #tests,			#sourceCode : 'testValueAsExceptionHandler\r\tself assert: (TeaTestClient httpGetString: \'/nonbool\') equals: \'nonbool handled\'.\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '919' ],		#self : OmReference [ '920' ],		#time : DateAndTime [ '2017-07-29T14:12:24.7557+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotFormParamsTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tPOST: \'/form\' -> [ :req | (req at: #foo), \'-\', (req at: #bar) ];\r\t\texception: TeaNoSuchParam -> \'no such param\';\r\t\tstart.',			#stamp : 'AttilaMagyar 11/16/2014 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '920' ],		#self : OmReference [ '921' ],		#time : DateAndTime [ '2017-07-29T14:12:24.75646+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotFormParamsTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 7/29/2014 22:34',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '921' ],		#self : OmReference [ '922' ],		#time : DateAndTime [ '2017-07-29T14:12:24.757853+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotFormParamsTest,				#isMetaSide : false			},			#name : #testFormParams,			#protocol : #tests,			#sourceCode : 'testFormParams\r\t| result |\r\tresult := ZnEasy post: \'http://localhost:1701/form\' data: (ZnApplicationFormUrlEncodedEntity new \r\t\tat: \'foo\' put: \'abc\'; \r\t\tat: \'bar\' put: \'123\'; \r\t\tyourself).\r\r\tself assert: result entity string equals: \'abc-123\'.',			#stamp : 'AttilaMagyar 8/13/2014 21:01',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '922' ],		#self : OmReference [ '923' ],		#time : DateAndTime [ '2017-07-29T14:12:24.758614+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotFormParamsTest,				#isMetaSide : false			},			#name : #testFormParamsNotFound,			#protocol : #tests,			#sourceCode : 'testFormParamsNotFound\r\t| result |\r\tresult := ZnEasy post: \'http://localhost:1701/form\' data: (ZnApplicationFormUrlEncodedEntity new \r\t\tat: \'invalid1\' put: \'abc\'; \r\t\tat: \'invalid2\' put: \'123\'; \r\t\tyourself).\r\r\tself assert: result entity string equals: \'no such param\'',			#stamp : 'AttilaMagyar 11/16/2014 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '923' ],		#self : OmReference [ '924' ],		#time : DateAndTime [ '2017-07-29T14:12:24.759433+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotFormatTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tGET: \'/a\' -> [ 4 ]; output: [ :resp :req | ZnResponse ok: (ZnStringEntity text: resp body printStringRoman) ];\r\t\tGET: \'default\' -> \'any\';\r\t\tGET: \'/plain\' -> \'any\'; output: #text;\r\t\tGET: \'xml\' -> \'any\'; output: (TeaOutput stringWithContentType: ZnMimeType applicationXml);\r\t\tstart\t\t',			#stamp : 'AttilaMagyar 10/16/2014 20:45',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '924' ],		#self : OmReference [ '925' ],		#time : DateAndTime [ '2017-07-29T14:12:24.76022+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotFormatTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 7/29/2014 22:37',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '925' ],		#self : OmReference [ '926' ],		#time : DateAndTime [ '2017-07-29T14:12:24.760926+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotFormatTest,				#isMetaSide : false			},			#name : #testArbitraryContentType,			#protocol : #tests,			#sourceCode : 'testArbitraryContentType\r\tself \r\t\tassert: (TeaTestClient httpGet: \'/xml\') contentType \r\t\tequals: (ZnMimeType applicationXml charSet: \'utf-8\'; yourself)',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '926' ],		#self : OmReference [ '927' ],		#time : DateAndTime [ '2017-07-29T14:12:24.761685+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotFormatTest,				#isMetaSide : false			},			#name : #testConverting,			#protocol : #tests,			#sourceCode : 'testConverting\r\tself assert: (TeaTestClient httpGetString: \'/a\') equals: \'IV\'.\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '927' ],		#self : OmReference [ '928' ],		#time : DateAndTime [ '2017-07-29T14:12:24.762399+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotFormatTest,				#isMetaSide : false			},			#name : #testDefaultContentTypeIsHtml,			#protocol : #tests,			#sourceCode : 'testDefaultContentTypeIsHtml\r\tself \r\t\tassert: (TeaTestClient httpGet: \'/default\') contentType \r\t\tequals: ZnMimeType textHtml',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '928' ],		#self : OmReference [ '929' ],		#time : DateAndTime [ '2017-07-29T14:12:24.763113+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotFormatTest,				#isMetaSide : false			},			#name : #testSetsContentType,			#protocol : #tests,			#sourceCode : 'testSetsContentType\r\tself \r\t\tassert: (TeaTestClient httpGet: \'/plain\') contentType \r\t\tequals: ZnMimeType textPlain',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '929' ],		#self : OmReference [ '930' ],		#time : DateAndTime [ '2017-07-29T14:12:24.763894+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotMessageSendTest,				#isMetaSide : false			},			#name : #msg1,			#protocol : #'web controller',			#sourceCode : 'msg1\r\t^ \'msg1 result\'',			#stamp : 'AttilaMagyar 8/2/2014 19:32',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '930' ],		#self : OmReference [ '931' ],		#time : DateAndTime [ '2017-07-29T14:12:24.765258+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotMessageSendTest,				#isMetaSide : false			},			#name : #'msg2Req:nil:',			#protocol : #'web controller',			#sourceCode : 'msg2Req: req nil: resp\r\tself assert: resp isNil.\r\t^ \'msg2 \', (req at: #param)',			#stamp : 'AttilaMagyar 8/10/2014 20:56',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '931' ],		#self : OmReference [ '932' ],		#time : DateAndTime [ '2017-07-29T14:12:24.766024+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotMessageSendTest,				#isMetaSide : false			},			#name : #'msg3Req:',			#protocol : #'web controller',			#sourceCode : 'msg3Req: req\r\t^ \'msg3 \', (req at: #param)',			#stamp : 'AttilaMagyar 8/2/2014 19:44',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '932' ],		#self : OmReference [ '933' ],		#time : DateAndTime [ '2017-07-29T14:12:24.766736+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotMessageSendTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tGET: \'/msg1\' -> (Send message: #msg1 to: self);\r\t\tGET: \'/msg2/<param>\' -> (Send message: #msg2Req:nil: to: self);\t\t\r\t\tGET: \'/msg3/<param>\' -> (Send message: #msg3Req: to: self);\t\t\t\t\t\r\t\tstart.\t\t',			#stamp : 'AttilaMagyar 8/10/2014 20:55',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '933' ],		#self : OmReference [ '934' ],		#time : DateAndTime [ '2017-07-29T14:12:24.767472+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotMessageSendTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 8/2/2014 19:30',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '934' ],		#self : OmReference [ '935' ],		#time : DateAndTime [ '2017-07-29T14:12:24.768187+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotMessageSendTest,				#isMetaSide : false			},			#name : #testReceivingOneArgKeywordMessage,			#protocol : #tests,			#sourceCode : 'testReceivingOneArgKeywordMessage\r\tself assert: (TeaTestClient httpGetString: \'/msg3/bar\') equals: \'msg3 bar\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '935' ],		#self : OmReference [ '936' ],		#time : DateAndTime [ '2017-07-29T14:12:24.768896+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotMessageSendTest,				#isMetaSide : false			},			#name : #testReceivingTwoArgsKeywordMessage,			#protocol : #tests,			#sourceCode : 'testReceivingTwoArgsKeywordMessage\r\tself assert: (TeaTestClient httpGetString: \'/msg2/foo\') equals: \'msg2 foo\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '936' ],		#self : OmReference [ '937' ],		#time : DateAndTime [ '2017-07-29T14:12:24.769601+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotMessageSendTest,				#isMetaSide : false			},			#name : #testReceivingUnaryMessage,			#protocol : #tests,			#sourceCode : 'testReceivingUnaryMessage\r\tself assert: (TeaTestClient httpGetString: \'/msg1\') equals: \'msg1 result\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '937' ],		#self : OmReference [ '938' ],		#time : DateAndTime [ '2017-07-29T14:12:24.770443+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotPathParamTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tGET: \'/user/<id>\' -> [ :req | \'1-\', (req at: #id) ];\r\t\tGET: \'/user/<id>/create\' -> [ :req | \'2-\', (req at: #id) ];\r\t\tGET: \'/<id>/<user>\' -> [ :req | \'3-\', (req at: #id) ];\t\t\t\t\r\t\tPOST: \'/user/<id>/create\' -> [ :req | \'4-\', (req at: #id) ];\r\t\tstart.\t\t',			#stamp : 'AttilaMagyar 8/10/2014 20:15',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '938' ],		#self : OmReference [ '939' ],		#time : DateAndTime [ '2017-07-29T14:12:24.771202+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotPathParamTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 7/29/2014 22:04',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '939' ],		#self : OmReference [ '940' ],		#time : DateAndTime [ '2017-07-29T14:12:24.771972+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotPathParamTest,				#isMetaSide : false			},			#name : #testPlaceholderAtLast,			#protocol : #tests,			#sourceCode : 'testPlaceholderAtLast\r\tself assert: (TeaTestClient httpGetString: \'user/12\') equals: \'1-12\'\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '940' ],		#self : OmReference [ '941' ],		#time : DateAndTime [ '2017-07-29T14:12:24.773473+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotPathParamTest,				#isMetaSide : false			},			#name : #testPlaceholderFirst,			#protocol : #tests,			#sourceCode : 'testPlaceholderFirst\r\tself assert: (TeaTestClient httpGetString: \'54/user\') equals: \'3-54\'.\r\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '941' ],		#self : OmReference [ '942' ],		#time : DateAndTime [ '2017-07-29T14:12:24.774241+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotPathParamTest,				#isMetaSide : false			},			#name : #testPlaceholderInside,			#protocol : #tests,			#sourceCode : 'testPlaceholderInside\r\tself assert: (TeaTestClient httpGetString: \'user/34/create\') equals: \'2-34\'.\t\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '942' ],		#self : OmReference [ '943' ],		#time : DateAndTime [ '2017-07-29T14:12:24.774988+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotPathParamTest,				#isMetaSide : false			},			#name : #testPlaceholderPost,			#protocol : #tests,			#sourceCode : 'testPlaceholderPost\r\tself assert: (TeaTestClient httpPostString: \'/user/789/create\') equals: \'4-789\'.\t\r\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '943' ],		#self : OmReference [ '944' ],		#time : DateAndTime [ '2017-07-29T14:12:24.775733+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotQueryParamsTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tGET: \'/query\' -> [ :req | req at: #foo ];\r\t\tGET: \'/queryopt\' -> [ :req | req at: #foo ifAbsent: [ \'default\' ] ];\t\t\r\t\tstart',			#stamp : 'AttilaMagyar 8/10/2014 20:15',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '944' ],		#self : OmReference [ '945' ],		#time : DateAndTime [ '2017-07-29T14:12:24.776469+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotQueryParamsTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 7/26/2014 22:56',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '945' ],		#self : OmReference [ '946' ],		#time : DateAndTime [ '2017-07-29T14:12:24.777196+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotQueryParamsTest,				#isMetaSide : false			},			#name : #testDefaultQueryParam,			#protocol : #tests,			#sourceCode : 'testDefaultQueryParam\r\tself assert: (TeaTestClient httpGetString: \'/queryopt\') equals: \'default\'.\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '946' ],		#self : OmReference [ '947' ],		#time : DateAndTime [ '2017-07-29T14:12:24.777907+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotQueryParamsTest,				#isMetaSide : false			},			#name : #testQueryParam,			#protocol : #tests,			#sourceCode : 'testQueryParam\r\tself assert: (TeaTestClient httpGetString: \'/query?foo=bar\') equals: \'bar\'.\r\tself assert: (TeaTestClient httpGetString: \'/queryopt?foo=baz\') equals: \'baz\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '947' ],		#self : OmReference [ '948' ],		#time : DateAndTime [ '2017-07-29T14:12:24.778654+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRegexpTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tGET: \'/./\' asRegex -> [ \'regexp\' ];\r\t\tGET: \'\\w+(\\d)/\\d/xxx\' asRegex -> [ :req | req at: 1 ];\r\t\tGET: \'/(\\d)/([abc]+)/\\d/(.*)\' asRegex -> [ :req | (req at: 1), (req at: 2), (req at: 3) ];\t\t\r\t\tstart',			#stamp : 'AttilaMagyar 8/14/2014 21:16',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '948' ],		#self : OmReference [ '949' ],		#time : DateAndTime [ '2017-07-29T14:12:24.779426+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRegexpTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 8/14/2014 20:18',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '949' ],		#self : OmReference [ '950' ],		#time : DateAndTime [ '2017-07-29T14:12:24.780122+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRegexpTest,				#isMetaSide : false			},			#name : #testCollectingSubexpressions,			#protocol : #tests,			#sourceCode : 'testCollectingSubexpressions\r\tself assert: (TeaTestClient httpGetString: \'/abc3/4/xxx\') equals: \'3\'.\t\r\tself assert: (TeaTestClient httpGetString: \'/1/aabbcc/2/foobar\') equals: \'1aabbccfoobar\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '950' ],		#self : OmReference [ '951' ],		#time : DateAndTime [ '2017-07-29T14:12:24.781468+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRegexpTest,				#isMetaSide : false			},			#name : #testIgnoresQueryParam,			#protocol : #tests,			#sourceCode : 'testIgnoresQueryParam\r\tself assert: (TeaTestClient httpGetString: \'/k/?param=value\') equals: \'regexp\'.\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '951' ],		#self : OmReference [ '952' ],		#time : DateAndTime [ '2017-07-29T14:12:24.782213+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRegexpTest,				#isMetaSide : false			},			#name : #testRegexpMatch,			#protocol : #tests,			#sourceCode : 'testRegexpMatch\r\tself assert: (TeaTestClient httpGetString: \'k/\') equals: \'regexp\'.\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '952' ],		#self : OmReference [ '953' ],		#time : DateAndTime [ '2017-07-29T14:12:24.782948+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotResponseTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tGET: \'/test400\' -> [ \r\t\t\tTeaResponse badRequest\r\t\t\t\tbody: \'malformed input\';\r\t\t\t\theaders: { \'my-header\' -> \'my-value\' } ];\r\t\tstart',			#stamp : 'AttilaNamed 2/28/2015 23:27',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '953' ],		#self : OmReference [ '954' ],		#time : DateAndTime [ '2017-07-29T14:12:24.783687+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotResponseTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 9/28/2014 18:27',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '954' ],		#self : OmReference [ '955' ],		#time : DateAndTime [ '2017-07-29T14:12:24.784437+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotResponseTest,				#isMetaSide : false			},			#name : #testReturnsCustomCodeBodyAndHeaders,			#protocol : #tests,			#sourceCode : 'testReturnsCustomCodeBodyAndHeaders\r\t| response |\r\tresponse := TeaTestClient httpGet: \'/test400\'.\r\tself assert: response entity string equals: \'malformed input\'.\r\tself assert: response code equals: 400.\r\tself assert: (response headers at: \'my-header\') equals: \'my-value\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '955' ],		#self : OmReference [ '956' ],		#time : DateAndTime [ '2017-07-29T14:12:24.785243+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotReturnResponseTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\t| stream |\r\tstream := ZnStreamingEntity\r\t\treadFrom: \'direct stream\' readStream\r\t\tusingType: ZnMimeType textHtml\r\t\tandLength: \'direct stream\' size.\r\t\t\r\tserver := Teapot on\r\t\tGET: \'/resp1\' -> [ :req | ZnResponse ok: (ZnStringEntity text: \'direct response\') ];\r\t\tGET: \'/resp2\' -> (ZnResponse ok: stream);\r\t\tGET: \'/redirect\' -> (ZnResponse redirect: \'/redirect_location\');\r\t\tGET: \'/redirect_location\' -> \'redirected here\';\r\t\tstart',			#stamp : 'AttilaMagyar 8/10/2014 22:05',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '956' ],		#self : OmReference [ '957' ],		#time : DateAndTime [ '2017-07-29T14:12:24.786025+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotReturnResponseTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 8/10/2014 20:39',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '957' ],		#self : OmReference [ '958' ],		#time : DateAndTime [ '2017-07-29T14:12:24.78675+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotReturnResponseTest,				#isMetaSide : false			},			#name : #testDirectStreamResponse,			#protocol : #tests,			#sourceCode : 'testDirectStreamResponse\r\tself assert: (TeaTestClient httpGetString: \'/resp2\') equals: \'direct stream\'.\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '958' ],		#self : OmReference [ '959' ],		#time : DateAndTime [ '2017-07-29T14:12:24.78747+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotReturnResponseTest,				#isMetaSide : false			},			#name : #testDirectStringResponse,			#protocol : #tests,			#sourceCode : 'testDirectStringResponse\r\tself assert: (TeaTestClient httpGetString: \'/resp1\') equals: \'direct response\'.\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '959' ],		#self : OmReference [ '960' ],		#time : DateAndTime [ '2017-07-29T14:12:24.788838+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotReturnResponseTest,				#isMetaSide : false			},			#name : #testRedirect,			#protocol : #tests,			#sourceCode : 'testRedirect\r\tself assert: (TeaTestClient httpGetString: \'/redirect\') equals: \'redirected here\'.\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '960' ],		#self : OmReference [ '961' ],		#time : DateAndTime [ '2017-07-29T14:12:24.789605+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRouteSetTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tbefore: { \'/secure/*\' . \'/protected/*\' } -> [ :req | req abort: TeaResponse unauthorized ];\t\r\t\tGET: {\'/a\'. \'/b\'. \'/c\'} -> \'abc\';\r\t\tPOST: { \'/x/<param>\'. \'/y/<param>\' } -> [ :req | req at: #param ];\r\t\tafter: { \'/a\'. \'/b\' } -> [ :req :resp | resp headers at: \'test\' put: \'ab\' ];\r\t\tstart.',			#stamp : 'AttilaMagyar 6/16/2015 18:43',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '961' ],		#self : OmReference [ '962' ],		#time : DateAndTime [ '2017-07-29T14:12:24.790377+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRouteSetTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 6/16/2015 18:21',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '962' ],		#self : OmReference [ '963' ],		#time : DateAndTime [ '2017-07-29T14:12:24.791196+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRouteSetTest,				#isMetaSide : false			},			#name : #testMatchesAnyRouteInAfterFilter,			#protocol : #tests,			#sourceCode : 'testMatchesAnyRouteInAfterFilter\r\t| response |\r\tresponse := TeaTestClient httpGet: \'/a\'.\r\tself assert: (response headers at: \'test\') equals: \'ab\'.\r\t\r\tresponse := TeaTestClient httpGet: \'/b\'.\r\tself assert: (response headers at: \'test\') equals: \'ab\'.\r\t\t\r\tresponse := TeaTestClient httpGet: \'/c\'.\r\tself assert: (response headers at: \'test\' ifAbsent: nil) equals: nil.\r',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '963' ],		#self : OmReference [ '964' ],		#time : DateAndTime [ '2017-07-29T14:12:24.791924+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRouteSetTest,				#isMetaSide : false			},			#name : #testMatchesAnyRouteInBeforeFilter,			#protocol : #tests,			#sourceCode : 'testMatchesAnyRouteInBeforeFilter\r\t| response |\r\tresponse := TeaTestClient httpGet: \'/secure/123\'.\r\tself assert: response code equals: 401.\r\t\r\tresponse := TeaTestClient httpGet: \'/protected/123\'.\r\tself assert: response code equals: 401.\r',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '964' ],		#self : OmReference [ '965' ],		#time : DateAndTime [ '2017-07-29T14:12:24.792634+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRouteSetTest,				#isMetaSide : false			},			#name : #testMatchesAnyRouteInSet,			#protocol : #tests,			#sourceCode : 'testMatchesAnyRouteInSet\r\tself assert: (TeaTestClient httpGetString: \'/a\') equals: \'abc\'.\r\tself assert: (TeaTestClient httpGetString: \'/b\') equals: \'abc\'.\r\tself assert: (TeaTestClient httpGetString: \'/c\') equals: \'abc\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '965' ],		#self : OmReference [ '966' ],		#time : DateAndTime [ '2017-07-29T14:12:24.793363+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRouteSetTest,				#isMetaSide : false			},			#name : #testMatchesAnyRouteInSetWithParams,			#protocol : #tests,			#sourceCode : 'testMatchesAnyRouteInSetWithParams\r\tself assert: (TeaTestClient httpPostString: \'/x/value1\') equals: \'value1\'.\r\tself assert: (TeaTestClient httpPostString: \'/y/value2\') equals: \'value2\'.\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '966' ],		#self : OmReference [ '967' ],		#time : DateAndTime [ '2017-07-29T14:12:24.794137+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRoutingTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tGET: \'/\' -> \'1\';\r\t\tGET: \'/a\' -> \'2\';\r\t\tGET: \'/a/*/b\' -> [ \'3\' ];\r\t\tGET: \'/*/c\' -> [ \'4\' ];\t\r\t\tGET: \'/x/y/*\' -> [ \'5\' ];\r\t\tGET: \'/x/*/*/z/*\' -> [ \'6\' ];\r\t\tany: \'any\' -> \'any\';\r\t\tstart.\t\t',			#stamp : 'AttilaMagyar 4/18/2015 00:09',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '967' ],		#self : OmReference [ '968' ],		#time : DateAndTime [ '2017-07-29T14:12:24.794874+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRoutingTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 7/29/2014 21:59',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '968' ],		#self : OmReference [ '969' ],		#time : DateAndTime [ '2017-07-29T14:12:24.795605+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRoutingTest,				#isMetaSide : false			},			#name : #test404,			#protocol : #tests,			#sourceCode : 'test404\r \tself assert: (TeaTestClient httpGet: \'1/2/3/4\') code equals: 404',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '969' ],		#self : OmReference [ '970' ],		#time : DateAndTime [ '2017-07-29T14:12:24.796952+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRoutingTest,				#isMetaSide : false			},			#name : #testAnyMatchesToAnyHttpMethod,			#protocol : #tests,			#sourceCode : 'testAnyMatchesToAnyHttpMethod\r \tself assert: (TeaTestClient httpGetString: \'any\') equals: \'any\'.\r \tself assert: (TeaTestClient httpPostString: \'any\') equals: \'any\'.\r \tself assert: (TeaTestClient httpPutString: \'any\') equals: \'any\'.\t\r \tself assert: (TeaTestClient httpDeleteString: \'any\') equals: \'any\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '970' ],		#self : OmReference [ '971' ],		#time : DateAndTime [ '2017-07-29T14:12:24.797697+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRoutingTest,				#isMetaSide : false			},			#name : #testMultipleWildcard,			#protocol : #tests,			#sourceCode : 'testMultipleWildcard\r\tself assert: (TeaTestClient httpGetString: \'x/foo/bar/z/baz\') equals: \'6\'.\r\tself assert: (TeaTestClient httpGetString: \'x/foo/bar/z/baz/123\') equals: \'6\'.\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '971' ],		#self : OmReference [ '972' ],		#time : DateAndTime [ '2017-07-29T14:12:24.798421+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRoutingTest,				#isMetaSide : false			},			#name : #testNoWildcard,			#protocol : #tests,			#sourceCode : 'testNoWildcard\r\tself assert: (TeaTestClient httpGetString: \'\') equals: \'1\'.\r\tself assert: (TeaTestClient httpGetString: \'/a\') equals: \'2\'.\t\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '972' ],		#self : OmReference [ '973' ],		#time : DateAndTime [ '2017-07-29T14:12:24.799123+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRoutingTest,				#isMetaSide : false			},			#name : #testWildcardEnd,			#protocol : #tests,			#sourceCode : 'testWildcardEnd\r\tself assert: (TeaTestClient httpGetString: \'/x/y/foo\') equals: \'5\'.\t\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '973' ],		#self : OmReference [ '974' ],		#time : DateAndTime [ '2017-07-29T14:12:24.799826+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRoutingTest,				#isMetaSide : false			},			#name : #testWildcardFirst,			#protocol : #tests,			#sourceCode : 'testWildcardFirst\r\tself assert: (TeaTestClient httpGetString: \'foo/c\') equals: \'4\'\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '974' ],		#self : OmReference [ '975' ],		#time : DateAndTime [ '2017-07-29T14:12:24.800548+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotRoutingTest,				#isMetaSide : false			},			#name : #testWildcardInside,			#protocol : #tests,			#sourceCode : 'testWildcardInside\r\tself assert: (TeaTestClient httpGetString: \'a/bar/b\') equals: \'3\'\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '975' ],		#self : OmReference [ '976' ],		#time : DateAndTime [ '2017-07-29T14:12:24.801287+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotStaticFilesTest,				#isMetaSide : false			},			#name : #createTempHtdocs,			#protocol : #private,			#sourceCode : 'createTempHtdocs\r\t| tmpHtdocs |\r\ttmpHtdocs := FileLocator temp asFileReference / \'test_htdocs\'.\r\ttmpHtdocs createDirectory.\r\ttmpHtdocs / \'index.html\' writeStreamDo: [ :stream | stream nextPutAll: \'static index\' ].\r\ttmpHtdocs / \'a.txt\' writeStreamDo: [ :stream | stream nextPutAll: \'a\' ].\r\ttmpHtdocs / \'b.txt\' writeStreamDo: [ :stream | stream nextPutAll: \'static\' ].\r\t^ tmpHtdocs',			#stamp : 'AttilaMagyar 8/3/2014 11:14',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '976' ],		#self : OmReference [ '977' ],		#time : DateAndTime [ '2017-07-29T14:12:24.802056+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotStaticFilesTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\thtdocs := self createTempHtdocs.\r\tserver := Teapot on\r\t\tGET: \'here/are/statics/b.txt\' -> \'dynamic\';\r\t\tserveStatic: \'here/are/statics\' from: htdocs;\r\t\tstart',			#stamp : 'AttilaMagyar 8/3/2014 11:19',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '977' ],		#self : OmReference [ '978' ],		#time : DateAndTime [ '2017-07-29T14:12:24.802805+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotStaticFilesTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\thtdocs deleteAll.\r\tserver stop.',			#stamp : 'AttilaMagyar 8/3/2014 11:16',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '978' ],		#self : OmReference [ '979' ],		#time : DateAndTime [ '2017-07-29T14:12:24.804197+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotStaticFilesTest,				#isMetaSide : false			},			#name : #testDynamicContentServedBeforeStatic,			#protocol : #tests,			#sourceCode : 'testDynamicContentServedBeforeStatic\r\tself assert: (TeaTestClient httpGetString: \'here/are/statics/b.txt\') equals: \'dynamic\'.\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '979' ],		#self : OmReference [ '980' ],		#time : DateAndTime [ '2017-07-29T14:12:24.804987+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotStaticFilesTest,				#isMetaSide : false			},			#name : #testStaticFile,			#protocol : #tests,			#sourceCode : 'testStaticFile\r\tself assert: (TeaTestClient httpGetString: \'here/are/statics/a.txt\') equals: \'a\'.\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '980' ],		#self : OmReference [ '981' ],		#time : DateAndTime [ '2017-07-29T14:12:24.805704+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotStaticFilesTest,				#isMetaSide : false			},			#name : #testStaticIndexHtml,			#protocol : #tests,			#sourceCode : 'testStaticIndexHtml\r\tself assert: (TeaTestClient httpGetString: \'here/are/statics\') equals: \'static index\'.\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '981' ],		#self : OmReference [ '982' ],		#time : DateAndTime [ '2017-07-29T14:12:24.806411+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotStaticFilesTest,				#isMetaSide : false			},			#name : #testStaticNotFound,			#protocol : #tests,			#sourceCode : 'testStaticNotFound\r\tself assert: (TeaTestClient httpGet: \'here/are/statics/notfound.txt\') code equals: 404.\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '982' ],		#self : OmReference [ '983' ],		#time : DateAndTime [ '2017-07-29T14:12:24.807179+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotStreamingTest,				#isMetaSide : false			},			#name : #content,			#protocol : #private,			#sourceCode : 'content\r\t^ (ByteArray new: 4096 withAll: 65) asString',			#stamp : 'AttilaMagyar 8/8/2014 20:16',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '983' ],		#self : OmReference [ '984' ],		#time : DateAndTime [ '2017-07-29T14:12:24.80791+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotStreamingTest,				#isMetaSide : false			},			#name : #createDownloadableFile,			#protocol : #private,			#sourceCode : 'createDownloadableFile\r\t| file |\r\tfile := FileLocator temp asFileReference / \'download.file\'.\r\tfile writeStreamDo: [ :stream | stream nextPutAll: self content ].\r\t^ file\r',			#stamp : 'AttilaMagyar 8/8/2014 20:14',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '984' ],		#self : OmReference [ '985' ],		#time : DateAndTime [ '2017-07-29T14:12:24.80863+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotStreamingTest,				#isMetaSide : false			},			#name : #deleteDownloadableFile,			#protocol : #private,			#sourceCode : 'deleteDownloadableFile\r\tdownloadFile delete',			#stamp : 'AttilaMagyar 8/8/2014 20:12',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '985' ],		#self : OmReference [ '986' ],		#time : DateAndTime [ '2017-07-29T14:12:24.809342+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotStreamingTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tdownloadFile := self createDownloadableFile.\r\tserver := Teapot on\r\t\tGET: \'/stream\' -> downloadFile readStream;\r\t\toutput: #stream;\r\t\tstart',			#stamp : 'AttilaMagyar 8/10/2014 20:29',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '986' ],		#self : OmReference [ '987' ],		#time : DateAndTime [ '2017-07-29T14:12:24.810322+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotStreamingTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tself deleteDownloadableFile.\r\tserver stop.',			#stamp : 'AttilaMagyar 8/8/2014 20:11',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '987' ],		#self : OmReference [ '988' ],		#time : DateAndTime [ '2017-07-29T14:12:24.811442+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotStreamingTest,				#isMetaSide : false			},			#name : #testStreamingContent,			#protocol : #tests,			#sourceCode : 'testStreamingContent\r\tself \r\t\tassert: (TeaTestClient httpGet: \'/stream\') contents asString \r\t\tequals: self content\r\t',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '988' ],		#self : OmReference [ '989' ],		#time : DateAndTime [ '2017-07-29T14:12:24.813344+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotTeaResponseTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tGET: \'/ok\' -> (TeaResponse ok body: \'tested ok\');\r\t\tGET: \'/badrequest\' -> [:req | TeaResponse badRequest body: \'Bad Request\'];\r\t\tGET: \'/created\' -> [:req | TeaResponse created body: \'Created\'; location: req url];\r\t\tGET: \'/notallowed\' -> [:req | TeaResponse methodNotAllowed ];\r\t\tGET: \'/notfound\' -> [:req | TeaResponse notFound ];\r\t\tGET: \'/notmodified\' -> [:req | TeaResponse notModified ];\r\t\tGET: \'/redirect\' -> (TeaResponse redirect location: \'/target\');\r\t\tGET: \'/servererror\' -> (TeaResponse serverError body: \'tested server error\');\r\t\tGET: \'/unauthorized\' -> (TeaResponse unauthorized body: \'Unauthorized\'; headerName: \'WWW-Authenticate\' value: \'tested unauthorized\');\r\t\tstart',			#stamp : 'AttilaNamed 3/1/2015 00:03',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '989' ],		#self : OmReference [ '990' ],		#time : DateAndTime [ '2017-07-29T14:12:24.814341+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotTeaResponseTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop.',			#stamp : 'AttilaMagyar 10/13/2014 19:35',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '990' ],		#self : OmReference [ '991' ],		#time : DateAndTime [ '2017-07-29T14:12:24.815165+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotTeaResponseTest,				#isMetaSide : false			},			#name : #testBadRequest,			#protocol : #tests,			#sourceCode : 'testBadRequest\r\t| response |\r\tresponse := TeaTestClient httpGet: \'/badrequest\'.\r\tself assert: response code equals: 400.\r\tself assert: response entity string equals: \'Bad Request\'',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '991' ],		#self : OmReference [ '992' ],		#time : DateAndTime [ '2017-07-29T14:12:24.816033+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotTeaResponseTest,				#isMetaSide : false			},			#name : #testCreated,			#protocol : #tests,			#sourceCode : 'testCreated\r\t| response |\r\tresponse := TeaTestClient httpGet: \'/created\'.\r\tself assert: response code equals: 201.\r\tself assert: response entity string equals: \'Created\'.\r\tself assert: (response headers at: \'Location\') equals: \'/created\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '992' ],		#self : OmReference [ '993' ],		#time : DateAndTime [ '2017-07-29T14:12:24.816846+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotTeaResponseTest,				#isMetaSide : false			},			#name : #testMethodNotAllowed,			#protocol : #tests,			#sourceCode : 'testMethodNotAllowed\r\t| response |\r\tresponse := TeaTestClient httpGet: \'/notallowed\'.\r\tself assert: response code equals: 405.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '993' ],		#self : OmReference [ '994' ],		#time : DateAndTime [ '2017-07-29T14:12:24.81763+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotTeaResponseTest,				#isMetaSide : false			},			#name : #testNotFound,			#protocol : #tests,			#sourceCode : 'testNotFound\r\t| response |\r\tresponse := TeaTestClient httpGet: \'/notfound\'.\r\tself assert: response code equals: 404.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '994' ],		#self : OmReference [ '995' ],		#time : DateAndTime [ '2017-07-29T14:12:24.818434+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotTeaResponseTest,				#isMetaSide : false			},			#name : #testNotModified,			#protocol : #tests,			#sourceCode : 'testNotModified\r\t| response |\r\tresponse := TeaTestClient httpGet: \'/notmodified\'.\r\tself assert: response code equals: 304.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '995' ],		#self : OmReference [ '996' ],		#time : DateAndTime [ '2017-07-29T14:12:24.819216+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotTeaResponseTest,				#isMetaSide : false			},			#name : #testOk,			#protocol : #tests,			#sourceCode : 'testOk\r\t| response |\r\tresponse := TeaTestClient httpGet: \'/ok\'.\r\tself assert: response code equals: 200.\r\tself assert: response entity string equals: \'tested ok\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '996' ],		#self : OmReference [ '997' ],		#time : DateAndTime [ '2017-07-29T14:12:24.819981+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotTeaResponseTest,				#isMetaSide : false			},			#name : #testRedirect,			#protocol : #tests,			#sourceCode : 'testRedirect\r\t| response |\r\tresponse := TeaTestClient httpGetNoRedirect: \'/redirect\'.\r\tself assert: response code equals: 302.\r\tself assert: (response headers at: \'Location\') equals: \'/target\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '997' ],		#self : OmReference [ '998' ],		#time : DateAndTime [ '2017-07-29T14:12:24.821585+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotTeaResponseTest,				#isMetaSide : false			},			#name : #testServerError,			#protocol : #tests,			#sourceCode : 'testServerError\r\t| response |\r\tresponse := TeaTestClient httpGet: \'/servererror\'.\r\tself assert: response code equals: 500.\r\tself assert: response entity string equals: \'tested server error\'',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '998' ],		#self : OmReference [ '999' ],		#time : DateAndTime [ '2017-07-29T14:12:24.822362+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotTeaResponseTest,				#isMetaSide : false			},			#name : #testUnauthorized,			#protocol : #tests,			#sourceCode : 'testUnauthorized\r\t| response |\r\tresponse := TeaTestClient httpGet: \'/unauthorized\'.\r\tself assert: response code equals: 401.\r\tself assert: response entity string equals: \'Unauthorized\'.\r\tself assert: (response headers at: \'WWW-Authenticate\') equals: \'tested unauthorized\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '999' ],		#self : OmReference [ '1000' ],		#time : DateAndTime [ '2017-07-29T14:12:24.823216+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotWhenClauseTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tserver := Teapot on\r\t\tany: \'/when\' -> \'get\'; when: [:req | req method = \'GET\'];\r\t\tany: \'/when\' -> \'post\'; when: [:req | req method = \'POST\'];\r\t\tany: \'/when/<p>\' -> \'param-dispatch\'; when: [:req | (req at: #p) = \'pval\'];\r\t\tany: \'/when\' -> \'unfiltered\';\r\t\tany: \'/never\' -> \'never match\'; when: [ false ];\r\t\tbefore: \'/*\' -> [:req | \r\t\t\treq abort: (TeaResponse ok body: \'before\') ]; \r\t\t\twhen: [:req | req relativeUrl path = \'beforeurl\' ];\r\t\tafter: \'/*\' -> [:req :resp | \r\t\t\tresp statusLine: ZnStatusLine ok. \r\t\t\tresp entity: (ZnStringEntity text: \'after\') ]; \r\t\t\twhen: [:req | req relativeUrl path = \'afterurl\' ];\r\t\tstart',			#stamp : 'AttilaMagyar 5/8/2015 20:01',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1000' ],		#self : OmReference [ '1001' ],		#time : DateAndTime [ '2017-07-29T14:12:24.824072+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotWhenClauseTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tserver stop',			#stamp : 'AttilaMagyar 5/4/2015 21:23',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1001' ],		#self : OmReference [ '1002' ],		#time : DateAndTime [ '2017-07-29T14:12:24.82486+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotWhenClauseTest,				#isMetaSide : false			},			#name : #testDispatchesOnMethodInWhenFilter,			#protocol : #tests,			#sourceCode : 'testDispatchesOnMethodInWhenFilter\r\tself \r\t\tassert: (TeaTestClient httpGetString: \'/when\') \r\t\tequals: \'get\'.\t\r\tself \r\t\tassert: (TeaTestClient httpPutString: \'/when/pval\') \r\t\tequals: \'param-dispatch\'.\r\tself \r\t\tassert: (TeaTestClient httpPostString: \'/when\') \r\t\tequals: \'post\'.\r\tself \r\t\tassert: (TeaTestClient httpDeleteString: \'/when\') \r\t\tequals: \'unfiltered\'.\r\t\t\r\tself assert: (TeaTestClient httpGet: \'/never\') isNotFound.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1002' ],		#self : OmReference [ '1003' ],		#time : DateAndTime [ '2017-07-29T14:12:24.825656+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TeapotWhenClauseTest,				#isMetaSide : false			},			#name : #testWhenClauseWithBeforeAfterFilter,			#protocol : #tests,			#sourceCode : 'testWhenClauseWithBeforeAfterFilter\r\tself \r\t\tassert: (TeaTestClient httpGetString: \'beforeurl\') \r\t\tequals: \'before\'.\r\tself \r\t\tassert: (TeaTestClient httpGetString: \'afterurl\') \r\t\tequals: \'after\'.',			#stamp : 'AttilaMagyar 10/25/2015 17:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1003' ],		#self : OmReference [ '1004' ],		#time : DateAndTime [ '2017-07-29T14:12:24.826518+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaTestClient class',				#isMetaSide : true			},			#name : #'httpDeleteString:',			#protocol : #private,			#sourceCode : 'httpDeleteString: aString\r\t^ ZnClient new\r\t\turl: \'http://localhost:1701/\', aString;\r\t\tdelete\r\r\t',			#stamp : 'AttilaMagyar 4/18/2015 00:06',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1004' ],		#self : OmReference [ '1005' ],		#time : DateAndTime [ '2017-07-29T14:12:24.827325+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaTestClient class',				#isMetaSide : true			},			#name : #'httpGet:',			#protocol : #private,			#sourceCode : 'httpGet: aString\r\t^ ZnEasy get: \'http://localhost:1701/\', aString\r\r\t',			#stamp : 'AttilaMagyar 8/13/2014 21:00',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1005' ],		#self : OmReference [ '1006' ],		#time : DateAndTime [ '2017-07-29T14:12:24.828073+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaTestClient class',				#isMetaSide : true			},			#name : #'httpGetNoRedirect:',			#protocol : #private,			#sourceCode : 'httpGetNoRedirect: aString\r\t^ ZnClient new\r\t\tfollowRedirects: false;\r\t\tget: \'http://localhost:1701/\', aString;\t\t\r\t\tresponse\r\r\t',			#stamp : 'AttilaMagyar 10/13/2014 19:52',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1006' ],		#self : OmReference [ '1007' ],		#time : DateAndTime [ '2017-07-29T14:12:24.828819+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaTestClient class',				#isMetaSide : true			},			#name : #'httpGetString:',			#protocol : #private,			#sourceCode : 'httpGetString: aString\r\t^ (self httpGet: aString) entity string\r\r\t',			#stamp : 'AttilaMagyar 7/29/2014 22:07',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1007' ],		#self : OmReference [ '1008' ],		#time : DateAndTime [ '2017-07-29T14:12:24.830323+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaTestClient class',				#isMetaSide : true			},			#name : #'httpPost:',			#protocol : #private,			#sourceCode : 'httpPost: aString\r\t^ ZnEasy post: \'http://localhost:1701/\', aString data: (ZnEntity text: \'any\')\r\r\t',			#stamp : 'AttilaMagyar 8/13/2014 21:00',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1008' ],		#self : OmReference [ '1009' ],		#time : DateAndTime [ '2017-07-29T14:12:24.83105+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaTestClient class',				#isMetaSide : true			},			#name : #'httpPostString:',			#protocol : #private,			#sourceCode : 'httpPostString: aString\r\t^ (self httpPost: aString) entity string\r\r\t',			#stamp : 'AttilaMagyar 7/29/2014 22:26',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1009' ],		#self : OmReference [ '1010' ],		#time : DateAndTime [ '2017-07-29T14:12:24.831871+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaTestClient class',				#isMetaSide : true			},			#name : #'httpPut:',			#protocol : #private,			#sourceCode : 'httpPut: aString\r\t^ ZnEasy put: \'http://localhost:1701/\', aString data: (ZnEntity text: \'any\')\r\r\t',			#stamp : 'AttilaMagyar 4/18/2015 00:03',			#package : #Teapot-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1010' ],		#self : OmReference [ '1011' ],		#time : DateAndTime [ '2017-07-29T14:12:24.832605+09:00' ],		#trigger : OmReference [ '854' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TeaTestClient class',				#isMetaSide : true			},			#name : #'httpPutString:',			#protocol : #private,			#sourceCode : 'httpPutString: aString\r\t^ (self httpPut: aString) entity string\r\r\t',			#stamp : 'AttilaMagyar 4/18/2015 00:03',			#package : #Teapot-Tests		}	}}