THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>shout
26 April 2017 10:56:58.069423 am

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

ByteString(Object)>>doesNotUnderstand: #shout
	Receiver: 'No panic'
	Arguments and temporary variables: 
		aMessage: 	shout
		exception: 	MessageNotUnderstood: ByteString>>shout
		resumeValue: 	nil
	Receiver's instance variables: 
'No panic'

StringTest>>testShout
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


StringTest(TestCase)>>performTest
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ self setUp.
self performTest ] in StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		timeStamp: 	2017-04-26T10:56:58.043362+09:00
		failures: 	a Set()
		errors: 	an OrderedCollection(StringTest>>#testShout)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase annou...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	74
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		timeStamp: 	2017-04-26T10:56:58.043362+09:00
		failures: 	a Set()
		errors: 	an OrderedCollection(StringTest>>#testShout)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>debug
		startpc: 	50
		numArgs: 	0


StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 
		each: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(StringTest>>#testShout)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each debug.
self announceTest: each.
self changed: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(StringTest>>#testShout nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>debug
		startpc: 	48
		numArgs: 	0


TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(701739264) a SearchMorph(197293312...etc...
		announceur: 	nil
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(StringTest)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3670624614
		result: 	422 run, 421 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]
		packages: 	#(#'Collections-Tests-Strings')
		packagesSelected: 	a Set(#'Collections-Tests-Strings')
		packagePattern: 	a RxMatcher
		packageIndex: 	1


BlockClosure>>cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		anArg: 	a TestSuite
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		firstArg: 	a TestSuite
		secondArg: 	422 run, 421 passes, 0 skipped, 0 expected failures, 0 failures, 1 e...etc...
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(701739264) a SearchMorph(197293312...etc...
		announceur: 	nil
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(StringTest)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3670624614
		result: 	422 run, 421 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]
		packages: 	#(#'Collections-Tests-Strings')
		packagesSelected: 	a Set(#'Collections-Tests-Strings')
		packagePattern: 	a RxMatcher
		packageIndex: 	1


BlockClosure>>ensure:
	Receiver: [ aBlock cull: aTestSuite cull: result ]
	Arguments and temporary variables: 
		aBlock: 	[ aTestSuite unsubscribe: TestAnnouncement ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>executeSuite:as:
		startpc: 	49
		numArgs: 	0


TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(701739264) a SearchMorph(197293312...etc...
		announceur: 	nil
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(StringTest)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3670624614
		result: 	422 run, 421 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]
		packages: 	#(#'Collections-Tests-Strings')
		packagesSelected: 	a Set(#'Collections-Tests-Strings')
		packagePattern: 	a RxMatcher
		packageIndex: 	1


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(701739264) a SearchMorph(197293312...etc...
		announceur: 	nil
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(StringTest)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3670624614
		result: 	422 run, 421 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]
		packages: 	#(#'Collections-Tests-Strings')
		packagesSelected: 	a Set(#'Collections-Tests-Strings')
		packagePattern: 	a RxMatcher
		packageIndex: 	1


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(701739264) a SearchMorph(197293312...etc...
		announceur: 	nil
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(StringTest)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3670624614
		result: 	422 run, 421 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]
		packages: 	#(#'Collections-Tests-Strings')
		packagesSelected: 	a Set(#'Collections-Tests-Strings')
		packagePattern: 	a RxMatcher
		packageIndex: 	1


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(701739264) a SearchMorph(197293312...etc...
		announceur: 	nil
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(StringTest)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3670624614
		result: 	422 run, 421 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]
		packages: 	#(#'Collections-Tests-Strings')
		packagesSelected: 	a Set(#'Collections-Tests-Strings')
		packagePattern: 	a RxMatcher
		packageIndex: 	1


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(248671488)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	(420.0@405.0) corner: (761.0@604.0)
		owner: 	a SystemWindow(701739264)
		submorphs: 	an Array(a TransformMorph(527880448))
		fullBounds: 	(420@405) corner: (761@604)
		color: 	Color white
		extension: 	a MorphExtension (79667200) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(11651328)
		scroller: 	a TransformMorph(527880448)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(406084608)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(421746688)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(248671488)
	Arguments and temporary variables: 
		event: 	[(514@411) mouseUp 402749 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	(420.0@405.0) corner: (761.0@604.0)
		owner: 	a SystemWindow(701739264)
		submorphs: 	an Array(a TransformMorph(527880448))
		fullBounds: 	(420@405) corner: (761@604)
		color: 	Color white
		extension: 	a MorphExtension (79667200) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(11651328)
		scroller: 	a TransformMorph(527880448)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(406084608)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(421746688)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(248671488)
	Arguments and temporary variables: 
		evt: 	[(514@411) mouseUp 402749 nil]
	Receiver's instance variables: 
		bounds: 	(420.0@405.0) corner: (761.0@604.0)
		owner: 	a SystemWindow(701739264)
		submorphs: 	an Array(a TransformMorph(527880448))
		fullBounds: 	(420@405) corner: (761@604)
		color: 	Color white
		extension: 	a MorphExtension (79667200) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(11651328)
		scroller: 	a TransformMorph(527880448)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(406084608)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(421746688)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(248671488)
	Arguments and temporary variables: 
		anEvent: 	[(514@411) mouseUp 402749 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(420.0@405.0) corner: (761.0@604.0)
		owner: 	a SystemWindow(701739264)
		submorphs: 	an Array(a TransformMorph(527880448))
		fullBounds: 	(420@405) corner: (761@604)
		color: 	Color white
		extension: 	a MorphExtension (79667200) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(11651328)
		scroller: 	a TransformMorph(527880448)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(406084608)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(421746688)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(514@411) mouseUp 402749 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(248671488)
	Receiver's instance variables: 
		timeStamp: 	402749
		source: 	a HandMorph(237973760)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(514@411)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(248671488)
	Arguments and temporary variables: 
		anEvent: 	[(514@411) mouseUp 402749 nil]
	Receiver's instance variables: 
		bounds: 	(420.0@405.0) corner: (761.0@604.0)
		owner: 	a SystemWindow(701739264)
		submorphs: 	an Array(a TransformMorph(527880448))
		fullBounds: 	(420@405) corner: (761@604)
		color: 	Color white
		extension: 	a MorphExtension (79667200) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(11651328)
		scroller: 	a TransformMorph(527880448)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(406084608)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(421746688)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(514@411) mouseUp 402749 nil]
		aMorph: 	a PluggableListMorph(248671488)
		localEvt: 	[(514@411) mouseUp 402749 nil]
		index: 	2
		child: 	a TransformMorph(527880448)
		morphs: 	an Array(a TransformMorph(527880448))
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(514@411) mouseUp 402749 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(514@411) mouseUp 402749 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	402749
		source: 	a HandMorph(237973760)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(514@411)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(514@411) mouseUp 402749 nil]
		aMorph: 	a PluggableListMorph(248671488)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(514@411) mouseUp 402749 nil]
		aMorph: 	a PluggableListMorph(248671488)
	Receiver's instance variables: 
		morph: 	nil


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(248671488)
	Arguments and temporary variables: 
		anEvent: 	[(514@411) mouseUp 402749 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(420.0@405.0) corner: (761.0@604.0)
		owner: 	a SystemWindow(701739264)
		submorphs: 	an Array(a TransformMorph(527880448))
		fullBounds: 	(420@405) corner: (761@604)
		color: 	Color white
		extension: 	a MorphExtension (79667200) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(11651328)
		scroller: 	a TransformMorph(527880448)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(406084608)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(421746688)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #shout
StringTest>>testShout
StringTest(TestCase)>>performTest
[ self setUp.
self performTest ] in StringTest(TestCase)>>runCase
BlockClosure>>ensure:
StringTest(TestCase)>>runCase
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in StringTest(TestCase)>>debug
BlockClosure>>ensure:
StringTest(TestCase)>>debug
[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
OrderedCollection>>do:
[ self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
BlockClosure>>ensure:
TestSuite>>debug
[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
BlockClosure>>ensure:
TestRunner>>executeSuite:as:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>shout
26 April 2017 10:57:17.513804 am

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

ByteString(Object)>>doesNotUnderstand: #shout
	Receiver: 'No panic'
	Arguments and temporary variables: 
		aMessage: 	shout
		exception: 	MessageNotUnderstood: ByteString>>shout
		resumeValue: 	nil
	Receiver's instance variables: 
'No panic'

StringTest>>testShout
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


StringTest(TestCase)>>performTest
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ self setUp.
self performTest ] in StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


StringTest(TestCase)>>runCase
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		timeStamp: 	2017-04-26T10:57:17.50664+09:00
		failures: 	a Set()
		errors: 	an OrderedCollection(StringTest>>#testShout)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase annou...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	74
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		timeStamp: 	2017-04-26T10:57:17.50664+09:00
		failures: 	a Set()
		errors: 	an OrderedCollection(StringTest>>#testShout)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	StringTest(TestCase)>>debug
		startpc: 	50
		numArgs: 	0


StringTest(TestCase)>>debug
	Receiver: StringTest>>#testShout
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testShout
		expectedFails: 	#()
		string: 	'Hi, I am a String'
		emptyString: 	''
		elementInNonEmpty: 	$c
		notIn: 	$z
		nonEmpty1element: 	'a'
		withoutEqualElements: 	'abcde'
		collectionNotIncluded: 	'nilnil'
		indexInNonEmptyArray: 	#(1 3 2)
		sameAtEndAndBegining: 	'abca'
		nonEmpty5ElementsSorted: 	'abcde'
		unsortedCollection: 	'zseba'
		subcollection3ElementsSorted: 	'bcd'
		arrayWithCharacters: 	#($a $b $c)


[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 
		each: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


OrderedCollection>>do:
	Receiver: an OrderedCollection(StringTest>>#testShout)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each debug.
self announceTest: each.
self changed: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(StringTest>>#testShout nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [ self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestSuite>>debug
		startpc: 	48
		numArgs: 	0


TestSuite>>debug
	Receiver: a TestSuite
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		tests: 	an OrderedCollection(StringTest>>#testShout)
		resources: 	an OrderedCollection()
		name: 	nil
		announcer: 	an Announcer


[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(701739264) a SearchMorph(197293312...etc...
		announceur: 	nil
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(StringTest)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3670624614
		result: 	422 run, 421 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]
		packages: 	#(#'Collections-Tests-Strings')
		packagesSelected: 	a Set(#'Collections-Tests-Strings')
		packagePattern: 	a RxMatcher
		packageIndex: 	1


BlockClosure>>cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		anArg: 	a TestSuite
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :aSuite | aSuite debug ]
	Arguments and temporary variables: 
		firstArg: 	a TestSuite
		secondArg: 	422 run, 421 passes, 0 skipped, 0 expected failures, 0 failures, 1 e...etc...
	Receiver's instance variables: 
		outerContext: 	TestRunner>>debugSuite:
		startpc: 	27
		numArgs: 	1


[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(701739264) a SearchMorph(197293312...etc...
		announceur: 	nil
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(StringTest)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3670624614
		result: 	422 run, 421 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]
		packages: 	#(#'Collections-Tests-Strings')
		packagesSelected: 	a Set(#'Collections-Tests-Strings')
		packagePattern: 	a RxMatcher
		packageIndex: 	1


BlockClosure>>ensure:
	Receiver: [ aBlock cull: aTestSuite cull: result ]
	Arguments and temporary variables: 
		aBlock: 	[ aTestSuite unsubscribe: TestAnnouncement ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TestRunner>>executeSuite:as:
		startpc: 	49
		numArgs: 	0


TestRunner>>executeSuite:as:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
		aBlock: 	[ :aSuite | aSuite debug ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(701739264) a SearchMorph(197293312...etc...
		announceur: 	nil
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(StringTest)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3670624614
		result: 	422 run, 421 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]
		packages: 	#(#'Collections-Tests-Strings')
		packagesSelected: 	a Set(#'Collections-Tests-Strings')
		packagePattern: 	a RxMatcher
		packageIndex: 	1


TestRunner>>debugSuite:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestSuite: 	a TestSuite
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(701739264) a SearchMorph(197293312...etc...
		announceur: 	nil
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(StringTest)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3670624614
		result: 	422 run, 421 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]
		packages: 	#(#'Collections-Tests-Strings')
		packagesSelected: 	a Set(#'Collections-Tests-Strings')
		packagePattern: 	a RxMatcher
		packageIndex: 	1


TestRunner>>debug:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		aTestCase: 	StringTest>>#testShout
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(701739264) a SearchMorph(197293312...etc...
		announceur: 	nil
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(StringTest)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3670624614
		result: 	422 run, 421 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]
		packages: 	#(#'Collections-Tests-Strings')
		packagesSelected: 	a Set(#'Collections-Tests-Strings')
		packagePattern: 	a RxMatcher
		packageIndex: 	1


TestRunner>>errorSelected:
	Receiver: a TestRunner
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(701739264) a SearchMorph(197293312...etc...
		announceur: 	nil
		classes: 	{CharacterTest. StringTest. SymbolTest. ByteSymbolTest. WideStringTest...etc...
		classIndex: 	2
		classesSelected: 	a Set(StringTest)
		failedList: 	#()
		failedSelected: 	nil
		errorList: 	an Array(StringTest>>#testShout)
		errorSelected: 	StringTest>>#testShout
		lastUpdate: 	3670624614
		result: 	422 run, 421 passes, 0 skipped, 0 expected failures, 0 failures, 1 erro...etc...
		previousRun: 	nil
		classPattern: 	nil
		testAnnouncementBlock: 	[ :announcement | self updateStatus: true ]
		packages: 	#(#'Collections-Tests-Strings')
		packagesSelected: 	a Set(#'Collections-Tests-Strings')
		packagePattern: 	a RxMatcher
		packageIndex: 	1


PluggableListMorph>>changeModelSelection:
	Receiver: a PluggableListMorph(248671488)
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		bounds: 	(420.0@405.0) corner: (761.0@604.0)
		owner: 	a SystemWindow(701739264)
		submorphs: 	an Array(a TransformMorph(527880448))
		fullBounds: 	(420@405) corner: (761@604)
		color: 	Color white
		extension: 	a MorphExtension (79667200) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(11651328)
		scroller: 	a TransformMorph(527880448)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(406084608)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(421746688)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUpOnSingle:
	Receiver: a PluggableListMorph(248671488)
	Arguments and temporary variables: 
		event: 	[(484@418) mouseUp 422219 nil]
		row: 	1
		mdr: 	1
	Receiver's instance variables: 
		bounds: 	(420.0@405.0) corner: (761.0@604.0)
		owner: 	a SystemWindow(701739264)
		submorphs: 	an Array(a TransformMorph(527880448))
		fullBounds: 	(420@405) corner: (761@604)
		color: 	Color white
		extension: 	a MorphExtension (79667200) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(11651328)
		scroller: 	a TransformMorph(527880448)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(406084608)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(421746688)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph>>mouseUp:
	Receiver: a PluggableListMorph(248671488)
	Arguments and temporary variables: 
		evt: 	[(484@418) mouseUp 422219 nil]
	Receiver's instance variables: 
		bounds: 	(420.0@405.0) corner: (761.0@604.0)
		owner: 	a SystemWindow(701739264)
		submorphs: 	an Array(a TransformMorph(527880448))
		fullBounds: 	(420@405) corner: (761@604)
		color: 	Color white
		extension: 	a MorphExtension (79667200) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(11651328)
		scroller: 	a TransformMorph(527880448)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(406084608)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(421746688)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


PluggableListMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableListMorph(248671488)
	Arguments and temporary variables: 
		anEvent: 	[(484@418) mouseUp 422219 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(420.0@405.0) corner: (761.0@604.0)
		owner: 	a SystemWindow(701739264)
		submorphs: 	an Array(a TransformMorph(527880448))
		fullBounds: 	(420@405) corner: (761@604)
		color: 	Color white
		extension: 	a MorphExtension (79667200) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(11651328)
		scroller: 	a TransformMorph(527880448)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(406084608)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(421746688)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(484@418) mouseUp 422219 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(248671488)
	Receiver's instance variables: 
		timeStamp: 	422219
		source: 	a HandMorph(237973760)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(484@418)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(248671488)
	Arguments and temporary variables: 
		anEvent: 	[(484@418) mouseUp 422219 nil]
	Receiver's instance variables: 
		bounds: 	(420.0@405.0) corner: (761.0@604.0)
		owner: 	a SystemWindow(701739264)
		submorphs: 	an Array(a TransformMorph(527880448))
		fullBounds: 	(420@405) corner: (761@604)
		color: 	Color white
		extension: 	a MorphExtension (79667200) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(11651328)
		scroller: 	a TransformMorph(527880448)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(406084608)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(421746688)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(484@418) mouseUp 422219 nil]
		aMorph: 	a PluggableListMorph(248671488)
		localEvt: 	[(484@418) mouseUp 422219 nil]
		index: 	2
		child: 	a TransformMorph(527880448)
		morphs: 	an Array(a TransformMorph(527880448))
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(484@418) mouseUp 422219 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(484@418) mouseUp 422219 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	422219
		source: 	a HandMorph(237973760)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(484@418)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(484@418) mouseUp 422219 nil]
		aMorph: 	a PluggableListMorph(248671488)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(484@418) mouseUp 422219 nil]
		aMorph: 	a PluggableListMorph(248671488)
	Receiver's instance variables: 
		morph: 	nil


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(248671488)
	Arguments and temporary variables: 
		anEvent: 	[(484@418) mouseUp 422219 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(420.0@405.0) corner: (761.0@604.0)
		owner: 	a SystemWindow(701739264)
		submorphs: 	an Array(a TransformMorph(527880448))
		fullBounds: 	(420@405) corner: (761@604)
		color: 	Color white
		extension: 	a MorphExtension (79667200) [other:  (announcer -> an Announcer)]
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a TestRunner
		scrollBar: 	a ScrollBar(11651328)
		scroller: 	a TransformMorph(527880448)
		getMenuSelector: 	#errorMenu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(406084608)
		list: 	#('StringTest>>#testShout')
		getListSelector: 	#errorList
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	#errorSelected
		setIndexSelector: 	#errorSelected:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(421746688)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil
		keystrokeSelector: 	nil
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	nil
		canMove: 	true
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #shout
StringTest>>testShout
StringTest(TestCase)>>performTest
[ self setUp.
self performTest ] in StringTest(TestCase)>>runCase
BlockClosure>>ensure:
StringTest(TestCase)>>runCase
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in StringTest(TestCase)>>debug
BlockClosure>>ensure:
StringTest(TestCase)>>debug
[ :each | 
each debug.
self announceTest: each.
self changed: each ] in [ self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
OrderedCollection>>do:
[ self tests
	do: [ :each | 
		each debug.
		self announceTest: each.
		self changed: each ] ] in TestSuite>>debug
BlockClosure>>ensure:
TestSuite>>debug
[ :aSuite | aSuite debug ] in TestRunner>>debugSuite:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ aBlock cull: aTestSuite cull: result ] in TestRunner>>executeSuite:as:
BlockClosure>>ensure:
TestRunner>>executeSuite:as:
TestRunner>>debugSuite:
TestRunner>>debug:
TestRunner>>errorSelected:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CompiledMethod>>bounds:
26 April 2017 4:43:10.223407 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell class>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	nil
	Receiver's instance variables: 
LOCell class>>#initialize

CompiledMethod>>DoIt
	Receiver: LOCell class>>#initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
LOCell class>>#initialize

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self bounds: (200@200 corner: 250@250) '
		itsSelection: 	a Text for 'self bounds: (200@200 corner: 250@250) '
		itsSelectionString: 	'self bounds: (200@200 corner: 250@250) '
	Receiver's instance variables: 
		ast: 	DoIt
	^ self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	LOCell class>>#initialize
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	LOCell class>>#initialize
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913102848)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913102848)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(28013824)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(949156096))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	(325.0@36.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(28013824)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	8283443
		lastStepMessage: 	nil
		lastCycleTime: 	8283463
		alarms: 	a Heap()
		lastAlarmTime: 	8283443
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(98553856) a GLMSyst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	8283443
		lastStepMessage: 	nil
		lastCycleTime: 	8283463
		alarms: 	a Heap()
		lastAlarmTime: 	8283443
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	8283443
		lastStepMessage: 	nil
		lastCycleTime: 	8283463
		alarms: 	a Heap()
		lastAlarmTime: 	8283443
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(860531968)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	8283443
		lastStepMessage: 	nil
		lastCycleTime: 	8283463
		alarms: 	a Heap()
		lastAlarmTime: 	8283443
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(98553856) a GLMSyst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(155007232)
	Arguments and temporary variables: 
		aPoint: 	(859@304)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(913102848)
	Receiver's instance variables: 
		bounds: 	(645.0@296.0) corner: (860.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1030121472)'Do it and go' a ToggleMen...etc...
		fullBounds: 	(645.0@296.0) corner: (860.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (1025965312) [other:  (basicColor -> (Color r: 0.82...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(294216960)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(155007232)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(645.0@296.0) corner: (860.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1030121472)'Do it and go' a ToggleMen...etc...
		fullBounds: 	(645.0@296.0) corner: (860.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (1025965312) [other:  (basicColor -> (Color r: 0.82...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(294216960)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(155007232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(645.0@296.0) corner: (860.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1030121472)'Do it and go' a ToggleMen...etc...
		fullBounds: 	(645.0@296.0) corner: (860.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (1025965312) [other:  (basicColor -> (Color r: 0.82...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(294216960)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(155007232)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(949156096))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	(325.0@36.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(155007232)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(645.0@296.0) corner: (860.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1030121472)'Do it and go' a ToggleMen...etc...
		fullBounds: 	(645.0@296.0) corner: (860.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (1025965312) [other:  (basicColor -> (Color r: 0.82...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(294216960)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(949156096))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	(325.0@36.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		evt: 	[(276.0@40.0) mouseDown yellow 8282401 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(949156096))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	(325.0@36.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		anEvent: 	[(276.0@40.0) mouseDown yellow 8282401 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(949156096))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	(325.0@36.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(276.0@40.0) mouseDown yellow 8282401 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(913102848)
	Receiver's instance variables: 
		timeStamp: 	8282401
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(276.0@40.0)
		handler: 	a RubEditingArea(913102848)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		anEvent: 	[(276.0@40.0) mouseDown yellow 8282401 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(949156096))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	(325.0@36.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(276.0@40.0) mouseDown yellow 8282401 nil]
		aMorph: 	a RubEditingArea(913102848)
		globalPt: 	(276.0@40.0)
		localEvt: 	[(276.0@40.0) mouseDown yellow 8282401 nil]
		index: 	3
		child: 	a RubPrimarySelectionMorph(127351808)
		morphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440))
		handler: 	a RubEditingArea(913102848)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(28013824)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(276.0@40.0) mouseDown yellow 8282401 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(276.0@40.0) mouseDown yellow 8282401 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8282401
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(276.0@40.0)
		handler: 	a RubEditingArea(913102848)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(276.0@40.0) mouseDown yellow 8282401 nil]
		aMorph: 	a RubEditingArea(913102848)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(276.0@40.0) mouseDown yellow 8282401 nil]
		aMorph: 	a RubEditingArea(913102848)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		anEvent: 	[(276.0@40.0) mouseDown yellow 8282401 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(949156096))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	(325.0@36.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(859@304) mouseDown yellow 8282401 nil]
		aMorph: 	a TransformWithLayoutMorph(602493184)
		globalPt: 	(859@304)
		localEvt: 	[(276.0@40.0) mouseDown yellow 8282401 nil]
		index: 	1
		child: 	a RubEditingArea(913102848)
		morphs: 	an Array(a RubEditingArea(913102848))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(28013824)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(859@304) mouseDown yellow 8282401 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(859@304) mouseDown yellow 8282401 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8282401
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(859@304)
		handler: 	a RubScrolledTextMorph(28013824)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(859@304) mouseDown yellow 8282401 nil]
		aMorph: 	a TransformWithLayoutMorph(602493184)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(859@304) mouseDown yellow 8282401 nil]
		aMorph: 	a TransformWithLayoutMorph(602493184)
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(602493184)
	Arguments and temporary variables: 
		anEvent: 	[(859@304) mouseDown yellow 8282401 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(583.0@264.0) corner: (985.0@399.0)
		owner: 	a RubTextScrollPane(720770048)
		submorphs: 	an Array(a RubEditingArea(913102848))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (88544256) [other:  (kmDispatcher -> a KMDispatcher...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-583.0@ -264....etc...
		smoothing: 	1
		localBounds: 	nil


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(859@304) mouseDown yellow 8282401 nil]
		aMorph: 	a RubTextScrollPane(720770048)
		globalPt: 	(859@304)
		localEvt: 	[(859@304) mouseDown yellow 8282401 nil]
		index: 	1
		child: 	a TransformWithLayoutMorph(602493184)
		morphs: 	an Array(a TransformWithLayoutMorph(602493184))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(28013824)
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CompiledMethod>>bounds:
26 April 2017 4:43:33.486678 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell class>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	nil
	Receiver's instance variables: 
LOCell class>>#initialize

CompiledMethod>>DoIt
	Receiver: LOCell class>>#initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
LOCell class>>#initialize

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self bounds: (200@200 corner: 250@250)'
		itsSelection: 	a Text for 'self bounds: (200@200 corner: 250@250)'
		itsSelectionString: 	'self bounds: (200@200 corner: 250@250)'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	LOCell class>>#initialize
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	LOCell class>>#initialize
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913102848)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913102848)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(28013824)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(717788416))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(28013824)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(383741952))(a FadingMorp...etc...
		lastStepTime: 	8306735
		lastStepMessage: 	nil
		lastCycleTime: 	8306757
		alarms: 	a Heap()
		lastAlarmTime: 	8306735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(383741952) a GLMSys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(383741952))(a FadingMorp...etc...
		lastStepTime: 	8306735
		lastStepMessage: 	nil
		lastCycleTime: 	8306757
		alarms: 	a Heap()
		lastAlarmTime: 	8306735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(383741952))(a FadingMorp...etc...
		lastStepTime: 	8306735
		lastStepMessage: 	nil
		lastCycleTime: 	8306757
		alarms: 	a Heap()
		lastAlarmTime: 	8306735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(860531968)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(383741952))(a FadingMorp...etc...
		lastStepTime: 	8306735
		lastStepMessage: 	nil
		lastCycleTime: 	8306757
		alarms: 	a Heap()
		lastAlarmTime: 	8306735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(383741952) a GLMSys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(586760192)
	Arguments and temporary variables: 
		aPoint: 	(629@302)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(913102848)
	Receiver's instance variables: 
		bounds: 	(627.0@294.0) corner: (842.0@532.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(511036672)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(627.0@294.0) corner: (842.0@532.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (658667776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(699946240)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(586760192)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(627.0@294.0) corner: (842.0@532.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(511036672)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(627.0@294.0) corner: (842.0@532.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (658667776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(699946240)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(586760192)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(627.0@294.0) corner: (842.0@532.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(511036672)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(627.0@294.0) corner: (842.0@532.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (658667776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(699946240)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(586760192)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(717788416))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(586760192)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(627.0@294.0) corner: (842.0@532.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(511036672)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(627.0@294.0) corner: (842.0@532.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (658667776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(699946240)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(717788416))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		evt: 	[(46.0@38.0) mouseDown yellow 8305782 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(717788416))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		anEvent: 	[(46.0@38.0) mouseDown yellow 8305782 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(717788416))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(46.0@38.0) mouseDown yellow 8305782 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(913102848)
	Receiver's instance variables: 
		timeStamp: 	8305782
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(46.0@38.0)
		handler: 	a RubEditingArea(913102848)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		anEvent: 	[(46.0@38.0) mouseDown yellow 8305782 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(717788416))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(46.0@38.0) mouseDown yellow 8305782 nil]
		aMorph: 	a RubEditingArea(913102848)
		globalPt: 	(46.0@38.0)
		localEvt: 	[(46.0@38.0) mouseDown yellow 8305782 nil]
		index: 	3
		child: 	a RubPrimarySelectionMorph(127351808)
		morphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440))
		handler: 	a RubEditingArea(913102848)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(28013824)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(46.0@38.0) mouseDown yellow 8305782 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(46.0@38.0) mouseDown yellow 8305782 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8305782
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(46.0@38.0)
		handler: 	a RubEditingArea(913102848)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(46.0@38.0) mouseDown yellow 8305782 nil]
		aMorph: 	a RubEditingArea(913102848)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(46.0@38.0) mouseDown yellow 8305782 nil]
		aMorph: 	a RubEditingArea(913102848)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		anEvent: 	[(46.0@38.0) mouseDown yellow 8305782 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(717788416))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(629@302) mouseDown yellow 8305782 nil]
		aMorph: 	a TransformWithLayoutMorph(602493184)
		globalPt: 	(629@302)
		localEvt: 	[(46.0@38.0) mouseDown yellow 8305782 nil]
		index: 	1
		child: 	a RubEditingArea(913102848)
		morphs: 	an Array(a RubEditingArea(913102848))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(28013824)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(629@302) mouseDown yellow 8305782 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(629@302) mouseDown yellow 8305782 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8305782
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(629@302)
		handler: 	a RubScrolledTextMorph(28013824)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(629@302) mouseDown yellow 8305782 nil]
		aMorph: 	a TransformWithLayoutMorph(602493184)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(629@302) mouseDown yellow 8305782 nil]
		aMorph: 	a TransformWithLayoutMorph(602493184)
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(602493184)
	Arguments and temporary variables: 
		anEvent: 	[(629@302) mouseDown yellow 8305782 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(583.0@264.0) corner: (985.0@399.0)
		owner: 	a RubTextScrollPane(720770048)
		submorphs: 	an Array(a RubEditingArea(913102848))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (88544256) [other:  (kmDispatcher -> a KMDispatcher...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-583.0@ -264....etc...
		smoothing: 	1
		localBounds: 	nil


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(629@302) mouseDown yellow 8305782 nil]
		aMorph: 	a RubTextScrollPane(720770048)
		globalPt: 	(629@302)
		localEvt: 	[(629@302) mouseDown yellow 8305782 nil]
		index: 	1
		child: 	a TransformWithLayoutMorph(602493184)
		morphs: 	an Array(a TransformWithLayoutMorph(602493184))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(28013824)
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CompiledMethod>>bounds:
26 April 2017 4:43:58.792048 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell class>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	nil
	Receiver's instance variables: 
LOCell class>>#initialize

CompiledMethod>>DoIt
	Receiver: LOCell class>>#initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
LOCell class>>#initialize

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self bounds: (200@200 corner: 250@250)'
		itsSelection: 	a Text for 'self bounds: (200@200 corner: 250@250)'
		itsSelectionString: 	'self bounds: (200@200 corner: 250@250)'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	LOCell class>>#initialize
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	LOCell class>>#initialize
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913102848)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913102848)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(28013824)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(899937280))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	(313.0@38.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(28013824)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	8332024
		lastStepMessage: 	nil
		lastCycleTime: 	8332045
		alarms: 	a Heap()
		lastAlarmTime: 	8332024
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(519607552) a GLMSys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	8332024
		lastStepMessage: 	nil
		lastCycleTime: 	8332045
		alarms: 	a Heap()
		lastAlarmTime: 	8332024
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	8332024
		lastStepMessage: 	nil
		lastCycleTime: 	8332045
		alarms: 	a Heap()
		lastAlarmTime: 	8332024
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(860531968)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	8332024
		lastStepMessage: 	nil
		lastCycleTime: 	8332045
		alarms: 	a Heap()
		lastAlarmTime: 	8332024
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(519607552) a GLMSys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(560470272)
	Arguments and temporary variables: 
		aPoint: 	(430@303)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(913102848)
	Receiver's instance variables: 
		bounds: 	(428.0@295.0) corner: (643.0@533.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(490390528)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(428.0@295.0) corner: (643.0@533.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (305098752) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(924395776)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(560470272)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(428.0@295.0) corner: (643.0@533.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(490390528)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(428.0@295.0) corner: (643.0@533.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (305098752) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(924395776)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(560470272)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(428.0@295.0) corner: (643.0@533.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(490390528)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(428.0@295.0) corner: (643.0@533.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (305098752) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(924395776)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(560470272)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(899937280))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	(313.0@38.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(560470272)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(428.0@295.0) corner: (643.0@533.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(490390528)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(428.0@295.0) corner: (643.0@533.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (305098752) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(924395776)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(899937280))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	(313.0@38.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		evt: 	[(269.0@39.0) mouseDown yellow 8330836 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(899937280))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	(313.0@38.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		anEvent: 	[(269.0@39.0) mouseDown yellow 8330836 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(899937280))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	(313.0@38.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(269.0@39.0) mouseDown yellow 8330836 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(913102848)
	Receiver's instance variables: 
		timeStamp: 	8330836
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(269.0@39.0)
		handler: 	a RubEditingArea(913102848)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		anEvent: 	[(269.0@39.0) mouseDown yellow 8330836 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(899937280))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	(313.0@38.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(269.0@39.0) mouseDown yellow 8330836 nil]
		aMorph: 	a RubEditingArea(913102848)
		globalPt: 	(269.0@39.0)
		localEvt: 	[(269.0@39.0) mouseDown yellow 8330836 nil]
		index: 	4
		child: 	a RubPrimarySelectionMorph(127351808)
		morphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440) a...etc...
		handler: 	a RubEditingArea(913102848)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(28013824)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(269.0@39.0) mouseDown yellow 8330836 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(269.0@39.0) mouseDown yellow 8330836 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8330836
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(269.0@39.0)
		handler: 	a RubEditingArea(913102848)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(269.0@39.0) mouseDown yellow 8330836 nil]
		aMorph: 	a RubEditingArea(913102848)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(269.0@39.0) mouseDown yellow 8330836 nil]
		aMorph: 	a RubEditingArea(913102848)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(913102848)
	Arguments and temporary variables: 
		anEvent: 	[(269.0@39.0) mouseDown yellow 8330836 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(602493184)
		submorphs: 	an Array(a RubPrimarySelectionMorph(127351808) a RubCursor(528829440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (807071744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(720770048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(528829440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(899937280))
		getMenuPolicy: 	a RubEditingArea(913102848)
		mouseDownPoint: 	(313.0@38.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(430@303) mouseDown yellow 8330836 nil]
		aMorph: 	a TransformWithLayoutMorph(602493184)
		globalPt: 	(430@303)
		localEvt: 	[(269.0@39.0) mouseDown yellow 8330836 nil]
		index: 	1
		child: 	a RubEditingArea(913102848)
		morphs: 	an Array(a RubEditingArea(913102848))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(28013824)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(430@303) mouseDown yellow 8330836 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(430@303) mouseDown yellow 8330836 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8330836
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(430@303)
		handler: 	a RubScrolledTextMorph(28013824)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(430@303) mouseDown yellow 8330836 nil]
		aMorph: 	a TransformWithLayoutMorph(602493184)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(430@303) mouseDown yellow 8330836 nil]
		aMorph: 	a TransformWithLayoutMorph(602493184)
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(602493184)
	Arguments and temporary variables: 
		anEvent: 	[(430@303) mouseDown yellow 8330836 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(161.0@264.0) corner: (563.0@399.0)
		owner: 	a RubTextScrollPane(720770048)
		submorphs: 	an Array(a RubEditingArea(913102848))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (88544256) [other:  (kmDispatcher -> a KMDispatcher...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-161.0@ -264....etc...
		smoothing: 	1
		localBounds: 	nil


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(430@303) mouseDown yellow 8330836 nil]
		aMorph: 	a RubTextScrollPane(720770048)
		globalPt: 	(430@303)
		localEvt: 	[(430@303) mouseDown yellow 8330836 nil]
		index: 	1
		child: 	a TransformWithLayoutMorph(602493184)
		morphs: 	an Array(a TransformWithLayoutMorph(602493184))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(28013824)
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CompiledMethod>>bounds:
26 April 2017 5:08:52.89099 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	nil
	Receiver's instance variables: 
LOCell>>#initialize

CompiledMethod>>DoIt
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
LOCell>>#initialize

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self bounds: (200@200 corner: 250@250)'
		itsSelection: 	a Text for 'self bounds: (200@200 corner: 250@250)'
		itsSelectionString: 	'self bounds: (200@200 corner: 250@250)'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	LOCell>>#initialize
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	LOCell>>#initialize
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(677783808)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(677783808)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(824124672)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(824124672)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	9826117
		lastStepMessage: 	nil
		lastCycleTime: 	9826139
		alarms: 	a Heap()
		lastAlarmTime: 	9826117
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(379593984) a GLMSys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	9826117
		lastStepMessage: 	nil
		lastCycleTime: 	9826139
		alarms: 	a Heap()
		lastAlarmTime: 	9826117
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	9826117
		lastStepMessage: 	nil
		lastCycleTime: 	9826139
		alarms: 	a Heap()
		lastAlarmTime: 	9826117
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(860531968)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	9826117
		lastStepMessage: 	nil
		lastCycleTime: 	9826139
		alarms: 	a Heap()
		lastAlarmTime: 	9826117
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(379593984) a GLMSys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 
		aPoint: 	(608@304)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(431272960)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		evt: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(25.0@40.0) mouseDown yellow 9825289 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		timeStamp: 	9825289
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(25.0@40.0)
		handler: 	a RubEditingArea(677783808)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		aMorph: 	a RubEditingArea(677783808)
		globalPt: 	(25.0@40.0)
		localEvt: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		index: 	3
		child: 	a RubPrimarySelectionMorph(949177600)
		morphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536))
		handler: 	a RubEditingArea(677783808)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(824124672)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(25.0@40.0) mouseDown yellow 9825289 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	9825289
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(25.0@40.0)
		handler: 	a RubEditingArea(677783808)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		aMorph: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		aMorph: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
		aMorph: 	a TransformWithLayoutMorph(188677120)
		globalPt: 	(608@304)
		localEvt: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		index: 	1
		child: 	a RubEditingArea(677783808)
		morphs: 	an Array(a RubEditingArea(677783808))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(824124672)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(608@304) mouseDown yellow 9825289 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	9825289
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(608@304)
		handler: 	a RubScrolledTextMorph(824124672)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
		aMorph: 	a TransformWithLayoutMorph(188677120)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
		aMorph: 	a TransformWithLayoutMorph(188677120)
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(188677120)
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(583.0@264.0) corner: (985.0@399.0)
		owner: 	a RubTextScrollPane(192603136)
		submorphs: 	an Array(a RubEditingArea(677783808))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (819403776)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-583.0@ -264....etc...
		smoothing: 	1
		localBounds: 	nil


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
		aMorph: 	a RubTextScrollPane(192603136)
		globalPt: 	(608@304)
		localEvt: 	[(608@304) mouseDown yellow 9825289 nil]
		index: 	1
		child: 	a TransformWithLayoutMorph(188677120)
		morphs: 	an Array(a TransformWithLayoutMorph(188677120))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(824124672)
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CompiledMethod>>bounds:
26 April 2017 5:08:58.802315 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	nil
	Receiver's instance variables: 
LOCell>>#initialize

Message>>sentTo:
	Receiver: bounds: (200@200) corner: (250@250)
	Arguments and temporary variables: 
		receiver: 	LOCell>>#initialize
	Receiver's instance variables: 
		selector: 	#bounds:
		args: 	{(200@200) corner: (250@250)}
		lookupClass: 	CompiledMethod


CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	MessageNotUnderstood: CompiledMethod>>bounds:
	Receiver's instance variables: 
LOCell>>#initialize

CompiledMethod>>DoIt
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
LOCell>>#initialize

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self bounds: (200@200 corner: 250@250)'
		itsSelection: 	a Text for 'self bounds: (200@200 corner: 250@250)'
		itsSelectionString: 	'self bounds: (200@200 corner: 250@250)'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	LOCell>>#initialize
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	LOCell>>#initialize
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(677783808)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(677783808)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(824124672)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(824124672)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	9832081
		lastStepMessage: 	nil
		lastCycleTime: 	9832101
		alarms: 	a Heap()
		lastAlarmTime: 	9832081
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(845440256) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (976@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	9832081
		lastStepMessage: 	nil
		lastCycleTime: 	9832101
		alarms: 	a Heap()
		lastAlarmTime: 	9832081
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	9832081
		lastStepMessage: 	nil
		lastCycleTime: 	9832101
		alarms: 	a Heap()
		lastAlarmTime: 	9832081
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(860531968)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	9832081
		lastStepMessage: 	nil
		lastCycleTime: 	9832101
		alarms: 	a Heap()
		lastAlarmTime: 	9832081
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(845440256) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (976@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 
		aPoint: 	(608@304)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(431272960)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		evt: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(25.0@40.0) mouseDown yellow 9825289 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		timeStamp: 	9825289
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(25.0@40.0)
		handler: 	a RubEditingArea(677783808)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		aMorph: 	a RubEditingArea(677783808)
		globalPt: 	(25.0@40.0)
		localEvt: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		index: 	3
		child: 	a RubPrimarySelectionMorph(949177600)
		morphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536))
		handler: 	a RubEditingArea(677783808)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(824124672)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(25.0@40.0) mouseDown yellow 9825289 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	9825289
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(25.0@40.0)
		handler: 	a RubEditingArea(677783808)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		aMorph: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		aMorph: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
		aMorph: 	a TransformWithLayoutMorph(188677120)
		globalPt: 	(608@304)
		localEvt: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		index: 	1
		child: 	a RubEditingArea(677783808)
		morphs: 	an Array(a RubEditingArea(677783808))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(824124672)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(608@304) mouseDown yellow 9825289 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	9825289
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(608@304)
		handler: 	a RubScrolledTextMorph(824124672)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
		aMorph: 	a TransformWithLayoutMorph(188677120)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
		aMorph: 	a TransformWithLayoutMorph(188677120)
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
Message>>sentTo:
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CompiledMethod>>bounds:
26 April 2017 5:09:00.586318 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	nil
	Receiver's instance variables: 
LOCell>>#initialize

Message>>sentTo:
	Receiver: bounds: (200@200) corner: (250@250)
	Arguments and temporary variables: 
		receiver: 	LOCell>>#initialize
	Receiver's instance variables: 
		selector: 	#bounds:
		args: 	{(200@200) corner: (250@250)}
		lookupClass: 	CompiledMethod


CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	MessageNotUnderstood: CompiledMethod>>bounds:
	Receiver's instance variables: 
LOCell>>#initialize

Message>>sentTo:
	Receiver: bounds: (200@200) corner: (250@250)
	Arguments and temporary variables: 
		receiver: 	LOCell>>#initialize
	Receiver's instance variables: 
		selector: 	#bounds:
		args: 	{(200@200) corner: (250@250)}
		lookupClass: 	CompiledMethod


CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	MessageNotUnderstood: CompiledMethod>>bounds:
	Receiver's instance variables: 
LOCell>>#initialize

CompiledMethod>>DoIt
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
LOCell>>#initialize

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self bounds: (200@200 corner: 250@250)'
		itsSelection: 	a Text for 'self bounds: (200@200 corner: 250@250)'
		itsSelectionString: 	'self bounds: (200@200 corner: 250@250)'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	LOCell>>#initialize
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	LOCell>>#initialize
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(677783808)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(677783808)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(824124672)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(824124672)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1067119872))(a DropLis...etc...
		lastStepTime: 	9833867
		lastStepMessage: 	nil
		lastCycleTime: 	9833889
		alarms: 	a Heap()
		lastAlarmTime: 	9833867
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(301771776) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (976@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1067119872))(a DropLis...etc...
		lastStepTime: 	9833867
		lastStepMessage: 	nil
		lastCycleTime: 	9833889
		alarms: 	a Heap()
		lastAlarmTime: 	9833867
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1067119872))(a DropLis...etc...
		lastStepTime: 	9833867
		lastStepMessage: 	nil
		lastCycleTime: 	9833889
		alarms: 	a Heap()
		lastAlarmTime: 	9833867
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(860531968)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1067119872))(a DropLis...etc...
		lastStepTime: 	9833867
		lastStepMessage: 	nil
		lastCycleTime: 	9833889
		alarms: 	a Heap()
		lastAlarmTime: 	9833867
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(301771776) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (976@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 
		aPoint: 	(608@304)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(431272960)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		evt: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(25.0@40.0) mouseDown yellow 9825289 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		timeStamp: 	9825289
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(25.0@40.0)
		handler: 	a RubEditingArea(677783808)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		aMorph: 	a RubEditingArea(677783808)
		globalPt: 	(25.0@40.0)
		localEvt: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		index: 	3
		child: 	a RubPrimarySelectionMorph(949177600)
		morphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536))
		handler: 	a RubEditingArea(677783808)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(824124672)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(25.0@40.0) mouseDown yellow 9825289 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	9825289
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(25.0@40.0)
		handler: 	a RubEditingArea(677783808)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		aMorph: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		aMorph: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
		aMorph: 	a TransformWithLayoutMorph(188677120)
		globalPt: 	(608@304)
		localEvt: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		index: 	1
		child: 	a RubEditingArea(677783808)
		morphs: 	an Array(a RubEditingArea(677783808))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(824124672)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(608@304) mouseDown yellow 9825289 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	9825289
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(608@304)
		handler: 	a RubScrolledTextMorph(824124672)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
		aMorph: 	a TransformWithLayoutMorph(188677120)
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
Message>>sentTo:
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
Message>>sentTo:
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CompiledMethod>>bounds:
26 April 2017 5:09:01.955335 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	nil
	Receiver's instance variables: 
LOCell>>#initialize

Message>>sentTo:
	Receiver: bounds: (200@200) corner: (250@250)
	Arguments and temporary variables: 
		receiver: 	LOCell>>#initialize
	Receiver's instance variables: 
		selector: 	#bounds:
		args: 	{(200@200) corner: (250@250)}
		lookupClass: 	CompiledMethod


CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	MessageNotUnderstood: CompiledMethod>>bounds:
	Receiver's instance variables: 
LOCell>>#initialize

Message>>sentTo:
	Receiver: bounds: (200@200) corner: (250@250)
	Arguments and temporary variables: 
		receiver: 	LOCell>>#initialize
	Receiver's instance variables: 
		selector: 	#bounds:
		args: 	{(200@200) corner: (250@250)}
		lookupClass: 	CompiledMethod


CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	MessageNotUnderstood: CompiledMethod>>bounds:
	Receiver's instance variables: 
LOCell>>#initialize

Message>>sentTo:
	Receiver: bounds: (200@200) corner: (250@250)
	Arguments and temporary variables: 
		receiver: 	LOCell>>#initialize
	Receiver's instance variables: 
		selector: 	#bounds:
		args: 	{(200@200) corner: (250@250)}
		lookupClass: 	CompiledMethod


CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	MessageNotUnderstood: CompiledMethod>>bounds:
	Receiver's instance variables: 
LOCell>>#initialize

CompiledMethod>>DoIt
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
LOCell>>#initialize

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self bounds: (200@200 corner: 250@250)'
		itsSelection: 	a Text for 'self bounds: (200@200 corner: 250@250)'
		itsSelectionString: 	'self bounds: (200@200 corner: 250@250)'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	LOCell>>#initialize
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	LOCell>>#initialize
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(677783808)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(677783808)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(824124672)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(824124672)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1067119872))(a DropLis...etc...
		lastStepTime: 	9835235
		lastStepMessage: 	nil
		lastCycleTime: 	9835257
		alarms: 	a Heap()
		lastAlarmTime: 	9835235
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(971206912) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (976@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1067119872))(a DropLis...etc...
		lastStepTime: 	9835235
		lastStepMessage: 	nil
		lastCycleTime: 	9835257
		alarms: 	a Heap()
		lastAlarmTime: 	9835235
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1067119872))(a DropLis...etc...
		lastStepTime: 	9835235
		lastStepMessage: 	nil
		lastCycleTime: 	9835257
		alarms: 	a Heap()
		lastAlarmTime: 	9835235
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(860531968)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (976@665)
		canvas: 	a FormCanvas on: DisplayScreen(976x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1067119872))(a DropLis...etc...
		lastStepTime: 	9835235
		lastStepMessage: 	nil
		lastCycleTime: 	9835257
		alarms: 	a Heap()
		lastAlarmTime: 	9835235
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(971206912) a GLMSyst...etc...
		fullBounds: 	(0@0) corner: (976@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 
		aPoint: 	(608@304)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(431272960)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(431272960)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(606.0@296.0) corner: (821.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(739139584)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@296.0) corner: (821.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (600901888) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(587970816)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		evt: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(25.0@40.0) mouseDown yellow 9825289 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		timeStamp: 	9825289
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(25.0@40.0)
		handler: 	a RubEditingArea(677783808)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		aMorph: 	a RubEditingArea(677783808)
		globalPt: 	(25.0@40.0)
		localEvt: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		index: 	3
		child: 	a RubPrimarySelectionMorph(949177600)
		morphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536))
		handler: 	a RubEditingArea(677783808)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(824124672)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(25.0@40.0) mouseDown yellow 9825289 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	9825289
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(25.0@40.0)
		handler: 	a RubEditingArea(677783808)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		aMorph: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		aMorph: 	a RubEditingArea(677783808)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(677783808)
	Arguments and temporary variables: 
		anEvent: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(188677120)
		submorphs: 	an Array(a RubPrimarySelectionMorph(949177600) a RubCursor(522561536...etc...
		fullBounds: 	(0@0) corner: (402@50)
		color: 	Color transparent
		extension: 	a MorphExtension (558432512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(192603136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(522561536)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1172480))
		getMenuPolicy: 	a RubEditingArea(677783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
		aMorph: 	a TransformWithLayoutMorph(188677120)
		globalPt: 	(608@304)
		localEvt: 	[(25.0@40.0) mouseDown yellow 9825289 nil]
		index: 	1
		child: 	a RubEditingArea(677783808)
		morphs: 	an Array(a RubEditingArea(677783808))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(824124672)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@304) mouseDown yellow 9825289 nil]
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
Message>>sentTo:
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
Message>>sentTo:
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
Message>>sentTo:
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CompiledMethod>>bounds:
26 April 2017 5:10:06.530793 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	nil
	Receiver's instance variables: 
LOCell>>#initialize

CompiledMethod>>DoIt
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
LOCell>>#initialize

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	LOCell>>#initialize
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	LOCell>>#initialize
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(934975744)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(934975744)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(735447040)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(934975744)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(1002703872)
		submorphs: 	an Array(a RubPrimarySelectionMorph(692332800) a RubCursor(974191616...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (824233216) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(67124480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(974191616)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(547616768))
		getMenuPolicy: 	a RubEditingArea(934975744)
		mouseDownPoint: 	(389.0@52.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(735447040)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(331448320))(a DropList...etc...
		lastStepTime: 	9899764
		lastStepMessage: 	nil
		lastCycleTime: 	9899787
		alarms: 	a Heap()
		lastAlarmTime: 	9899764
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(754921728) a GLMSys...etc...
		fullBounds: 	(0@0) corner: (1200@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(331448320))(a DropList...etc...
		lastStepTime: 	9899764
		lastStepMessage: 	nil
		lastCycleTime: 	9899787
		alarms: 	a Heap()
		lastAlarmTime: 	9899764
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(331448320))(a DropList...etc...
		lastStepTime: 	9899764
		lastStepMessage: 	nil
		lastCycleTime: 	9899787
		alarms: 	a Heap()
		lastAlarmTime: 	9899764
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(860531968)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(331448320))(a DropList...etc...
		lastStepTime: 	9899764
		lastStepMessage: 	nil
		lastCycleTime: 	9899787
		alarms: 	a Heap()
		lastAlarmTime: 	9899764
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(754921728) a GLMSys...etc...
		fullBounds: 	(0@0) corner: (1200@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(522359808)
	Arguments and temporary variables: 
		aPoint: 	(972@316)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(934975744)
	Receiver's instance variables: 
		bounds: 	(970.0@308.0) corner: (1185.0@546.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(963149056)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(970.0@308.0) corner: (1185.0@546.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (639316992) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(708969472)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(522359808)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(970.0@308.0) corner: (1185.0@546.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(963149056)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(970.0@308.0) corner: (1185.0@546.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (639316992) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(708969472)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(522359808)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(970.0@308.0) corner: (1185.0@546.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(963149056)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(970.0@308.0) corner: (1185.0@546.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (639316992) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(708969472)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(934975744)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(522359808)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(1002703872)
		submorphs: 	an Array(a RubPrimarySelectionMorph(692332800) a RubCursor(974191616...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (824233216) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(67124480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(974191616)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(547616768))
		getMenuPolicy: 	a RubEditingArea(934975744)
		mouseDownPoint: 	(389.0@52.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(522359808)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(970.0@308.0) corner: (1185.0@546.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(963149056)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(970.0@308.0) corner: (1185.0@546.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (639316992) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(708969472)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(934975744)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(1002703872)
		submorphs: 	an Array(a RubPrimarySelectionMorph(692332800) a RubCursor(974191616...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (824233216) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(67124480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(974191616)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(547616768))
		getMenuPolicy: 	a RubEditingArea(934975744)
		mouseDownPoint: 	(389.0@52.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(934975744)
	Arguments and temporary variables: 
		evt: 	[(389.0@52.0) mouseDown yellow 9898630 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(1002703872)
		submorphs: 	an Array(a RubPrimarySelectionMorph(692332800) a RubCursor(974191616...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (824233216) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(67124480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(974191616)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(547616768))
		getMenuPolicy: 	a RubEditingArea(934975744)
		mouseDownPoint: 	(389.0@52.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubTextScrollPane>>mouseDown:
	Receiver: a RubTextScrollPane(67124480)
	Arguments and temporary variables: 
		anEvent: 	[(972@316) mouseDown yellow 9898630 nil]
	Receiver's instance variables: 
		bounds: 	(583.0@264.0) corner: (985.0@399.0)
		owner: 	a RubScrolledTextMorph(735447040)
		submorphs: 	an Array(a TransformWithLayoutMorph(1002703872))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (933061888) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(1002703872)
		hScrollbar: 	a RubScrollBar(1048780800)
		vScrollbar: 	a RubScrollBar(314198272)
		drawFocusBorder: 	true


RubScrolledTextMorph>>mouseDown:
	Receiver: a RubScrolledTextMorph(735447040)
	Arguments and temporary variables: 
		event: 	[(972@316) mouseDown yellow 9898630 nil]
	Receiver's instance variables: 
		bounds: 	(583.0@264.0) corner: (985.0@399.0)
		owner: 	a PanelMorph(817340672)
		submorphs: 	an Array(a RubTextScrollPane(67124480) a RubAdornmentDisplayer(10275...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (169692160) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	false
		alwaysAccept: 	false
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(67124480)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(1027561728))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph(Morph)>>handleMouseDown:
	Receiver: a RubScrolledTextMorph(735447040)
	Arguments and temporary variables: 
		anEvent: 	[(972@316) mouseDown yellow 9898630 nil]
	Receiver's instance variables: 
		bounds: 	(583.0@264.0) corner: (985.0@399.0)
		owner: 	a PanelMorph(817340672)
		submorphs: 	an Array(a RubTextScrollPane(67124480) a RubAdornmentDisplayer(10275...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (169692160) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	false
		alwaysAccept: 	false
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(67124480)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(1027561728))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>handleMouseDown:
	Receiver: a RubScrolledTextMorph(735447040)
	Arguments and temporary variables: 
		event: 	[(972@316) mouseDown yellow 9898630 nil]
	Receiver's instance variables: 
		bounds: 	(583.0@264.0) corner: (985.0@399.0)
		owner: 	a PanelMorph(817340672)
		submorphs: 	an Array(a RubTextScrollPane(67124480) a RubAdornmentDisplayer(10275...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (169692160) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	false
		alwaysAccept: 	false
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(67124480)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(1027561728))
		enabled: 	true
		highlights: 	an OrderedCollection()


MouseButtonEvent>>sentTo:
	Receiver: [(972@316) mouseDown yellow 9898630 nil]
	Arguments and temporary variables: 
		anObject: 	a RubScrolledTextMorph(735447040)
	Receiver's instance variables: 
		timeStamp: 	9898630
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(972@316)
		handler: 	a RubScrolledTextMorph(735447040)
		wasHandled: 	true
		whichButton: 	2


RubScrolledTextMorph(Morph)>>handleEvent:
	Receiver: a RubScrolledTextMorph(735447040)
	Arguments and temporary variables: 
		anEvent: 	[(972@316) mouseDown yellow 9898630 nil]
	Receiver's instance variables: 
		bounds: 	(583.0@264.0) corner: (985.0@399.0)
		owner: 	a PanelMorph(817340672)
		submorphs: 	an Array(a RubTextScrollPane(67124480) a RubAdornmentDisplayer(10275...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (169692160) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	false
		alwaysAccept: 	false
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(67124480)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(1027561728))
		enabled: 	true
		highlights: 	an OrderedCollection()


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(972@316) mouseDown yellow 9898630 nil]
		aMorph: 	a RubScrolledTextMorph(735447040)
		globalPt: 	(972@316)
		localEvt: 	[(972@316) mouseDown yellow 9898630 nil]
		index: 	3
		child: 	a RubTextScrollPane(67124480)
		morphs: 	an Array(a RubTextScrollPane(67124480) a RubAdornmentDisplayer(10275617...etc...
		handler: 	a RubScrolledTextMorph(735447040)
		inside: 	false
		lastHandler: 	a GLMSystemWindow(299041792)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(972@316) mouseDown yellow 9898630 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(972@316) mouseDown yellow 9898630 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	9898630
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(972@316)
		handler: 	a RubScrolledTextMorph(735447040)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(972@316) mouseDown yellow 9898630 nil]
		aMorph: 	a RubScrolledTextMorph(735447040)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(972@316) mouseDown yellow 9898630 nil]
		aMorph: 	a RubScrolledTextMorph(735447040)
	Receiver's instance variables: 
		morph: 	nil


RubScrolledTextMorph(Morph)>>processEvent:using:
	Receiver: a RubScrolledTextMorph(735447040)
	Arguments and temporary variables: 
		anEvent: 	[(972@316) mouseDown yellow 9898630 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(583.0@264.0) corner: (985.0@399.0)
		owner: 	a PanelMorph(817340672)
		submorphs: 	an Array(a RubTextScrollPane(67124480) a RubAdornmentDisplayer(10275...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (169692160) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	false
		alwaysAccept: 	false
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(67124480)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(1027561728))
		enabled: 	true
		highlights: 	an OrderedCollection()


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(972@316) mouseDown yellow 9898630 nil]
		aMorph: 	a PanelMorph(817340672)
		globalPt: 	(972@316)
		localEvt: 	[(972@316) mouseDown yellow 9898630 nil]
		index: 	1
		child: 	a RubScrolledTextMorph(735447040)
		morphs: 	an Array(a RubScrolledTextMorph(735447040))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a GLMSystemWindow(299041792)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(972@316) mouseDown yellow 9898630 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(972@316) mouseDown yellow 9898630 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	9898630
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(972@316)
		handler: 	a GLMSystemWindow(299041792)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(972@316) mouseDown yellow 9898630 nil]
		aMorph: 	a PanelMorph(817340672)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0



--- The full stack ---
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubTextScrollPane>>mouseDown:
RubScrolledTextMorph>>mouseDown:
RubScrolledTextMorph(Morph)>>handleMouseDown:
RubScrolledTextMorph>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubScrolledTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CompiledMethod>>bounds:
26 April 2017 5:11:31.198513 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	nil
	Receiver's instance variables: 
LOCell>>#initialize

CompiledMethod>>DoIt
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
LOCell>>#initialize

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self bounds: (200@200 corner: 250@250)'
		itsSelection: 	a Text for 'self bounds: (200@200 corner: 250@250)'
		itsSelectionString: 	'self bounds: (200@200 corner: 250@250)'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	LOCell>>#initialize
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	LOCell>>#initialize
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(507674880)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(507674880)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(464052224)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(507674880)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(542401536)
		submorphs: 	an Array(a RubPrimarySelectionMorph(501262592) a RubCursor(833100032...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (322079744) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(75605248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(833100032)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(462798080))
		getMenuPolicy: 	a RubEditingArea(507674880)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(464052224)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	9984471
		lastStepMessage: 	nil
		lastCycleTime: 	9984493
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(833100032)))
		lastAlarmTime: 	9984471
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(887499776) a Na...etc...
		fullBounds: 	(0@0) corner: (1200@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	9984471
		lastStepMessage: 	nil
		lastCycleTime: 	9984493
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(833100032)))
		lastAlarmTime: 	9984471
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	9984471
		lastStepMessage: 	nil
		lastCycleTime: 	9984493
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(833100032)))
		lastAlarmTime: 	9984471
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(887499776) a Na...etc...
		fullBounds: 	(0@0) corner: (1200@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CompiledMethod>>bounds:
26 April 2017 5:12:06.783257 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	nil
	Receiver's instance variables: 
LOCell>>#initialize

CompiledMethod>>DoIt
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
LOCell>>#initialize

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self bounds: (200@200 corner: 250@250)'
		itsSelection: 	a Text for 'self bounds: (200@200 corner: 250@250)'
		itsSelectionString: 	'self bounds: (200@200 corner: 250@250)'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	LOCell>>#initialize
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	LOCell>>#initialize
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(949699584)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(949699584)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(718579968)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(949699584)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(429769984)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1014748416) a RubCursor(93950387...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (957346816) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(86097920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(939503872)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(107779328))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(718579968)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	10020056
		lastStepMessage: 	nil
		lastCycleTime: 	10020078
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(939503872)))
		lastAlarmTime: 	10020056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(887499776) a Na...etc...
		fullBounds: 	(0@0) corner: (1200@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	10020056
		lastStepMessage: 	nil
		lastCycleTime: 	10020078
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(939503872)))
		lastAlarmTime: 	10020056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	10020056
		lastStepMessage: 	nil
		lastCycleTime: 	10020078
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(939503872)))
		lastAlarmTime: 	10020056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(887499776) a Na...etc...
		fullBounds: 	(0@0) corner: (1200@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CompiledMethod>>bounds:
26 April 2017 5:12:21.500771 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	nil
	Receiver's instance variables: 
LOCell>>#initialize

CompiledMethod>>DoIt
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
LOCell>>#initialize

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self bounds: (200@200 corner: 250@250)'
		itsSelection: 	a Text for 'self bounds: (200@200 corner: 250@250)'
		itsSelectionString: 	'self bounds: (200@200 corner: 250@250)'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	LOCell>>#initialize
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	LOCell>>#initialize
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(713521408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(713521408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(895100928)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(713521408)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(608840704)
		submorphs: 	an Array(a RubPrimarySelectionMorph(892510464) a RubCursor(36388096)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (399958272) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(27204864)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(36388096)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(478086144))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(895100928)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	10034773
		lastStepMessage: 	nil
		lastCycleTime: 	10034795
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(36388096)))
		lastAlarmTime: 	10034773
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(887499776) a Na...etc...
		fullBounds: 	(0@0) corner: (1200@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	10034773
		lastStepMessage: 	nil
		lastCycleTime: 	10034795
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(36388096)))
		lastAlarmTime: 	10034773
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(392531200))(a SearchMorp...etc...
		lastStepTime: 	10034773
		lastStepMessage: 	nil
		lastCycleTime: 	10034795
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(36388096)))
		lastAlarmTime: 	10034773
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(887499776) a Na...etc...
		fullBounds: 	(0@0) corner: (1200@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
InvalidGlobalName: NameOfSubclass: NameOfSubclass is not a valid class name
26 April 2017 5:14:07.040004 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

SlotClassBuilder>>validateClassName
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	LOCell
		name: 	#NameOfSubclass
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


SlotClassBuilder>>name:
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	LOCell
		name: 	#NameOfSubclass
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self classLayout class;
	slots: f asSlotCollection;
	sharedVariablesFromString: d;
	sharedPools: s;
	category: cat;
	environment: self environment;
	copyClassSlotsFromExistingClass ] in LOCell class(Class)>>private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: LOCell
	Arguments and temporary variables: 
		t: 	#NameOfSubclass
		f: 	''
		d: 	''
		s: 	''
		cat: 	'PBE-LightsOut'
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


PharoClassInstaller class(AbstractClassInstaller class)>>make:
	Receiver: PharoClassInstaller
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self c...etc...
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
		superclass: 	AbstractClassInstaller
		methodDict: 	a MethodDictionary(#basicClassDefinitionChangedFrom:to:using:->Phar...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoClassInstaller
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-ClassBuilder'
		traitComposition: 	{}
		localSelectors: 	nil


LOCell class(Class)>>private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: LOCell
	Arguments and temporary variables: 
		t: 	#NameOfSubclass
		f: 	''
		d: 	''
		s: 	''
		cat: 	'PBE-LightsOut'
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVariableNames
	classVariableNames: someClassVariableNames
	poolDictionaries: someSharedPoolNames
	category: aCategory ] in LOCell class(Class)>>subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: LOCell
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
		aTraitCompositionOrArray: 	#()
		someInstanceVariableNames: 	''
		someClassVariableNames: 	''
		someSharedPoolNames: 	''
		aCategory: 	'PBE-LightsOut'
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ aBlock value
	setTraitComposition: aTraitComposition asTraitComposition;
	yourself ] in LOCell class(Class)>>subclass:uses:with:
	Receiver: LOCell
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
		aTraitComposition: 	#()
		aBlock: 	[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVar...etc...
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


SystemDictionary(Dictionary)>>at:ifPresent:ifAbsent:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#NameOfSubclass
		oneArgBlock: 	[ :old | 
| copyOfOld newClass |
copyOfOld := old copy.

"Modify t...etc...
		absentBlock: 	[ aBlock value
	setTraitComposition: aTraitComposition asTraitComp...etc...
	Receiver's instance variables: 
		tally: 	5816
		array: 	an Array(#SmallDictionary->SmallDictionary #MetacelloExampleProjectConfi...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupContentHasBe...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


LOCell class(Class)>>subclass:uses:with:
	Receiver: LOCell
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
		aTraitComposition: 	#()
		aBlock: 	[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVar...etc...
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


LOCell class(Class)>>subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: LOCell
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
		aTraitCompositionOrArray: 	#()
		someInstanceVariableNames: 	''
		someClassVariableNames: 	''
		someSharedPoolNames: 	''
		aCategory: 	'PBE-LightsOut'
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


LOCell class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: LOCell
	Arguments and temporary variables: 
		t: 	#NameOfSubclass
		f: 	''
		d: 	''
		s: 	''
		cat: 	'PBE-LightsOut'
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


LOCell class(Class)>>subclass:instanceVariableNames:classVariableNames:package:
	Receiver: LOCell
	Arguments and temporary variables: 
		aSubclassSymbol: 	#NameOfSubclass
		instVarNames: 	''
		classVarNames: 	''
		aPackageSymbol: 	'PBE-LightsOut'
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ LOCell
		subclass: #NameOfSubclass
		instanceVariableNames: ''
		c...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'LOCell subclass: #NameOfSubclass
		instanceVariableNames: '''' 
		cla...etc...
		aController: 	nil
		aClass: 	nil
		oldClass: 	nil
		class: 	nil
		newClassName: 	'NameOfSubclass'
		defTokens: 	an OrderedCollection('LOCell' 'subclass:' '#NameOfSubclass' 'instanc...etc...
		keywdIx: 	2
		envt: 	a SystemDictionary(lots of globals)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1001263104)
		sourceCodePanel: 	a PanelMorph(380254464)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(28666880)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classCommentTextModel: 	a RubScrolledTextModel
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(867282944)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'PB|Morphic-Widgets-Basic'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(524415232)


NautilusUI(AbstractTool)>>addClassIn:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aPackage: 	a RPackage(PBE-LightsOut)
		classSymbol: 	#NameOfSubclass
		systemCategory: 	#'PBE-LightsOut'
		proposedSuperclass: 	LOCell
		classDefinition: 	'LOCell subclass: #NameOfSubclass
		instanceVariableNames: '''...etc...
		newClass: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1001263104)
		sourceCodePanel: 	a PanelMorph(380254464)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(28666880)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classCommentTextModel: 	a RubScrolledTextModel
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(867282944)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'PB|Morphic-Widgets-Basic'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(524415232)


NautilusUI>>addClassIn:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aPackage: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1001263104)
		sourceCodePanel: 	a PanelMorph(380254464)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(28666880)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classCommentTextModel: 	a RubScrolledTextModel
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(867282944)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'PB|Morphic-Widgets-Basic'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(524415232)


NautilusUI(AbstractNautilusUI)>>addClass
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		package: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(1001263104)
		sourceCodePanel: 	a PanelMorph(380254464)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(28666880)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classCommentTextModel: 	a RubScrolledTextModel
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(867282944)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'PB|Morphic-Widgets-Basic'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(524415232)


[ target addClass ] in AbstractNautilusUI class>>classesFixMenu:
	Receiver: AbstractNautilusUI
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a NautilusUI
	Receiver's instance variables: 
		superclass: 	AbstractTool
		methodDict: 	a MethodDictionary(size 356)
		format: 	65551
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{NautilusUI}
		name: 	#AbstractNautilusUI
		classPool: 	a Dictionary(#NextFocusKey->Character arrowRight #PackagesIconsCache...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ target addClass ]
	Arguments and temporary variables: 
		anArg: 	a NautilusUI
	Receiver's instance variables: 
		outerContext: 	AbstractNautilusUI class>>classesFixMenu:
		startpc: 	251
		numArgs: 	0


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(448546816)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(517@250) mouseUp 10136199 nil]
		w: 	a WorldMorph(562956288) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(361.0@234.0) corner: (572.0@251.0)
		owner: 	a MenuMorph(618144768)
		submorphs: 	#()
		fullBounds: 	(361.0@234.0) corner: (572.0@251.0)
		color: 	Color black
		extension: 	a MorphExtension (554862848)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	138
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(448546816)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(517@250) mouseUp 10136199 nil]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(361.0@234.0) corner: (572.0@251.0)
		owner: 	a MenuMorph(618144768)
		submorphs: 	#()
		fullBounds: 	(361.0@234.0) corner: (572.0@251.0)
		color: 	Color black
		extension: 	a MorphExtension (554862848)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(448546816)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(517@250) mouseUp 10136199 nil]
	Receiver's instance variables: 
		bounds: 	(361.0@234.0) corner: (572.0@251.0)
		owner: 	a MenuMorph(618144768)
		submorphs: 	#()
		fullBounds: 	(361.0@234.0) corner: (572.0@251.0)
		color: 	Color black
		extension: 	a MorphExtension (554862848)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(448546816)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(517@250) mouseUp 10136199 nil]
	Receiver's instance variables: 
		bounds: 	(361.0@234.0) corner: (572.0@251.0)
		owner: 	a MenuMorph(618144768)
		submorphs: 	#()
		fullBounds: 	(361.0@234.0) corner: (572.0@251.0)
		color: 	Color black
		extension: 	a MorphExtension (554862848)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MouseButtonEvent>>sentTo:
	Receiver: [(517@250) mouseUp 10136199 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(448546816)'Add Class...'
	Receiver's instance variables: 
		timeStamp: 	10136199
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(517@250)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(448546816)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(517@250) mouseUp 10136199 nil]
	Receiver's instance variables: 
		bounds: 	(361.0@234.0) corner: (572.0@251.0)
		owner: 	a MenuMorph(618144768)
		submorphs: 	#()
		fullBounds: 	(361.0@234.0) corner: (572.0@251.0)
		color: 	Color black
		extension: 	a MorphExtension (554862848)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(517@250) mouseUp 10136199 nil]
		aMorph: 	a ToggleMenuItemMorph(448546816)'Add Class...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(517@250) mouseUp 10136199 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(517@250) mouseUp 10136199 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	10136199
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(517@250)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(517@250) mouseUp 10136199 nil]
		aMorph: 	a ToggleMenuItemMorph(448546816)'Add Class...'
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(517@250) mouseUp 10136199 nil]
		aMorph: 	a ToggleMenuItemMorph(448546816)'Add Class...'
	Receiver's instance variables: 
		morph: 	nil


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(448546816)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(517@250) mouseUp 10136199 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(361.0@234.0) corner: (572.0@251.0)
		owner: 	a MenuMorph(618144768)
		submorphs: 	#()
		fullBounds: 	(361.0@234.0) corner: (572.0@251.0)
		color: 	Color black
		extension: 	a MorphExtension (554862848)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(517@250) mouseUp 10136199 nil]
		aMorph: 	a MenuMorph(618144768)
		localEvt: 	[(517@250) mouseUp 10136199 nil]
		index: 	12
		child: 	a ToggleMenuItemMorph(448546816)'Add Class...'
		morphs: 	an Array(a ToggleMenuItemMorph(568028416)'Refactoring' a ToggleMenuItem...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(517@250) mouseUp 10136199 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(517@250) mouseUp 10136199 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	10136199
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(517@250)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(517@250) mouseUp 10136199 nil]
		aMorph: 	a MenuMorph(618144768)
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
SlotClassBuilder>>validateClassName
SlotClassBuilder>>name:
[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self classLayout class;
	slots: f asSlotCollection;
	sharedVariablesFromString: d;
	sharedPools: s;
	category: cat;
	environment: self environment;
	copyClassSlotsFromExistingClass ] in LOCell class(Class)>>private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
PharoClassInstaller class(AbstractClassInstaller class)>>make:
LOCell class(Class)>>private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVariableNames
	classVariableNames: someClassVariableNames
	poolDictionaries: someSharedPoolNames
	category: aCategory ] in LOCell class(Class)>>subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:
[ aBlock value
	setTraitComposition: aTraitComposition asTraitComposition;
	yourself ] in LOCell class(Class)>>subclass:uses:with:
SystemDictionary(Dictionary)>>at:ifPresent:ifAbsent:
LOCell class(Class)>>subclass:uses:with:
LOCell class(Class)>>subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:
LOCell class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
LOCell class(Class)>>subclass:instanceVariableNames:classVariableNames:package:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
NautilusUI(AbstractTool)>>addClassIn:
NautilusUI>>addClassIn:
NautilusUI(AbstractNautilusUI)>>addClass
[ target addClass ] in AbstractNautilusUI class>>classesFixMenu:
BlockClosure>>cull:
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CompiledMethod>>bounds:
26 April 2017 5:34:39.603658 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	nil
	Receiver's instance variables: 
LOCell>>#initialize

CompiledMethod>>DoIt
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
LOCell>>#initialize

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self bounds: (200@200 corner: 250@250)'
		itsSelection: 	a Text for 'self bounds: (200@200 corner: 250@250)'
		itsSelectionString: 	'self bounds: (200@200 corner: 250@250)'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	LOCell>>#initialize
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	LOCell>>#initialize
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(609635584)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(609635584)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(748270592)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(609635584)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(504002560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (948069376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(22851840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(30301184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(948151552))
		getMenuPolicy: 	a RubEditingArea(609635584)
		mouseDownPoint: 	(25@31)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(748270592)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1067119872))(a DropLis...etc...
		lastStepTime: 	11372851
		lastStepMessage: 	nil
		lastCycleTime: 	11372873
		alarms: 	a Heap()
		lastAlarmTime: 	11372851
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(847342848) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1067119872))(a DropLis...etc...
		lastStepTime: 	11372851
		lastStepMessage: 	nil
		lastCycleTime: 	11372873
		alarms: 	a Heap()
		lastAlarmTime: 	11372851
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1067119872))(a DropLis...etc...
		lastStepTime: 	11372851
		lastStepMessage: 	nil
		lastCycleTime: 	11372873
		alarms: 	a Heap()
		lastAlarmTime: 	11372851
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(860531968)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1067119872))(a DropLis...etc...
		lastStepTime: 	11372851
		lastStepMessage: 	nil
		lastCycleTime: 	11372873
		alarms: 	a Heap()
		lastAlarmTime: 	11372851
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(847342848) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(568939776)
	Arguments and temporary variables: 
		aPoint: 	(674@302)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(609635584)
	Receiver's instance variables: 
		bounds: 	(672.0@294.0) corner: (887.0@532.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(273705984)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(672.0@294.0) corner: (887.0@532.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (183951360) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(677396736)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(568939776)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(672.0@294.0) corner: (887.0@532.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(273705984)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(672.0@294.0) corner: (887.0@532.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (183951360) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(677396736)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(568939776)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(672.0@294.0) corner: (887.0@532.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(273705984)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(672.0@294.0) corner: (887.0@532.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (183951360) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(677396736)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(609635584)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(568939776)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(504002560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (948069376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(22851840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(30301184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(948151552))
		getMenuPolicy: 	a RubEditingArea(609635584)
		mouseDownPoint: 	(25@31)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(568939776)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(672.0@294.0) corner: (887.0@532.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(273705984)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(672.0@294.0) corner: (887.0@532.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (183951360) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(677396736)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(609635584)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(504002560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (948069376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(22851840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(30301184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(948151552))
		getMenuPolicy: 	a RubEditingArea(609635584)
		mouseDownPoint: 	(25@31)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(609635584)
	Arguments and temporary variables: 
		evt: 	[(91@38) mouseDown yellow 11371751 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(504002560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (948069376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(22851840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(30301184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(948151552))
		getMenuPolicy: 	a RubEditingArea(609635584)
		mouseDownPoint: 	(25@31)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(609635584)
	Arguments and temporary variables: 
		anEvent: 	[(91@38) mouseDown yellow 11371751 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(504002560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (948069376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(22851840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(30301184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(948151552))
		getMenuPolicy: 	a RubEditingArea(609635584)
		mouseDownPoint: 	(25@31)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(91@38) mouseDown yellow 11371751 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(609635584)
	Receiver's instance variables: 
		timeStamp: 	11371751
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(91@38)
		handler: 	a RubEditingArea(609635584)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(609635584)
	Arguments and temporary variables: 
		anEvent: 	[(91@38) mouseDown yellow 11371751 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(504002560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (948069376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(22851840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(30301184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(948151552))
		getMenuPolicy: 	a RubEditingArea(609635584)
		mouseDownPoint: 	(25@31)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(91@38) mouseDown yellow 11371751 nil]
		aMorph: 	a RubEditingArea(609635584)
		globalPt: 	(91@38)
		localEvt: 	[(91@38) mouseDown yellow 11371751 nil]
		index: 	3
		child: 	a RubPrimarySelectionMorph(71492864)
		morphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184))
		handler: 	a RubEditingArea(609635584)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(748270592)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(91@38) mouseDown yellow 11371751 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(91@38) mouseDown yellow 11371751 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	11371751
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(91@38)
		handler: 	a RubEditingArea(609635584)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(91@38) mouseDown yellow 11371751 nil]
		aMorph: 	a RubEditingArea(609635584)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(91@38) mouseDown yellow 11371751 nil]
		aMorph: 	a RubEditingArea(609635584)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(609635584)
	Arguments and temporary variables: 
		anEvent: 	[(91@38) mouseDown yellow 11371751 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(504002560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (948069376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(22851840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(30301184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(948151552))
		getMenuPolicy: 	a RubEditingArea(609635584)
		mouseDownPoint: 	(25@31)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(674@302) mouseDown yellow 11371751 nil]
		aMorph: 	a TransformWithLayoutMorph(504002560)
		globalPt: 	(674@302)
		localEvt: 	[(91@38) mouseDown yellow 11371751 nil]
		index: 	1
		child: 	a RubEditingArea(609635584)
		morphs: 	an Array(a RubEditingArea(609635584))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(748270592)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(674@302) mouseDown yellow 11371751 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(674@302) mouseDown yellow 11371751 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	11371751
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(674@302)
		handler: 	a RubScrolledTextMorph(748270592)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(674@302) mouseDown yellow 11371751 nil]
		aMorph: 	a TransformWithLayoutMorph(504002560)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(674@302) mouseDown yellow 11371751 nil]
		aMorph: 	a TransformWithLayoutMorph(504002560)
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(504002560)
	Arguments and temporary variables: 
		anEvent: 	[(674@302) mouseDown yellow 11371751 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(583@264) corner: (985@399)
		owner: 	a RubTextScrollPane(22851840)
		submorphs: 	an Array(a RubEditingArea(609635584))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (368871680) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-583@ -264))
		smoothing: 	1
		localBounds: 	nil


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(674@302) mouseDown yellow 11371751 nil]
		aMorph: 	a RubTextScrollPane(22851840)
		globalPt: 	(674@302)
		localEvt: 	[(674@302) mouseDown yellow 11371751 nil]
		index: 	1
		child: 	a TransformWithLayoutMorph(504002560)
		morphs: 	an Array(a TransformWithLayoutMorph(504002560))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(748270592)
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteSymbol>>self
26 April 2017 5:35:01.041448 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

ByteSymbol(Object)>>doesNotUnderstand: #self
	Receiver: #initialize
	Arguments and temporary variables: 
		aMessage: 	self
		exception: 	MessageNotUnderstood: ByteSymbol>>self
		resumeValue: 	nil
	Receiver's instance variables: 
#initialize

CompiledMethod>>DoIt
	Receiver: LOCell>>#initialize
	Arguments and temporary variables: 

	Receiver's instance variables: 
LOCell>>#initialize

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'LOCell>>#initialize
self bounds: (200@200 corner: 250@250)'
		itsSelection: 	a Text for 'LOCell>>#initialize
self bounds: (200@200 corner: 250...etc...
		itsSelectionString: 	'LOCell>>#initialize
self bounds: (200@200 corner: 250@250)...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	^ LOCell >> #initialize self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	LOCell>>#initialize
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	LOCell>>#initialize
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(609635584)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(609635584)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(748270592)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(609635584)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(504002560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (948069376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(22851840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(30301184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1073394688))
		getMenuPolicy: 	a RubEditingArea(609635584)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(748270592)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	11394284
		lastStepMessage: 	nil
		lastCycleTime: 	11394306
		alarms: 	a Heap()
		lastAlarmTime: 	11394284
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(847342848) a Na...etc...
		fullBounds: 	(0@0) corner: (1200@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	11394284
		lastStepMessage: 	nil
		lastCycleTime: 	11394306
		alarms: 	a Heap()
		lastAlarmTime: 	11394284
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	11394284
		lastStepMessage: 	nil
		lastCycleTime: 	11394306
		alarms: 	a Heap()
		lastAlarmTime: 	11394284
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(860531968)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	11394284
		lastStepMessage: 	nil
		lastCycleTime: 	11394306
		alarms: 	a Heap()
		lastAlarmTime: 	11394284
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(847342848) a Na...etc...
		fullBounds: 	(0@0) corner: (1200@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(978274304)
	Arguments and temporary variables: 
		aPoint: 	(608@278)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(609635584)
	Receiver's instance variables: 
		bounds: 	(606.0@270.0) corner: (821.0@508.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(923895040)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@270.0) corner: (821.0@508.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (609211648) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(1013255424)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(978274304)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(606.0@270.0) corner: (821.0@508.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(923895040)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@270.0) corner: (821.0@508.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (609211648) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(1013255424)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(978274304)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(606.0@270.0) corner: (821.0@508.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(923895040)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@270.0) corner: (821.0@508.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (609211648) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(1013255424)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(609635584)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(978274304)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(504002560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (948069376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(22851840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(30301184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1073394688))
		getMenuPolicy: 	a RubEditingArea(609635584)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(978274304)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(606.0@270.0) corner: (821.0@508.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(923895040)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(606.0@270.0) corner: (821.0@508.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (609211648) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(1013255424)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(609635584)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(504002560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (948069376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(22851840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(30301184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1073394688))
		getMenuPolicy: 	a RubEditingArea(609635584)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(609635584)
	Arguments and temporary variables: 
		evt: 	[(25@14) mouseDown yellow 11393442 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(504002560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (948069376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(22851840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(30301184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1073394688))
		getMenuPolicy: 	a RubEditingArea(609635584)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(609635584)
	Arguments and temporary variables: 
		anEvent: 	[(25@14) mouseDown yellow 11393442 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(504002560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (948069376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(22851840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(30301184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1073394688))
		getMenuPolicy: 	a RubEditingArea(609635584)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(25@14) mouseDown yellow 11393442 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(609635584)
	Receiver's instance variables: 
		timeStamp: 	11393442
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(25@14)
		handler: 	a RubEditingArea(609635584)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(609635584)
	Arguments and temporary variables: 
		anEvent: 	[(25@14) mouseDown yellow 11393442 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(504002560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (948069376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(22851840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(30301184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1073394688))
		getMenuPolicy: 	a RubEditingArea(609635584)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25@14) mouseDown yellow 11393442 nil]
		aMorph: 	a RubEditingArea(609635584)
		globalPt: 	(25@14)
		localEvt: 	[(25@14) mouseDown yellow 11393442 nil]
		index: 	3
		child: 	a RubPrimarySelectionMorph(71492864)
		morphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184))
		handler: 	a RubEditingArea(609635584)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(748270592)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25@14) mouseDown yellow 11393442 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(25@14) mouseDown yellow 11393442 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	11393442
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(25@14)
		handler: 	a RubEditingArea(609635584)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25@14) mouseDown yellow 11393442 nil]
		aMorph: 	a RubEditingArea(609635584)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(25@14) mouseDown yellow 11393442 nil]
		aMorph: 	a RubEditingArea(609635584)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(609635584)
	Arguments and temporary variables: 
		anEvent: 	[(25@14) mouseDown yellow 11393442 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@50)
		owner: 	a TransformWithLayoutMorph(504002560)
		submorphs: 	an Array(a RubPrimarySelectionMorph(71492864) a RubCursor(30301184) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (948069376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(22851840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(30301184)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1073394688))
		getMenuPolicy: 	a RubEditingArea(609635584)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@278) mouseDown yellow 11393442 nil]
		aMorph: 	a TransformWithLayoutMorph(504002560)
		globalPt: 	(608@278)
		localEvt: 	[(25@14) mouseDown yellow 11393442 nil]
		index: 	1
		child: 	a RubEditingArea(609635584)
		morphs: 	an Array(a RubEditingArea(609635584))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(748270592)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@278) mouseDown yellow 11393442 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(608@278) mouseDown yellow 11393442 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	11393442
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(608@278)
		handler: 	a RubScrolledTextMorph(748270592)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@278) mouseDown yellow 11393442 nil]
		aMorph: 	a TransformWithLayoutMorph(504002560)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@278) mouseDown yellow 11393442 nil]
		aMorph: 	a TransformWithLayoutMorph(504002560)
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(504002560)
	Arguments and temporary variables: 
		anEvent: 	[(608@278) mouseDown yellow 11393442 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(583@264) corner: (985@399)
		owner: 	a RubTextScrollPane(22851840)
		submorphs: 	an Array(a RubEditingArea(609635584))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (368871680) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-583@ -264))
		smoothing: 	1
		localBounds: 	nil


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(608@278) mouseDown yellow 11393442 nil]
		aMorph: 	a RubTextScrollPane(22851840)
		globalPt: 	(608@278)
		localEvt: 	[(608@278) mouseDown yellow 11393442 nil]
		index: 	1
		child: 	a TransformWithLayoutMorph(504002560)
		morphs: 	an Array(a TransformWithLayoutMorph(504002560))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(748270592)
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
ByteSymbol(Object)>>doesNotUnderstand: #self
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CompiledMethod>>bounds:
26 April 2017 5:37:34.065401 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

CompiledMethod(Object)>>doesNotUnderstand: #bounds:
	Receiver: ControlButtonMorph>>#pressedFillStyle
	Arguments and temporary variables: 
		aMessage: 	bounds: (200@200) corner: (250@250)
		exception: 	MessageNotUnderstood: CompiledMethod>>bounds:
		resumeValue: 	nil
	Receiver's instance variables: 
ControlButtonMorph>>#pressedFillStyle

CompiledMethod>>DoIt
	Receiver: ControlButtonMorph>>#pressedFillStyle
	Arguments and temporary variables: 

	Receiver's instance variables: 
ControlButtonMorph>>#pressedFillStyle

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self bounds: (200@200 corner: 250@250)'
		itsSelection: 	a Text for 'self bounds: (200@200 corner: 250@250)'
		itsSelectionString: 	'self bounds: (200@200 corner: 250@250)'
	Receiver's instance variables: 
		ast: 	DoIt
	^ self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	ControlButtonMorph>>#pressedFillStyle
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	ControlButtonMorph>>#pressedFillStyle
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(76530944)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(76530944)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(581931264)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(76530944)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@69)
		owner: 	a TransformWithLayoutMorph(989839360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1049580800) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867997696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(341140480)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(877047808))
		getMenuPolicy: 	a RubEditingArea(76530944)
		mouseDownPoint: 	(7@55)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(581931264)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	11547307
		lastStepMessage: 	nil
		lastCycleTime: 	11547329
		alarms: 	a Heap()
		lastAlarmTime: 	11547307
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(411491584) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	11547307
		lastStepMessage: 	nil
		lastCycleTime: 	11547329
		alarms: 	a Heap()
		lastAlarmTime: 	11547307
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	11547307
		lastStepMessage: 	nil
		lastCycleTime: 	11547329
		alarms: 	a Heap()
		lastAlarmTime: 	11547307
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(860531968)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	11547307
		lastStepMessage: 	nil
		lastCycleTime: 	11547329
		alarms: 	a Heap()
		lastAlarmTime: 	11547307
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(411491584) a Na...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(686850048)
	Arguments and temporary variables: 
		aPoint: 	(676@327)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(76530944)
	Receiver's instance variables: 
		bounds: 	(674.0@319.0) corner: (889.0@557.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(194284800)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(674.0@319.0) corner: (889.0@557.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (215824640) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(1006203904)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(686850048)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(674.0@319.0) corner: (889.0@557.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(194284800)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(674.0@319.0) corner: (889.0@557.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (215824640) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(1006203904)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(686850048)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(674.0@319.0) corner: (889.0@557.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(194284800)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(674.0@319.0) corner: (889.0@557.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (215824640) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(1006203904)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(76530944)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(686850048)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@69)
		owner: 	a TransformWithLayoutMorph(989839360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1049580800) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867997696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(341140480)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(877047808))
		getMenuPolicy: 	a RubEditingArea(76530944)
		mouseDownPoint: 	(7@55)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(686850048)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(674.0@319.0) corner: (889.0@557.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(194284800)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(674.0@319.0) corner: (889.0@557.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (215824640) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(1006203904)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(76530944)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@69)
		owner: 	a TransformWithLayoutMorph(989839360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1049580800) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867997696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(341140480)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(877047808))
		getMenuPolicy: 	a RubEditingArea(76530944)
		mouseDownPoint: 	(7@55)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(76530944)
	Arguments and temporary variables: 
		evt: 	[(93@63) mouseDown yellow 11546260 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@69)
		owner: 	a TransformWithLayoutMorph(989839360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1049580800) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867997696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(341140480)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(877047808))
		getMenuPolicy: 	a RubEditingArea(76530944)
		mouseDownPoint: 	(7@55)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(76530944)
	Arguments and temporary variables: 
		anEvent: 	[(93@63) mouseDown yellow 11546260 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@69)
		owner: 	a TransformWithLayoutMorph(989839360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1049580800) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867997696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(341140480)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(877047808))
		getMenuPolicy: 	a RubEditingArea(76530944)
		mouseDownPoint: 	(7@55)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(93@63) mouseDown yellow 11546260 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(76530944)
	Receiver's instance variables: 
		timeStamp: 	11546260
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(93@63)
		handler: 	a RubEditingArea(76530944)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(76530944)
	Arguments and temporary variables: 
		anEvent: 	[(93@63) mouseDown yellow 11546260 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@69)
		owner: 	a TransformWithLayoutMorph(989839360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1049580800) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867997696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(341140480)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(877047808))
		getMenuPolicy: 	a RubEditingArea(76530944)
		mouseDownPoint: 	(7@55)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(93@63) mouseDown yellow 11546260 nil]
		aMorph: 	a RubEditingArea(76530944)
		globalPt: 	(93@63)
		localEvt: 	[(93@63) mouseDown yellow 11546260 nil]
		index: 	3
		child: 	a RubPrimarySelectionMorph(322531328)
		morphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480))
		handler: 	a RubEditingArea(76530944)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(581931264)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(93@63) mouseDown yellow 11546260 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(93@63) mouseDown yellow 11546260 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	11546260
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(93@63)
		handler: 	a RubEditingArea(76530944)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(93@63) mouseDown yellow 11546260 nil]
		aMorph: 	a RubEditingArea(76530944)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(93@63) mouseDown yellow 11546260 nil]
		aMorph: 	a RubEditingArea(76530944)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(76530944)
	Arguments and temporary variables: 
		anEvent: 	[(93@63) mouseDown yellow 11546260 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@69)
		owner: 	a TransformWithLayoutMorph(989839360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1049580800) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867997696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(341140480)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(877047808))
		getMenuPolicy: 	a RubEditingArea(76530944)
		mouseDownPoint: 	(7@55)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(676@327) mouseDown yellow 11546260 nil]
		aMorph: 	a TransformWithLayoutMorph(989839360)
		globalPt: 	(676@327)
		localEvt: 	[(93@63) mouseDown yellow 11546260 nil]
		index: 	1
		child: 	a RubEditingArea(76530944)
		morphs: 	an Array(a RubEditingArea(76530944))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(581931264)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(676@327) mouseDown yellow 11546260 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(676@327) mouseDown yellow 11546260 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	11546260
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(676@327)
		handler: 	a RubScrolledTextMorph(581931264)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(676@327) mouseDown yellow 11546260 nil]
		aMorph: 	a TransformWithLayoutMorph(989839360)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(676@327) mouseDown yellow 11546260 nil]
		aMorph: 	a TransformWithLayoutMorph(989839360)
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(989839360)
	Arguments and temporary variables: 
		anEvent: 	[(676@327) mouseDown yellow 11546260 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(583@264) corner: (985@399)
		owner: 	a RubTextScrollPane(867997696)
		submorphs: 	an Array(a RubEditingArea(76530944))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (268069888) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-583@ -264))
		smoothing: 	1
		localBounds: 	nil


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(676@327) mouseDown yellow 11546260 nil]
		aMorph: 	a RubTextScrollPane(867997696)
		globalPt: 	(676@327)
		localEvt: 	[(676@327) mouseDown yellow 11546260 nil]
		index: 	1
		child: 	a TransformWithLayoutMorph(989839360)
		morphs: 	an Array(a TransformWithLayoutMorph(989839360))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(581931264)
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
CompiledMethod(Object)>>doesNotUnderstand: #bounds:
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteSymbol>>self
26 April 2017 5:37:43.602082 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

ByteSymbol(Object)>>doesNotUnderstand: #self
	Receiver: #initialize
	Arguments and temporary variables: 
		aMessage: 	self
		exception: 	MessageNotUnderstood: ByteSymbol>>self
		resumeValue: 	nil
	Receiver's instance variables: 
#initialize

CompiledMethod>>DoIt
	Receiver: ControlButtonMorph>>#pressedFillStyle
	Arguments and temporary variables: 

	Receiver's instance variables: 
ControlButtonMorph>>#pressedFillStyle

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'LOCell>>#initialize
self bounds: (200@200 corner: 250@250)'
		itsSelection: 	a Text for 'LOCell>>#initialize
self bounds: (200@200 corner: 250...etc...
		itsSelectionString: 	'LOCell>>#initialize
self bounds: (200@200 corner: 250@250)...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	^ LOCell >> #initialize self bounds: (200 @ 200 corner: 250 @ 250)
		source: 	a ReadStream
		context: 	nil
		receiver: 	ControlButtonMorph>>#pressedFillStyle
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	ControlButtonMorph>>#pressedFillStyle
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(76530944)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(76530944)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(581931264)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(76530944)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@69)
		owner: 	a TransformWithLayoutMorph(989839360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1049580800) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867997696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(341140480)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(869416192))
		getMenuPolicy: 	a RubEditingArea(76530944)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(581931264)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	11556849
		lastStepMessage: 	nil
		lastCycleTime: 	11556871
		alarms: 	a Heap()
		lastAlarmTime: 	11556849
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(411491584) a Na...etc...
		fullBounds: 	(0@0) corner: (1200@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	11556849
		lastStepMessage: 	nil
		lastCycleTime: 	11556871
		alarms: 	a Heap()
		lastAlarmTime: 	11556849
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	11556849
		lastStepMessage: 	nil
		lastCycleTime: 	11556871
		alarms: 	a Heap()
		lastAlarmTime: 	11556849
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(860531968)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(524415232))(a SearchMorp...etc...
		lastStepTime: 	11556849
		lastStepMessage: 	nil
		lastCycleTime: 	11556871
		alarms: 	a Heap()
		lastAlarmTime: 	11556849
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(411491584) a Na...etc...
		fullBounds: 	(0@0) corner: (1200@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(448481536)
	Arguments and temporary variables: 
		aPoint: 	(593@304)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(76530944)
	Receiver's instance variables: 
		bounds: 	(591.0@296.0) corner: (806.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(834394112)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(591.0@296.0) corner: (806.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (802424832) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(463762688)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(448481536)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(591.0@296.0) corner: (806.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(834394112)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(591.0@296.0) corner: (806.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (802424832) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(463762688)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(448481536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(591.0@296.0) corner: (806.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(834394112)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(591.0@296.0) corner: (806.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (802424832) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(463762688)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(76530944)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(448481536)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@69)
		owner: 	a TransformWithLayoutMorph(989839360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1049580800) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867997696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(341140480)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(869416192))
		getMenuPolicy: 	a RubEditingArea(76530944)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MenuMorph(Object)>>ifNotNilDo:
	Receiver: a MenuMorph(448481536)
	Arguments and temporary variables: 
		aBlock: 	[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self ch...etc...
	Receiver's instance variables: 
		bounds: 	(591.0@296.0) corner: (806.0@534.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(834394112)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(591.0@296.0) corner: (806.0@534.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (802424832) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(463762688)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(76530944)
	Arguments and temporary variables: 
		shiftKeyState: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@69)
		owner: 	a TransformWithLayoutMorph(989839360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1049580800) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867997696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(341140480)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(869416192))
		getMenuPolicy: 	a RubEditingArea(76530944)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(76530944)
	Arguments and temporary variables: 
		evt: 	[(10@40) mouseDown yellow 11556019 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@69)
		owner: 	a TransformWithLayoutMorph(989839360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1049580800) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867997696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(341140480)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(869416192))
		getMenuPolicy: 	a RubEditingArea(76530944)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(76530944)
	Arguments and temporary variables: 
		anEvent: 	[(10@40) mouseDown yellow 11556019 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@69)
		owner: 	a TransformWithLayoutMorph(989839360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1049580800) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867997696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(341140480)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(869416192))
		getMenuPolicy: 	a RubEditingArea(76530944)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(10@40) mouseDown yellow 11556019 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(76530944)
	Receiver's instance variables: 
		timeStamp: 	11556019
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(10@40)
		handler: 	a RubEditingArea(76530944)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(76530944)
	Arguments and temporary variables: 
		anEvent: 	[(10@40) mouseDown yellow 11556019 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@69)
		owner: 	a TransformWithLayoutMorph(989839360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1049580800) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867997696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(341140480)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(869416192))
		getMenuPolicy: 	a RubEditingArea(76530944)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(10@40) mouseDown yellow 11556019 nil]
		aMorph: 	a RubEditingArea(76530944)
		globalPt: 	(10@40)
		localEvt: 	[(10@40) mouseDown yellow 11556019 nil]
		index: 	3
		child: 	a RubPrimarySelectionMorph(322531328)
		morphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480))
		handler: 	a RubEditingArea(76530944)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(581931264)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(10@40) mouseDown yellow 11556019 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(10@40) mouseDown yellow 11556019 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	11556019
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(10@40)
		handler: 	a RubEditingArea(76530944)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(10@40) mouseDown yellow 11556019 nil]
		aMorph: 	a RubEditingArea(76530944)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(10@40) mouseDown yellow 11556019 nil]
		aMorph: 	a RubEditingArea(76530944)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(76530944)
	Arguments and temporary variables: 
		anEvent: 	[(10@40) mouseDown yellow 11556019 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (402@69)
		owner: 	a TransformWithLayoutMorph(989839360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(322531328) a RubCursor(341140480...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1049580800) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867997696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(341140480)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(869416192))
		getMenuPolicy: 	a RubEditingArea(76530944)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(593@304) mouseDown yellow 11556019 nil]
		aMorph: 	a TransformWithLayoutMorph(989839360)
		globalPt: 	(593@304)
		localEvt: 	[(10@40) mouseDown yellow 11556019 nil]
		index: 	1
		child: 	a RubEditingArea(76530944)
		morphs: 	an Array(a RubEditingArea(76530944))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(581931264)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(593@304) mouseDown yellow 11556019 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(593@304) mouseDown yellow 11556019 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	11556019
		source: 	a HandMorph(860531968)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(593@304)
		handler: 	a RubScrolledTextMorph(581931264)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(593@304) mouseDown yellow 11556019 nil]
		aMorph: 	a TransformWithLayoutMorph(989839360)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(593@304) mouseDown yellow 11556019 nil]
		aMorph: 	a TransformWithLayoutMorph(989839360)
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(989839360)
	Arguments and temporary variables: 
		anEvent: 	[(593@304) mouseDown yellow 11556019 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(583@264) corner: (985@399)
		owner: 	a RubTextScrollPane(867997696)
		submorphs: 	an Array(a RubEditingArea(76530944))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (268069888) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-583@ -264))
		smoothing: 	1
		localBounds: 	nil


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(593@304) mouseDown yellow 11556019 nil]
		aMorph: 	a RubTextScrollPane(867997696)
		globalPt: 	(593@304)
		localEvt: 	[(593@304) mouseDown yellow 11556019 nil]
		index: 	1
		child: 	a TransformWithLayoutMorph(989839360)
		morphs: 	an Array(a TransformWithLayoutMorph(989839360))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(581931264)
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
ByteSymbol(Object)>>doesNotUnderstand: #self
CompiledMethod>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>cr
26 April 2017 5:55:46.760061 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

ByteString(Object)>>doesNotUnderstand: #cr
	Receiver: 'nya-n'
	Arguments and temporary variables: 
		aMessage: 	cr
		exception: 	MessageNotUnderstood: ByteString>>cr
		resumeValue: 	nil
	Receiver's instance variables: 
'nya-n'

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Transcript show: ''nya-n'' cr.
'
		itsSelection: 	a Text for 'Transcript show: ''nya-n'' cr.
'
		itsSelectionString: 	'Transcript show: ''nya-n'' cr.
'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Transcript show: 'nya-n' cr
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(247533568)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(247533568)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(798105600)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(247533568)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(621926656)
		submorphs: 	an Array(a RubPrimarySelectionMorph(404337664) a RubCursor(606998528...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (281003008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(704013568)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(606998528)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(502088960))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(505@ -8)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(798105600)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	12594409
		lastStepMessage: 	nil
		lastCycleTime: 	12640057
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606998528)))
		lastAlarmTime: 	12640035
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(805865472) a Sy...etc...
		fullBounds: 	(0@0) corner: (1200@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	12594409
		lastStepMessage: 	nil
		lastCycleTime: 	12640057
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606998528)))
		lastAlarmTime: 	12640035
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(860531968))
		viewBox: 	(0@0) corner: (1200@665)
		canvas: 	a FormCanvas on: DisplayScreen(1200x665x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	12594409
		lastStepMessage: 	nil
		lastCycleTime: 	12640057
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(606998528)))
		lastAlarmTime: 	12640035
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1200@665)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(805865472) a Sy...etc...
		fullBounds: 	(0@0) corner: (1200@665)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (685840640) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #cr
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
26 April 2017 8:20:54.000158 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

ByteString(String)>>findBetweenSubstrings:
	Receiver: 'abcdefg'
	Arguments and temporary variables: 
		delimiters: 	'bcd'
		tokens: 	nil
		keyStart: 	nil
		keyStop: 	nil
	Receiver's instance variables: 
'abcdefg'

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'
''abcdefg'' findBetweenSubstrings: ''bcd'''
		itsSelection: 	a Text for '
''abcdefg'' findBetweenSubstrings: ''bcd'''
		itsSelectionString: 	'
''abcdefg'' findBetweenSubstrings: ''bcd'''
	Receiver's instance variables: 
		ast: 	DoIt
	^ 'abcdefg' findBetweenSubstrings: 'bcd'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(501030144)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(501030144)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(365978624)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(501030144)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@50)
		owner: 	a TransformWithLayoutMorph(533473280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1063034112) a RubCursor(63191884...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628744192) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(342262016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(631918848)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(611420416))
		getMenuPolicy: 	a RubEditingArea(501030144)
		mouseDownPoint: 	(153@33)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(365978624)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(21800192))(a SearchMorph...etc...
		lastStepTime: 	1000237
		lastStepMessage: 	nil
		lastCycleTime: 	1000257
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(631918848)))
		lastAlarmTime: 	1000237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(205882368) a Na...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(21800192))(a SearchMorph...etc...
		lastStepTime: 	1000237
		lastStepMessage: 	nil
		lastCycleTime: 	1000257
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(631918848)))
		lastAlarmTime: 	1000237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(21800192))(a SearchMorph...etc...
		lastStepTime: 	1000237
		lastStepMessage: 	nil
		lastCycleTime: 	1000257
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(631918848)))
		lastAlarmTime: 	1000237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(205882368) a Na...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ByteString(String)>>findBetweenSubstrings:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
InvalidGlobalName: NameOfSubclass: NameOfSubclass is not a valid class name
1 May 2017 1:34:37.994547 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

SlotClassBuilder>>validateClassName
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	LOCell
		name: 	#NameOfSubclass
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


SlotClassBuilder>>name:
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	LOCell
		name: 	#NameOfSubclass
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self classLayout class;
	slots: f asSlotCollection;
	sharedVariablesFromString: d;
	sharedPools: s;
	category: cat;
	environment: self environment;
	copyClassSlotsFromExistingClass ] in LOCell class(Class)>>private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: LOCell
	Arguments and temporary variables: 
		t: 	#NameOfSubclass
		f: 	''
		d: 	''
		s: 	''
		cat: 	'PBE-LightsOut'
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


PharoClassInstaller class(AbstractClassInstaller class)>>make:
	Receiver: PharoClassInstaller
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self c...etc...
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
		superclass: 	AbstractClassInstaller
		methodDict: 	a MethodDictionary(#basicClassDefinitionChangedFrom:to:using:->Phar...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoClassInstaller
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-ClassBuilder'
		traitComposition: 	{}
		localSelectors: 	nil


LOCell class(Class)>>private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: LOCell
	Arguments and temporary variables: 
		t: 	#NameOfSubclass
		f: 	''
		d: 	''
		s: 	''
		cat: 	'PBE-LightsOut'
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVariableNames
	classVariableNames: someClassVariableNames
	poolDictionaries: someSharedPoolNames
	category: aCategory ] in LOCell class(Class)>>subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: LOCell
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
		aTraitCompositionOrArray: 	#()
		someInstanceVariableNames: 	''
		someClassVariableNames: 	''
		someSharedPoolNames: 	''
		aCategory: 	'PBE-LightsOut'
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ aBlock value
	setTraitComposition: aTraitComposition asTraitComposition;
	yourself ] in LOCell class(Class)>>subclass:uses:with:
	Receiver: LOCell
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
		aTraitComposition: 	#()
		aBlock: 	[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVar...etc...
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


SystemDictionary(Dictionary)>>at:ifPresent:ifAbsent:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		key: 	#NameOfSubclass
		oneArgBlock: 	[ :old | 
| copyOfOld newClass |
copyOfOld := old copy.

"Modify t...etc...
		absentBlock: 	[ aBlock value
	setTraitComposition: aTraitComposition asTraitComp...etc...
	Receiver's instance variables: 
		tally: 	5815
		array: 	an Array(#SmallDictionary->SmallDictionary #MetacelloExampleProjectConfi...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupContentHasBe...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


LOCell class(Class)>>subclass:uses:with:
	Receiver: LOCell
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
		aTraitComposition: 	#()
		aBlock: 	[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVar...etc...
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


LOCell class(Class)>>subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: LOCell
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
		aTraitCompositionOrArray: 	#()
		someInstanceVariableNames: 	''
		someClassVariableNames: 	''
		someSharedPoolNames: 	''
		aCategory: 	'PBE-LightsOut'
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


LOCell class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: LOCell
	Arguments and temporary variables: 
		t: 	#NameOfSubclass
		f: 	''
		d: 	''
		s: 	''
		cat: 	'PBE-LightsOut'
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


LOCell class(Class)>>subclass:instanceVariableNames:classVariableNames:package:
	Receiver: LOCell
	Arguments and temporary variables: 
		aSubclassSymbol: 	#NameOfSubclass
		instVarNames: 	''
		classVarNames: 	''
		aPackageSymbol: 	'PBE-LightsOut'
	Receiver's instance variables: 
		superclass: 	SimpleSwitchMorph
		methodDict: 	a MethodDictionary(#initialize->LOCell>>#initialize )
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ LOCell
		subclass: #NameOfSubclass
		instanceVariableNames: ''
		c...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'LOCell subclass: #NameOfSubclass
		instanceVariableNames: '''' 
		cla...etc...
		aController: 	nil
		aClass: 	nil
		oldClass: 	nil
		class: 	nil
		newClassName: 	'NameOfSubclass'
		defTokens: 	an OrderedCollection('LOCell' 'subclass:' '#NameOfSubclass' 'instanc...etc...
		keywdIx: 	2
		envt: 	a SystemDictionary(lots of globals)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(580276224)
		sourceCodePanel: 	a PanelMorph(171811072)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(340149248)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classCommentTextModel: 	a RubScrolledTextModel
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(987760640)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	''
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(1056490752)


NautilusUI(AbstractTool)>>addClassIn:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aPackage: 	a RPackage(PBE-LightsOut)
		classSymbol: 	#NameOfSubclass
		systemCategory: 	#'PBE-LightsOut'
		proposedSuperclass: 	LOCell
		classDefinition: 	'LOCell subclass: #NameOfSubclass
		instanceVariableNames: '''...etc...
		newClass: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(580276224)
		sourceCodePanel: 	a PanelMorph(171811072)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(340149248)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classCommentTextModel: 	a RubScrolledTextModel
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(987760640)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	''
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(1056490752)


NautilusUI>>addClassIn:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aPackage: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(580276224)
		sourceCodePanel: 	a PanelMorph(171811072)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(340149248)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classCommentTextModel: 	a RubScrolledTextModel
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(987760640)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	''
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(1056490752)


NautilusUI(AbstractNautilusUI)>>addClass
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		package: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(580276224)
		sourceCodePanel: 	a PanelMorph(171811072)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(340149248)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classCommentTextModel: 	a RubScrolledTextModel
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(987760640)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	''
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(1056490752)


[ target addClass ] in AbstractNautilusUI class>>classesFixMenu:
	Receiver: AbstractNautilusUI
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a NautilusUI
	Receiver's instance variables: 
		superclass: 	AbstractTool
		methodDict: 	a MethodDictionary(size 356)
		format: 	65551
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{NautilusUI}
		name: 	#AbstractNautilusUI
		classPool: 	a Dictionary(#NextFocusKey->Character arrowRight #PackagesIconsCache...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ target addClass ]
	Arguments and temporary variables: 
		anArg: 	a NautilusUI
	Receiver's instance variables: 
		outerContext: 	AbstractNautilusUI class>>classesFixMenu:
		startpc: 	251
		numArgs: 	0


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(565762304)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(419@309) mouseUp 303265 nil]
		w: 	a WorldMorph(562956288) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(359.0@293.0) corner: (570.0@310.0)
		owner: 	a MenuMorph(442379520)
		submorphs: 	#()
		fullBounds: 	(359.0@293.0) corner: (570.0@310.0)
		color: 	Color black
		extension: 	a MorphExtension (75827456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	138
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(565762304)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(419@309) mouseUp 303265 nil]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(359.0@293.0) corner: (570.0@310.0)
		owner: 	a MenuMorph(442379520)
		submorphs: 	#()
		fullBounds: 	(359.0@293.0) corner: (570.0@310.0)
		color: 	Color black
		extension: 	a MorphExtension (75827456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(565762304)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(419@309) mouseUp 303265 nil]
	Receiver's instance variables: 
		bounds: 	(359.0@293.0) corner: (570.0@310.0)
		owner: 	a MenuMorph(442379520)
		submorphs: 	#()
		fullBounds: 	(359.0@293.0) corner: (570.0@310.0)
		color: 	Color black
		extension: 	a MorphExtension (75827456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(565762304)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(419@309) mouseUp 303265 nil]
	Receiver's instance variables: 
		bounds: 	(359.0@293.0) corner: (570.0@310.0)
		owner: 	a MenuMorph(442379520)
		submorphs: 	#()
		fullBounds: 	(359.0@293.0) corner: (570.0@310.0)
		color: 	Color black
		extension: 	a MorphExtension (75827456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MouseButtonEvent>>sentTo:
	Receiver: [(419@309) mouseUp 303265 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(565762304)'Add Class...'
	Receiver's instance variables: 
		timeStamp: 	303265
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(419@309)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(565762304)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(419@309) mouseUp 303265 nil]
	Receiver's instance variables: 
		bounds: 	(359.0@293.0) corner: (570.0@310.0)
		owner: 	a MenuMorph(442379520)
		submorphs: 	#()
		fullBounds: 	(359.0@293.0) corner: (570.0@310.0)
		color: 	Color black
		extension: 	a MorphExtension (75827456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(419@309) mouseUp 303265 nil]
		aMorph: 	a ToggleMenuItemMorph(565762304)'Add Class...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(419@309) mouseUp 303265 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(419@309) mouseUp 303265 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	303265
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(419@309)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(419@309) mouseUp 303265 nil]
		aMorph: 	a ToggleMenuItemMorph(565762304)'Add Class...'
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(419@309) mouseUp 303265 nil]
		aMorph: 	a ToggleMenuItemMorph(565762304)'Add Class...'
	Receiver's instance variables: 
		morph: 	nil


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(565762304)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(419@309) mouseUp 303265 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(359.0@293.0) corner: (570.0@310.0)
		owner: 	a MenuMorph(442379520)
		submorphs: 	#()
		fullBounds: 	(359.0@293.0) corner: (570.0@310.0)
		color: 	Color black
		extension: 	a MorphExtension (75827456)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(419@309) mouseUp 303265 nil]
		aMorph: 	a MenuMorph(442379520)
		localEvt: 	[(419@309) mouseUp 303265 nil]
		index: 	12
		child: 	a ToggleMenuItemMorph(565762304)'Add Class...'
		morphs: 	an Array(a ToggleMenuItemMorph(596135936)'Refactoring' a ToggleMenuItem...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(419@309) mouseUp 303265 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(419@309) mouseUp 303265 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	303265
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(419@309)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(419@309) mouseUp 303265 nil]
		aMorph: 	a MenuMorph(442379520)
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
SlotClassBuilder>>validateClassName
SlotClassBuilder>>name:
[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self classLayout class;
	slots: f asSlotCollection;
	sharedVariablesFromString: d;
	sharedPools: s;
	category: cat;
	environment: self environment;
	copyClassSlotsFromExistingClass ] in LOCell class(Class)>>private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
PharoClassInstaller class(AbstractClassInstaller class)>>make:
LOCell class(Class)>>private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
[ self
	private_subclass: aName
	instanceVariableNames: someInstanceVariableNames
	classVariableNames: someClassVariableNames
	poolDictionaries: someSharedPoolNames
	category: aCategory ] in LOCell class(Class)>>subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:
[ aBlock value
	setTraitComposition: aTraitComposition asTraitComposition;
	yourself ] in LOCell class(Class)>>subclass:uses:with:
SystemDictionary(Dictionary)>>at:ifPresent:ifAbsent:
LOCell class(Class)>>subclass:uses:with:
LOCell class(Class)>>subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:
LOCell class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
LOCell class(Class)>>subclass:instanceVariableNames:classVariableNames:package:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
NautilusUI(AbstractTool)>>addClassIn:
NautilusUI>>addClassIn:
NautilusUI(AbstractNautilusUI)>>addClass
[ target addClass ] in AbstractNautilusUI class>>classesFixMenu:
BlockClosure>>cull:
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>cellsPerSide
1 May 2017 1:41:34.068424 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #cellsPerSide
	Receiver: a LOGame(754871296)
	Arguments and temporary variables: 
		aMessage: 	cellsPerSide
		exception: 	MessageNotUnderstood: LOGame>>cellsPerSide
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


LOGame>>initialize
	Receiver: a LOGame(754871296)
	Arguments and temporary variables: 
		sampleCell: 	nil
		width: 	nil
		height: 	nil
		n: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


LOGame class(Behavior)>>new
	Receiver: LOGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	BorderedMorph
		methodDict: 	a MethodDictionary(#initialize->LOGame>>#initialize )
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'LOGame new'
		itsSelection: 	a Text for 'LOGame new'
		itsSelectionString: 	'LOGame new'
	Receiver's instance variables: 
		ast: 	DoIt
	^ LOGame new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(749689856)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(749689856)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(749689856)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(749689856)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubEditingArea(Object)>>perform:orSendTo:
	Receiver: a RubEditingArea(749689856)
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a RubSmalltalkEditor
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(751922432)
		submorphs: 	an Array(a RubPrimarySelectionMorph(805692672) a RubCursor(401123328...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (321822720) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(696014848)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(401123328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(749689856)
		mouseDownPoint: 	(94@17)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(886541312)'Do it'
	Arguments and temporary variables: 
		evt: 	[(391@179) mouseUp 726554 nil]
		w: 	a WorldMorph(562956288) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(378.0@168.0) corner: (583.0@185.0)
		owner: 	a MenuMorph(1070617600)
		submorphs: 	#()
		fullBounds: 	(378.0@168.0) corner: (583.0@185.0)
		color: 	Color black
		extension: 	a MorphExtension (437963008)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(749689856)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	138
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(886541312)'Do it'
	Arguments and temporary variables: 
		evt: 	[(391@179) mouseUp 726554 nil]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(378.0@168.0) corner: (583.0@185.0)
		owner: 	a MenuMorph(1070617600)
		submorphs: 	#()
		fullBounds: 	(378.0@168.0) corner: (583.0@185.0)
		color: 	Color black
		extension: 	a MorphExtension (437963008)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(749689856)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(886541312)'Do it'
	Arguments and temporary variables: 
		evt: 	[(391@179) mouseUp 726554 nil]
	Receiver's instance variables: 
		bounds: 	(378.0@168.0) corner: (583.0@185.0)
		owner: 	a MenuMorph(1070617600)
		submorphs: 	#()
		fullBounds: 	(378.0@168.0) corner: (583.0@185.0)
		color: 	Color black
		extension: 	a MorphExtension (437963008)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(749689856)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(886541312)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
	Receiver's instance variables: 
		bounds: 	(378.0@168.0) corner: (583.0@185.0)
		owner: 	a MenuMorph(1070617600)
		submorphs: 	#()
		fullBounds: 	(378.0@168.0) corner: (583.0@185.0)
		color: 	Color black
		extension: 	a MorphExtension (437963008)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(749689856)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MouseButtonEvent>>sentTo:
	Receiver: [(391@179) mouseUp 726554 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(886541312)'Do it'
	Receiver's instance variables: 
		timeStamp: 	726554
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(391@179)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(886541312)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
	Receiver's instance variables: 
		bounds: 	(378.0@168.0) corner: (583.0@185.0)
		owner: 	a MenuMorph(1070617600)
		submorphs: 	#()
		fullBounds: 	(378.0@168.0) corner: (583.0@185.0)
		color: 	Color black
		extension: 	a MorphExtension (437963008)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(749689856)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		aMorph: 	a ToggleMenuItemMorph(886541312)'Do it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(886541312)'Do it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(886541312)'Do it'


MouseButtonEvent>>sentTo:
	Receiver: [(391@179) mouseUp 726554 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	726554
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(391@179)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		aMorph: 	a ToggleMenuItemMorph(886541312)'Do it'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(886541312)'Do it'


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		aMorph: 	a ToggleMenuItemMorph(886541312)'Do it'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(886541312)'Do it'


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(886541312)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(378.0@168.0) corner: (583.0@185.0)
		owner: 	a MenuMorph(1070617600)
		submorphs: 	#()
		fullBounds: 	(378.0@168.0) corner: (583.0@185.0)
		color: 	Color black
		extension: 	a MorphExtension (437963008)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(749689856)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		aMorph: 	a MenuMorph(1070617600)
		localEvt: 	[(391@179) mouseUp 726554 nil]
		index: 	2
		child: 	a ToggleMenuItemMorph(886541312)'Do it'
		morphs: 	an Array(a ToggleMenuItemMorph(347298816)'Suggestions...' a ToggleMenuI...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(886541312)'Do it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(886541312)'Do it'


MouseButtonEvent>>sentTo:
	Receiver: [(391@179) mouseUp 726554 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	726554
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(391@179)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		aMorph: 	a MenuMorph(1070617600)
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(886541312)'Do it'


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		aMorph: 	a MenuMorph(1070617600)
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(886541312)'Do it'


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1070617600)
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(373.0@144.0) corner: (588.0@503.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(347298816)'Suggestions...' a ToggleMe...etc...
		fullBounds: 	(373.0@144.0) corner: (588.0@503.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (191720704) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(886541312)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1070617600)
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
	Receiver's instance variables: 
		bounds: 	(373.0@144.0) corner: (588.0@503.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(347298816)'Suggestions...' a ToggleMe...etc...
		fullBounds: 	(373.0@144.0) corner: (588.0@503.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (191720704) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(886541312)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(1070617600)
	Arguments and temporary variables: 
		evt: 	[(391@179) mouseUp 726554 nil]
	Receiver's instance variables: 
		bounds: 	(373.0@144.0) corner: (588.0@503.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(347298816)'Suggestions...' a ToggleMe...etc...
		fullBounds: 	(373.0@144.0) corner: (588.0@503.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (191720704) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(886541312)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		focusHolder: 	a MenuMorph(1070617600)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(391@179) corner: (407@195)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(391@179) corner: (407@195)
		color: 	Color blue
		extension: 	a MorphExtension (195827968)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(391@179) mouseUp 726554 nil]
		targetOffset: 	(13.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 726554 391 179 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(391@179) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(372619520) an Im...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(391@179) mouseUp 726554 nil]
		focusHolder: 	a MenuMorph(1070617600)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(391@179) corner: (407@195)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(391@179) corner: (407@195)
		color: 	Color blue
		extension: 	a MorphExtension (195827968)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(391@179) mouseUp 726554 nil]
		targetOffset: 	(13.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 726554 391 179 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		focusHolder: 	a MenuMorph(1070617600)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(391@179) corner: (407@195)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(391@179) corner: (407@195)
		color: 	Color blue
		extension: 	a MorphExtension (195827968)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(391@179) mouseUp 726554 nil]
		targetOffset: 	(13.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 726554 391 179 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #cellsPerSide
LOGame>>initialize
LOGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>evaluateSelectionAndDo:
RubSmalltalkEditor>>evaluateSelection
RubSmalltalkEditor>>doIt
RubEditingArea(Object)>>perform:orSendTo:
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
StandardWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>newCellAt:at:
1 May 2017 1:48:08.426593 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #newCellAt:at:
	Receiver: a LOGame(754871296)
	Arguments and temporary variables: 
		aMessage: 	newCellAt: 1 at: 1
		exception: 	MessageNotUnderstood: LOGame>>newCellAt:at:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (909892608)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


[ :i :j | self newCellAt: i at: j ] in LOGame>>initialize
	Receiver: a LOGame(754871296)
	Arguments and temporary variables: 
		sampleCell: 	a LOCell(335080704)
		width: 	16
		height: 	16
		n: 	10
		i: 	1
		j: 	1
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (909892608)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


Matrix class>>rows:columns:tabulate:
	Receiver: Matrix
	Arguments and temporary variables: 
		rowNumber: 	10
		columnNumber: 	10
		aTwoArgumentBlock: 	[ :i :j | self newCellAt: i at: j ]
		a: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...
		i: 	1
		row: 	1
		column: 	1
	Receiver's instance variables: 
		superclass: 	Collection
		methodDict: 	a MethodDictionary(#'+*'->Matrix>>#'+*' #,->Matrix>>#, #',,'->Matri...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Matrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Unordered'
		traitComposition: 	{}
		localSelectors: 	nil


Matrix class>>new:tabulate:
	Receiver: Matrix
	Arguments and temporary variables: 
		dimension: 	10
		aTwoArgumentBlock: 	[ :i :j | self newCellAt: i at: j ]
	Receiver's instance variables: 
		superclass: 	Collection
		methodDict: 	a MethodDictionary(#'+*'->Matrix>>#'+*' #,->Matrix>>#, #',,'->Matri...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Matrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Unordered'
		traitComposition: 	{}
		localSelectors: 	nil


LOGame>>initialize
	Receiver: a LOGame(754871296)
	Arguments and temporary variables: 
		sampleCell: 	a LOCell(335080704)
		width: 	16
		height: 	16
		n: 	10
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (909892608)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


LOGame class(Behavior)>>new
	Receiver: LOGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	BorderedMorph
		methodDict: 	a MethodDictionary(#cellsPerSide->LOGame>>#cellsPerSide #initialize...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'LOGame new'
		itsSelection: 	a Text for 'LOGame new'
		itsSelectionString: 	'LOGame new'
	Receiver's instance variables: 
		ast: 	DoIt
	^ LOGame new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(749689856)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(749689856)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(749689856)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(749689856)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubEditingArea(Object)>>perform:orSendTo:
	Receiver: a RubEditingArea(749689856)
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a RubSmalltalkEditor
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(751922432)
		submorphs: 	an Array(a RubPrimarySelectionMorph(805692672) a RubCursor(401123328...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (321822720) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(696014848)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(401123328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(749689856)
		mouseDownPoint: 	(679@84)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(886541312)'Do it'
	Arguments and temporary variables: 
		evt: 	[(391@179) mouseUp 726554 nil]
		w: 	a WorldMorph(562956288) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(378.0@168.0) corner: (583.0@185.0)
		owner: 	a MenuMorph(1070617600)
		submorphs: 	#()
		fullBounds: 	(378.0@168.0) corner: (583.0@185.0)
		color: 	Color black
		extension: 	a MorphExtension (437963008)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(749689856)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	138
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(886541312)'Do it'
	Arguments and temporary variables: 
		evt: 	[(391@179) mouseUp 726554 nil]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(378.0@168.0) corner: (583.0@185.0)
		owner: 	a MenuMorph(1070617600)
		submorphs: 	#()
		fullBounds: 	(378.0@168.0) corner: (583.0@185.0)
		color: 	Color black
		extension: 	a MorphExtension (437963008)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(749689856)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(886541312)'Do it'
	Arguments and temporary variables: 
		evt: 	[(391@179) mouseUp 726554 nil]
	Receiver's instance variables: 
		bounds: 	(378.0@168.0) corner: (583.0@185.0)
		owner: 	a MenuMorph(1070617600)
		submorphs: 	#()
		fullBounds: 	(378.0@168.0) corner: (583.0@185.0)
		color: 	Color black
		extension: 	a MorphExtension (437963008)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(749689856)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(886541312)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
	Receiver's instance variables: 
		bounds: 	(378.0@168.0) corner: (583.0@185.0)
		owner: 	a MenuMorph(1070617600)
		submorphs: 	#()
		fullBounds: 	(378.0@168.0) corner: (583.0@185.0)
		color: 	Color black
		extension: 	a MorphExtension (437963008)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(749689856)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MouseButtonEvent>>sentTo:
	Receiver: [(391@179) mouseUp 726554 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(886541312)'Do it'
	Receiver's instance variables: 
		timeStamp: 	726554
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(391@179)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(886541312)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
	Receiver's instance variables: 
		bounds: 	(378.0@168.0) corner: (583.0@185.0)
		owner: 	a MenuMorph(1070617600)
		submorphs: 	#()
		fullBounds: 	(378.0@168.0) corner: (583.0@185.0)
		color: 	Color black
		extension: 	a MorphExtension (437963008)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(749689856)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		aMorph: 	a ToggleMenuItemMorph(886541312)'Do it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(391@179) mouseUp 726554 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	726554
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(391@179)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		aMorph: 	a ToggleMenuItemMorph(886541312)'Do it'
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		aMorph: 	a ToggleMenuItemMorph(886541312)'Do it'
	Receiver's instance variables: 
		morph: 	nil


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(886541312)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(378.0@168.0) corner: (583.0@185.0)
		owner: 	a MenuMorph(1070617600)
		submorphs: 	#()
		fullBounds: 	(378.0@168.0) corner: (583.0@185.0)
		color: 	Color black
		extension: 	a MorphExtension (437963008)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(749689856)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		aMorph: 	a MenuMorph(1070617600)
		localEvt: 	[(391@179) mouseUp 726554 nil]
		index: 	2
		child: 	a ToggleMenuItemMorph(886541312)'Do it'
		morphs: 	an Array(a ToggleMenuItemMorph(347298816)'Suggestions...' a ToggleMenuI...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(391@179) mouseUp 726554 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	726554
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(391@179)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		aMorph: 	a MenuMorph(1070617600)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		aMorph: 	a MenuMorph(1070617600)
	Receiver's instance variables: 
		morph: 	nil


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1070617600)
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(373.0@144.0) corner: (588.0@503.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(347298816)'Suggestions...' a ToggleMe...etc...
		fullBounds: 	(373.0@144.0) corner: (588.0@503.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (191720704) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(886541312)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1070617600)
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
	Receiver's instance variables: 
		bounds: 	(373.0@144.0) corner: (588.0@503.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(347298816)'Suggestions...' a ToggleMe...etc...
		fullBounds: 	(373.0@144.0) corner: (588.0@503.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (191720704) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(886541312)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(1070617600)
	Arguments and temporary variables: 
		evt: 	[(391@179) mouseUp 726554 nil]
	Receiver's instance variables: 
		bounds: 	(373.0@144.0) corner: (588.0@503.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(347298816)'Suggestions...' a ToggleMe...etc...
		fullBounds: 	(373.0@144.0) corner: (588.0@503.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (191720704) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(886541312)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(391@179) mouseUp 726554 nil]
		focusHolder: 	a MenuMorph(1070617600)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(644@164) corner: (660@180)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(644@164) corner: (660@180)
		color: 	Color blue
		extension: 	a MorphExtension (195827968)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(677955840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(644@164) mouseUp 1120935 nil]
		targetOffset: 	(20.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1120935 644 164 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #newCellAt:at:
[ :i :j | self newCellAt: i at: j ] in LOGame>>initialize
Matrix class>>rows:columns:tabulate:
Matrix class>>new:tabulate:
LOGame>>initialize
LOGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>evaluateSelectionAndDo:
RubSmalltalkEditor>>evaluateSelection
RubSmalltalkEditor>>doIt
RubEditingArea(Object)>>perform:orSendTo:
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[ :menu | 
menu setInvokingView: self editor.
menu invokeModal.
self changed.
^ true ] in RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
StandardWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

1 May 2017 2:44:33.94783 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(182064896)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@145)
		owner: 	a TransformWithLayoutMorph(875325952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(879407616) a RubCursor(397319680...etc...
		fullBounds: 	(0@0) corner: (821@145)
		color: 	Color transparent
		extension: 	a MorphExtension (558787072) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(269771520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(397319680)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(208.0@167.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(182064896)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@145)
		owner: 	a TransformWithLayoutMorph(875325952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(879407616) a RubCursor(397319680...etc...
		fullBounds: 	(0@0) corner: (821@145)
		color: 	Color transparent
		extension: 	a MorphExtension (558787072) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(269771520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(397319680)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(208.0@167.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(182064896)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@145)
		owner: 	a TransformWithLayoutMorph(875325952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(879407616) a RubCursor(397319680...etc...
		fullBounds: 	(0@0) corner: (821@145)
		color: 	Color transparent
		extension: 	a MorphExtension (558787072) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(269771520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(397319680)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(208.0@167.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(182064896)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@145)
		owner: 	a TransformWithLayoutMorph(875325952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(879407616) a RubCursor(397319680...etc...
		fullBounds: 	(0@0) corner: (821@145)
		color: 	Color transparent
		extension: 	a MorphExtension (558787072) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(269771520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(397319680)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(208.0@167.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(182064896)
	Receiver's instance variables: 
		bounds: 	(-436@204) corner: (-420@220)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(-436@204) mouseOver nil nil]
		targetOffset: 	(227.0@167.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2274534 -436 204 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(-436@204) corner: (-420@220)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(-436@204) mouseOver nil nil]
		targetOffset: 	(227.0@167.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2274534 -436 204 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@721)
		hand: 	a HandMorph(757873920)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(282238464) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(110434304))(a DropList...etc...
		lastStepTime: 	2280593
		lastStepMessage: 	nil
		lastCycleTime: 	2280615
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(397319680)))
		lastAlarmTime: 	2280593
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@721)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(282238464) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(282238464) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('801f96df-0fcf-4593-adfc-1f38d7c51d1c')
		creationTime: 	2017-05-01T14:06:32.449836+09:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('801f96df-0fcf-4593-adfc-1f38d7c51d1c')
		creationTime: 	2017-05-01T14:06:32.449836+09:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('801f96df-0fcf-4593-adfc-1f38d7c51d1c')
		creationTime: 	2017-05-01T14:06:32.449836+09:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay) a ClassSessionHa...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	45
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay) a ClassSessionHa...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('801f96df-0fcf-4593-adfc-1f38d7c51d1c')
		creationTime: 	2017-05-01T14:06:32.449836+09:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('801f96df-0fcf-4593-adfc-1f38d7c51d1c')
		creationTime: 	2017-05-01T14:06:32.449836+09:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('801f96df-0fcf-4593-adfc-1f38d7c51d1c')
		creationTime: 	2017-05-01T14:06:32.449836+09:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

1 May 2017 2:44:36.578948 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(182064896)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@145)
		owner: 	a TransformWithLayoutMorph(875325952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(879407616) a RubCursor(397319680...etc...
		fullBounds: 	(0@0) corner: (821@145)
		color: 	Color transparent
		extension: 	a MorphExtension (558787072) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(269771520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(397319680)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(98.0@122.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(182064896)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@145)
		owner: 	a TransformWithLayoutMorph(875325952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(879407616) a RubCursor(397319680...etc...
		fullBounds: 	(0@0) corner: (821@145)
		color: 	Color transparent
		extension: 	a MorphExtension (558787072) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(269771520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(397319680)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(98.0@122.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(182064896)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@145)
		owner: 	a TransformWithLayoutMorph(875325952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(879407616) a RubCursor(397319680...etc...
		fullBounds: 	(0@0) corner: (821@145)
		color: 	Color transparent
		extension: 	a MorphExtension (558787072) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(269771520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(397319680)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(98.0@122.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(182064896)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (821@145)
		owner: 	a TransformWithLayoutMorph(875325952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(879407616) a RubCursor(397319680...etc...
		fullBounds: 	(0@0) corner: (821@145)
		color: 	Color transparent
		extension: 	a MorphExtension (558787072) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(269771520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(397319680)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(98.0@122.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(182064896)
	Receiver's instance variables: 
		bounds: 	(45@439) corner: (61@455)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(45@439) mouseOver nil nil]
		targetOffset: 	(98.0@122.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2282741 45 439 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(45@439) corner: (61@455)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(45@439) mouseOver nil nil]
		targetOffset: 	(98.0@122.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2282741 45 439 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@721)
		hand: 	a HandMorph(757873920)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GrowlMorph(465600256) a Nautilu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(807194880))(a SearchMorp...etc...
		lastStepTime: 	2284065
		lastStepMessage: 	nil
		lastCycleTime: 	2284087
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(397319680)))
		lastAlarmTime: 	2284065
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@721)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GrowlMorph(465600256) a Nautilu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GrowlMorph(465600256) a Nautilu...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('801f96df-0fcf-4593-adfc-1f38d7c51d1c')
		creationTime: 	2017-05-01T14:06:32.449836+09:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('801f96df-0fcf-4593-adfc-1f38d7c51d1c')
		creationTime: 	2017-05-01T14:06:32.449836+09:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('801f96df-0fcf-4593-adfc-1f38d7c51d1c')
		creationTime: 	2017-05-01T14:06:32.449836+09:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay) a ClassSessionHa...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	45
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay) a ClassSessionHa...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('801f96df-0fcf-4593-adfc-1f38d7c51d1c')
		creationTime: 	2017-05-01T14:06:32.449836+09:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('801f96df-0fcf-4593-adfc-1f38d7c51d1c')
		creationTime: 	2017-05-01T14:06:32.449836+09:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('801f96df-0fcf-4593-adfc-1f38d7c51d1c')
		creationTime: 	2017-05-01T14:06:32.449836+09:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOCell>>mouseAction:
1 May 2017 2:46:33.83767 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOCell(Object)>>doesNotUnderstand: #mouseAction:
	Receiver: a LOCell(932840960)
	Arguments and temporary variables: 
		aMessage: 	mouseAction: [ self toggleNeighboursOfCellAt: i at: j ]
		exception: 	MessageNotUnderstood: LOCell>>mouseAction:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(6.0@6.0) corner: (22.0@22.0)
		owner: 	a LOGame(601716224)
		submorphs: 	an Array(a StringMorph(547305216)'')
		fullBounds: 	(6.0@6.0) corner: (22.0@26.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (887376384)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(547305216)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	nil


LOGame>>newCellAt:at:
	Receiver: a LOGame(601716224)
	Arguments and temporary variables: 
		i: 	1
		j: 	1
		c: 	a LOCell(932840960)
		origin: 	(6.0@6.0)
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	nil
		submorphs: 	an Array(a LOCell(932840960))
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (937919232)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


[ :i :j | self newCellAt: i at: j ] in LOGame>>initialize
	Receiver: a LOGame(601716224)
	Arguments and temporary variables: 
		sampleCell: 	a LOCell(5889536)
		width: 	16
		height: 	16
		n: 	10
		i: 	1
		j: 	1
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	nil
		submorphs: 	an Array(a LOCell(932840960))
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (937919232)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


Matrix class>>rows:columns:tabulate:
	Receiver: Matrix
	Arguments and temporary variables: 
		rowNumber: 	10
		columnNumber: 	10
		aTwoArgumentBlock: 	[ :i :j | self newCellAt: i at: j ]
		a: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...
		i: 	1
		row: 	1
		column: 	1
	Receiver's instance variables: 
		superclass: 	Collection
		methodDict: 	a MethodDictionary(#'+*'->Matrix>>#'+*' #,->Matrix>>#, #',,'->Matri...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Matrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Unordered'
		traitComposition: 	{}
		localSelectors: 	nil


Matrix class>>new:tabulate:
	Receiver: Matrix
	Arguments and temporary variables: 
		dimension: 	10
		aTwoArgumentBlock: 	[ :i :j | self newCellAt: i at: j ]
	Receiver's instance variables: 
		superclass: 	Collection
		methodDict: 	a MethodDictionary(#'+*'->Matrix>>#'+*' #,->Matrix>>#, #',,'->Matri...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Matrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Unordered'
		traitComposition: 	{}
		localSelectors: 	nil


LOGame>>initialize
	Receiver: a LOGame(601716224)
	Arguments and temporary variables: 
		sampleCell: 	a LOCell(5889536)
		width: 	16
		height: 	16
		n: 	10
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	nil
		submorphs: 	an Array(a LOCell(932840960))
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (937919232)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


LOGame class(Behavior)>>new
	Receiver: LOGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	BorderedMorph
		methodDict: 	a MethodDictionary(#cellsPerSide->LOGame>>#cellsPerSide #initialize...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'LOGame new openInWorld'
		itsSelection: 	a Text for 'LOGame new openInWorld'
		itsSelectionString: 	'LOGame new openInWorld'
	Receiver's instance variables: 
		ast: 	DoIt
	^ LOGame new openInWorld
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(184967936)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(184967936)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(184967936)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(184967936)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(184967936)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
	Receiver: RubSmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a RubEditingArea(184967936)
	Receiver's instance variables: 
		superclass: 	RubTextEditor
		methodDict: 	a MethodDictionary(#atCompletionPosition->RubSmalltalkEditor>>#atCo...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RubSmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Rubric-Editing-Code'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		anArg: 	a RubEditingArea(184967936)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(184967936)
		secondArg: 	a RubEditingArea(184967936)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(184967936)
		secondArg: 	a RubEditingArea(184967936)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a RubEditingArea(184967936)
		category: 	a KMCategory
		morph: 	a RubEditingArea(184967936)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


Set>>do:
	Receiver: a Set(#methodStringsContainingIt on Meta + Shift + E do [ :target | target editor methodSt...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	6
		each: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		tally: 	13
		array: 	an Array(#methodStringsContainingIt on Meta + Shift + E do [ :target | t...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a RubEditingArea(184967936)
		category: 	a KMCategory
		morph: 	a RubEditingArea(184967936)


[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#RubSmalltalkEditor) aKMCategoryTarget(#MorphF...etc...
		morph: 	a RubEditingArea(184967936)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#RubSmalltalkEditor) aKMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
...etc...
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#RubSmalltalkEditor) a...etc...
		firstIndex: 	1
		lastIndex: 	4


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#RubSmalltalkEditor) aKMCategoryTarget(#MorphF...etc...
		morph: 	a RubEditingArea(184967936)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a RubEditingArea(184967936)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#RubSmalltalkEditor) aKMCategoryTarget(#MorphF...etc...
		morph: 	a RubEditingArea(184967936)
		directKeymaps: 	a KMCategory


RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a RubEditingArea(184967936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(274595328)
		submorphs: 	an Array(a RubCursor(37020160) a RubPrimarySelectionMorph(184545024)...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (504539904) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(686731776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(37020160)
		segments: 	nil
		getMenuPolicy: 	a RubEditingArea(184967936)
		mouseDownPoint: 	(10@17)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
	Receiver: a RubEditingArea(184967936)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(274595328)
		submorphs: 	an Array(a RubCursor(37020160) a RubPrimarySelectionMorph(184545024)...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (504539904) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(686731776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(37020160)
		segments: 	nil
		getMenuPolicy: 	a RubEditingArea(184967936)
		mouseDownPoint: 	(10@17)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(184967936)
	Receiver's instance variables: 
		timeStamp: 	2401616
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(68@47)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(184967936)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(274595328)
		submorphs: 	an Array(a RubCursor(37020160) a RubPrimarySelectionMorph(184545024)...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (504539904) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(686731776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(37020160)
		segments: 	nil
		getMenuPolicy: 	a RubEditingArea(184967936)
		mouseDownPoint: 	(10@17)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor



--- The full stack ---
LOCell(Object)>>doesNotUnderstand: #mouseAction:
LOGame>>newCellAt:at:
[ :i :j | self newCellAt: i at: j ] in LOGame>>initialize
Matrix class>>rows:columns:tabulate:
Matrix class>>new:tabulate:
LOGame>>initialize
LOGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>evaluateSelectionAndDo:
RubSmalltalkEditor>>evaluateSelection
RubSmalltalkEditor>>doIt
RubSmalltalkEditor>>doIt:
[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOCell>>mouseAction:
1 May 2017 2:47:54.173413 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOCell(Object)>>doesNotUnderstand: #mouseAction:
	Receiver: a LOCell(883692288)
	Arguments and temporary variables: 
		aMessage: 	mouseAction: [ self toggleNeighboursOfCellAt: i at: j ]
		exception: 	MessageNotUnderstood: LOCell>>mouseAction:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(6.0@6.0) corner: (22.0@22.0)
		owner: 	a LOGame(220450304)
		submorphs: 	an Array(a StringMorph(702193408)'')
		fullBounds: 	(6.0@6.0) corner: (22.0@26.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (269296128)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(702193408)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	nil


LOGame>>newCellAt:at:
	Receiver: a LOGame(220450304)
	Arguments and temporary variables: 
		i: 	1
		j: 	1
		c: 	a LOCell(883692288)
		origin: 	(6.0@6.0)
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	nil
		submorphs: 	an Array(a LOCell(883692288))
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (241462016)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


[ :i :j | self newCellAt: i at: j ] in LOGame>>initialize
	Receiver: a LOGame(220450304)
	Arguments and temporary variables: 
		sampleCell: 	a LOCell(582825472)
		width: 	16
		height: 	16
		n: 	10
		i: 	1
		j: 	1
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	nil
		submorphs: 	an Array(a LOCell(883692288))
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (241462016)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


Matrix class>>rows:columns:tabulate:
	Receiver: Matrix
	Arguments and temporary variables: 
		rowNumber: 	10
		columnNumber: 	10
		aTwoArgumentBlock: 	[ :i :j | self newCellAt: i at: j ]
		a: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...
		i: 	1
		row: 	1
		column: 	1
	Receiver's instance variables: 
		superclass: 	Collection
		methodDict: 	a MethodDictionary(#'+*'->Matrix>>#'+*' #,->Matrix>>#, #',,'->Matri...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Matrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Unordered'
		traitComposition: 	{}
		localSelectors: 	nil


Matrix class>>new:tabulate:
	Receiver: Matrix
	Arguments and temporary variables: 
		dimension: 	10
		aTwoArgumentBlock: 	[ :i :j | self newCellAt: i at: j ]
	Receiver's instance variables: 
		superclass: 	Collection
		methodDict: 	a MethodDictionary(#'+*'->Matrix>>#'+*' #,->Matrix>>#, #',,'->Matri...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Matrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Unordered'
		traitComposition: 	{}
		localSelectors: 	nil


LOGame>>initialize
	Receiver: a LOGame(220450304)
	Arguments and temporary variables: 
		sampleCell: 	a LOCell(582825472)
		width: 	16
		height: 	16
		n: 	10
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	nil
		submorphs: 	an Array(a LOCell(883692288))
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (241462016)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


LOGame class(Behavior)>>new
	Receiver: LOGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	BorderedMorph
		methodDict: 	a MethodDictionary(#cellsPerSide->LOGame>>#cellsPerSide #initialize...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'LOGame new openInWorld'
		itsSelection: 	a Text for 'LOGame new openInWorld'
		itsSelectionString: 	'LOGame new openInWorld'
	Receiver's instance variables: 
		ast: 	DoIt
	^ LOGame new openInWorld
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(184967936)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(184967936)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(184967936)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(184967936)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(184967936)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
	Receiver: RubSmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a RubEditingArea(184967936)
	Receiver's instance variables: 
		superclass: 	RubTextEditor
		methodDict: 	a MethodDictionary(#atCompletionPosition->RubSmalltalkEditor>>#atCo...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RubSmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Rubric-Editing-Code'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		anArg: 	a RubEditingArea(184967936)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(184967936)
		secondArg: 	a RubEditingArea(184967936)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(184967936)
		secondArg: 	a RubEditingArea(184967936)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a RubEditingArea(184967936)
		category: 	a KMCategory
		morph: 	a RubEditingArea(184967936)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


Set>>do:
	Receiver: a Set(#methodStringsContainingIt on Meta + Shift + E do [ :target | target editor methodSt...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	6
		each: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		tally: 	13
		array: 	an Array(#methodStringsContainingIt on Meta + Shift + E do [ :target | t...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a RubEditingArea(184967936)
		category: 	a KMCategory
		morph: 	a RubEditingArea(184967936)


[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#RubSmalltalkEditor) aKMCategoryTarget(#MorphF...etc...
		morph: 	a RubEditingArea(184967936)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#RubSmalltalkEditor) aKMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
...etc...
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#RubSmalltalkEditor) a...etc...
		firstIndex: 	1
		lastIndex: 	4


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#RubSmalltalkEditor) aKMCategoryTarget(#MorphF...etc...
		morph: 	a RubEditingArea(184967936)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a RubEditingArea(184967936)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#RubSmalltalkEditor) aKMCategoryTarget(#MorphF...etc...
		morph: 	a RubEditingArea(184967936)
		directKeymaps: 	a KMCategory


RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a RubEditingArea(184967936)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(274595328)
		submorphs: 	an Array(a RubCursor(37020160) a RubPrimarySelectionMorph(184545024)...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (504539904) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(686731776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(37020160)
		segments: 	nil
		getMenuPolicy: 	a RubEditingArea(184967936)
		mouseDownPoint: 	(92@182)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
	Receiver: a RubEditingArea(184967936)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(274595328)
		submorphs: 	an Array(a RubCursor(37020160) a RubPrimarySelectionMorph(184545024)...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (504539904) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(686731776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(37020160)
		segments: 	nil
		getMenuPolicy: 	a RubEditingArea(184967936)
		mouseDownPoint: 	(92@182)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(184967936)
	Receiver's instance variables: 
		timeStamp: 	2481953
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(196@185)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(184967936)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(274595328)
		submorphs: 	an Array(a RubCursor(37020160) a RubPrimarySelectionMorph(184545024)...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (504539904) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(686731776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(37020160)
		segments: 	nil
		getMenuPolicy: 	a RubEditingArea(184967936)
		mouseDownPoint: 	(92@182)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor



--- The full stack ---
LOCell(Object)>>doesNotUnderstand: #mouseAction:
LOGame>>newCellAt:at:
[ :i :j | self newCellAt: i at: j ] in LOGame>>initialize
Matrix class>>rows:columns:tabulate:
Matrix class>>new:tabulate:
LOGame>>initialize
LOGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>evaluateSelectionAndDo:
RubSmalltalkEditor>>evaluateSelection
RubSmalltalkEditor>>doIt
RubSmalltalkEditor>>doIt:
[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOCell>>mouseAction:
1 May 2017 3:47:23.110225 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOCell(Object)>>doesNotUnderstand: #mouseAction:
	Receiver: a LOCell(21294592)
	Arguments and temporary variables: 
		aMessage: 	mouseAction: [ self toggleNeighboursOfCellAt: i at: j ]
		exception: 	MessageNotUnderstood: LOCell>>mouseAction:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(6.0@6.0) corner: (22.0@22.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(470978304)'')
		fullBounds: 	(6.0@6.0) corner: (22.0@26.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (108704256)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(470978304)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	nil


LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	1
		j: 	1
		c: 	a LOCell(21294592)
		origin: 	(6.0@6.0)
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	nil
		submorphs: 	an Array(a LOCell(21294592))
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


[ :i :j | self newCellAt: i at: j ] in LOGame>>initialize
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		sampleCell: 	a LOCell(310494720)
		width: 	16
		height: 	16
		n: 	10
		i: 	1
		j: 	1
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	nil
		submorphs: 	an Array(a LOCell(21294592))
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


Matrix class>>rows:columns:tabulate:
	Receiver: Matrix
	Arguments and temporary variables: 
		rowNumber: 	10
		columnNumber: 	10
		aTwoArgumentBlock: 	[ :i :j | self newCellAt: i at: j ]
		a: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...
		i: 	1
		row: 	1
		column: 	1
	Receiver's instance variables: 
		superclass: 	Collection
		methodDict: 	a MethodDictionary(#'+*'->Matrix>>#'+*' #,->Matrix>>#, #',,'->Matri...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Matrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Unordered'
		traitComposition: 	{}
		localSelectors: 	nil


Matrix class>>new:tabulate:
	Receiver: Matrix
	Arguments and temporary variables: 
		dimension: 	10
		aTwoArgumentBlock: 	[ :i :j | self newCellAt: i at: j ]
	Receiver's instance variables: 
		superclass: 	Collection
		methodDict: 	a MethodDictionary(#'+*'->Matrix>>#'+*' #,->Matrix>>#, #',,'->Matri...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Matrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Unordered'
		traitComposition: 	{}
		localSelectors: 	nil


LOGame>>initialize
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		sampleCell: 	a LOCell(310494720)
		width: 	16
		height: 	16
		n: 	10
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	nil
		submorphs: 	an Array(a LOCell(21294592))
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	nil


LOGame class(Behavior)>>new
	Receiver: LOGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	BorderedMorph
		methodDict: 	a MethodDictionary(#cellsPerSide->LOGame>>#cellsPerSide #initialize...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'LOGame new openInWorld'
		itsSelection: 	a Text for 'LOGame new openInWorld'
		itsSelectionString: 	'LOGame new openInWorld'
	Receiver's instance variables: 
		ast: 	DoIt
	^ LOGame new openInWorld
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(658914048)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(658914048)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(658914048)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(658914048)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(658914048)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
	Receiver: RubSmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a RubEditingArea(658914048)
	Receiver's instance variables: 
		superclass: 	RubTextEditor
		methodDict: 	a MethodDictionary(#atCompletionPosition->RubSmalltalkEditor>>#atCo...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RubSmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Rubric-Editing-Code'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		anArg: 	a RubEditingArea(658914048)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(658914048)
		secondArg: 	a RubEditingArea(658914048)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(658914048)
		secondArg: 	a RubEditingArea(658914048)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a RubEditingArea(658914048)
		category: 	a KMCategory
		morph: 	a RubEditingArea(658914048)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


Set>>do:
	Receiver: a Set(#methodStringsContainingIt on Meta + Shift + E do [ :target | target editor methodSt...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	6
		each: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		tally: 	13
		array: 	an Array(#methodStringsContainingIt on Meta + Shift + E do [ :target | t...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a RubEditingArea(658914048)
		category: 	a KMCategory
		morph: 	a RubEditingArea(658914048)


[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#RubSmalltalkEditor) aKMCategoryTarget(#MorphF...etc...
		morph: 	a RubEditingArea(658914048)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#RubSmalltalkEditor) aKMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
...etc...
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#RubSmalltalkEditor) a...etc...
		firstIndex: 	1
		lastIndex: 	4


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#RubSmalltalkEditor) aKMCategoryTarget(#MorphF...etc...
		morph: 	a RubEditingArea(658914048)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a RubEditingArea(658914048)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#RubSmalltalkEditor) aKMCategoryTarget(#MorphF...etc...
		morph: 	a RubEditingArea(658914048)
		directKeymaps: 	a KMCategory


RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a RubEditingArea(658914048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(266072832)
		submorphs: 	an Array(a RubCursor(826207744) a RubPrimarySelectionMorph(447512320...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (852902400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(808565248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(826207744)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
	Receiver: a RubEditingArea(658914048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(266072832)
		submorphs: 	an Array(a RubCursor(826207744) a RubPrimarySelectionMorph(447512320...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (852902400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(808565248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(826207744)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(658914048)
	Receiver's instance variables: 
		timeStamp: 	6050897
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(204@156)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(658914048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(266072832)
		submorphs: 	an Array(a RubCursor(826207744) a RubPrimarySelectionMorph(447512320...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (852902400) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(808565248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(826207744)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor



--- The full stack ---
LOCell(Object)>>doesNotUnderstand: #mouseAction:
LOGame>>newCellAt:at:
[ :i :j | self newCellAt: i at: j ] in LOGame>>initialize
Matrix class>>rows:columns:tabulate:
Matrix class>>new:tabulate:
LOGame>>initialize
LOGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>evaluateSelectionAndDo:
RubSmalltalkEditor>>evaluateSelection
RubSmalltalkEditor>>doIt
RubSmalltalkEditor>>doIt:
[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:48:24.699109 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	7
		j: 	3
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	7
		j: 	3
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(616242688)
	Arguments and temporary variables: 
		anEvent: 	[(107@45) mouseUp 6112487 nil]
	Receiver's instance variables: 
		bounds: 	(102.0@38.0) corner: (118.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(982645248)'')
		fullBounds: 	(102.0@38.0) corner: (118.0@58.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (98915072)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(982645248)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(616242688)
	Arguments and temporary variables: 
		anEvent: 	[(107@45) mouseUp 6112487 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(102.0@38.0) corner: (118.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(982645248)'')
		fullBounds: 	(102.0@38.0) corner: (118.0@58.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (98915072)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(982645248)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(107@45) mouseUp 6112487 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(616242688)
	Receiver's instance variables: 
		timeStamp: 	6112487
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(107@45)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(616242688)
	Arguments and temporary variables: 
		anEvent: 	[(107@45) mouseUp 6112487 nil]
	Receiver's instance variables: 
		bounds: 	(102.0@38.0) corner: (118.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(982645248)'')
		fullBounds: 	(102.0@38.0) corner: (118.0@58.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (98915072)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(982645248)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(616242688)
	Arguments and temporary variables: 
		anEvent: 	[(107@45) mouseUp 6112487 nil]
	Receiver's instance variables: 
		bounds: 	(102.0@38.0) corner: (118.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(982645248)'')
		fullBounds: 	(102.0@38.0) corner: (118.0@58.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (98915072)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(982645248)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(107@45) mouseUp 6112487 nil]
		focusHolder: 	a LOCell(616242688)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(107@45) corner: (123@61)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(107@45) corner: (123@61)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(107@45) mouseUp 6112487 nil]
		targetOffset: 	(5.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6112487 107 45 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(107@45) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a LOGame(449469952) a NautilusWin...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(107@45) mouseUp 6112487 nil]
		focusHolder: 	a LOCell(616242688)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(107@45) corner: (123@61)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(107@45) corner: (123@61)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(107@45) mouseUp 6112487 nil]
		targetOffset: 	(5.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6112487 107 45 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(107@45) mouseUp 6112487 nil]
		focusHolder: 	a LOCell(616242688)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(107@45) corner: (123@61)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(107@45) corner: (123@61)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(107@45) mouseUp 6112487 nil]
		targetOffset: 	(5.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6112487 107 45 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(107@45) mouseUp 6112487 nil]
	Receiver's instance variables: 
		bounds: 	(107@45) corner: (123@61)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(107@45) corner: (123@61)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(107@45) mouseUp 6112487 nil]
		targetOffset: 	(5.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6112487 107 45 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(107@45) mouseUp 6112487 nil]
		evt: 	[(107@45) mouseUp 6112487 nil]
	Receiver's instance variables: 
		bounds: 	(107@45) corner: (123@61)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(107@45) corner: (123@61)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(107@45) mouseUp 6112487 nil]
		targetOffset: 	(5.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6112487 107 45 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(107@45) mouseUp 6112487 nil]
		evtBuf: 	#(1 6112487 107 45 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(107@45) corner: (123@61)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(107@45) corner: (123@61)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(107@45) mouseUp 6112487 nil]
		targetOffset: 	(5.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6112487 107 45 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(604611072))(a DropList...etc...
		lastStepTime: 	6112483
		lastStepMessage: 	nil
		lastCycleTime: 	6112505
		alarms: 	a Heap()
		lastAlarmTime: 	6112483
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(604611072))(a DropList...etc...
		lastStepTime: 	6112483
		lastStepMessage: 	nil
		lastCycleTime: 	6112505
		alarms: 	a Heap()
		lastAlarmTime: 	6112483
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(604611072))(a DropList...etc...
		lastStepTime: 	6112483
		lastStepMessage: 	nil
		lastCycleTime: 	6112505
		alarms: 	a Heap()
		lastAlarmTime: 	6112483
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(604611072))(a DropList...etc...
		lastStepTime: 	6112483
		lastStepMessage: 	nil
		lastCycleTime: 	6112505
		alarms: 	a Heap()
		lastAlarmTime: 	6112483
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a LOGame(449469952) a NautilusWin...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:48:56.082179 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	4
		j: 	9
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	4
		j: 	9
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(550694400)
	Arguments and temporary variables: 
		anEvent: 	[(59@146) mouseUp 6143889 nil]
	Receiver's instance variables: 
		bounds: 	(54.0@134.0) corner: (70.0@150.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(428100352)'')
		fullBounds: 	(54.0@134.0) corner: (70.0@154.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (1013470720)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(428100352)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(550694400)
	Arguments and temporary variables: 
		anEvent: 	[(59@146) mouseUp 6143889 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(54.0@134.0) corner: (70.0@150.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(428100352)'')
		fullBounds: 	(54.0@134.0) corner: (70.0@154.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (1013470720)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(428100352)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(59@146) mouseUp 6143889 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(550694400)
	Receiver's instance variables: 
		timeStamp: 	6143889
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(59@146)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(550694400)
	Arguments and temporary variables: 
		anEvent: 	[(59@146) mouseUp 6143889 nil]
	Receiver's instance variables: 
		bounds: 	(54.0@134.0) corner: (70.0@150.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(428100352)'')
		fullBounds: 	(54.0@134.0) corner: (70.0@154.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (1013470720)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(428100352)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(550694400)
	Arguments and temporary variables: 
		anEvent: 	[(59@146) mouseUp 6143889 nil]
	Receiver's instance variables: 
		bounds: 	(54.0@134.0) corner: (70.0@150.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(428100352)'')
		fullBounds: 	(54.0@134.0) corner: (70.0@154.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (1013470720)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(428100352)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(59@146) mouseUp 6143889 nil]
		focusHolder: 	a LOCell(550694400)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(59@146) corner: (75@162)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(59@146) corner: (75@162)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(658914048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(59@146) mouseUp 6143889 nil]
		targetOffset: 	(4.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6143889 59 146 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(59@146) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(273633024) a LOG...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(59@146) mouseUp 6143889 nil]
		focusHolder: 	a LOCell(550694400)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(59@146) corner: (75@162)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(59@146) corner: (75@162)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(658914048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(59@146) mouseUp 6143889 nil]
		targetOffset: 	(4.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6143889 59 146 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(59@146) mouseUp 6143889 nil]
		focusHolder: 	a LOCell(550694400)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(59@146) corner: (75@162)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(59@146) corner: (75@162)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(658914048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(59@146) mouseUp 6143889 nil]
		targetOffset: 	(4.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6143889 59 146 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(59@146) mouseUp 6143889 nil]
	Receiver's instance variables: 
		bounds: 	(59@146) corner: (75@162)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(59@146) corner: (75@162)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(658914048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(59@146) mouseUp 6143889 nil]
		targetOffset: 	(4.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6143889 59 146 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(59@146) mouseUp 6143889 nil]
		evt: 	[(59@146) mouseUp 6143889 nil]
	Receiver's instance variables: 
		bounds: 	(59@146) corner: (75@162)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(59@146) corner: (75@162)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(658914048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(59@146) mouseUp 6143889 nil]
		targetOffset: 	(4.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6143889 59 146 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(59@146) mouseUp 6143889 nil]
		evtBuf: 	#(1 6143889 59 146 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(59@146) corner: (75@162)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(59@146) corner: (75@162)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(658914048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(59@146) mouseUp 6143889 nil]
		targetOffset: 	(4.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6143889 59 146 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6143387
		lastStepMessage: 	nil
		lastCycleTime: 	6143891
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(826207744)))
		lastAlarmTime: 	6143871
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6143387
		lastStepMessage: 	nil
		lastCycleTime: 	6143891
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(826207744)))
		lastAlarmTime: 	6143871
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6143387
		lastStepMessage: 	nil
		lastCycleTime: 	6143891
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(826207744)))
		lastAlarmTime: 	6143871
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6143387
		lastStepMessage: 	nil
		lastCycleTime: 	6143891
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(826207744)))
		lastAlarmTime: 	6143871
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(273633024) a LOG...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:53:37.403045 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	8
		j: 	4
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	8
		j: 	4
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(879892992)
	Arguments and temporary variables: 
		anEvent: 	[(118@55) mouseUp 6425195 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@54.0) corner: (134.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(447211264)'')
		fullBounds: 	(118.0@54.0) corner: (134.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (88021504)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(447211264)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(879892992)
	Arguments and temporary variables: 
		anEvent: 	[(118@55) mouseUp 6425195 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(118.0@54.0) corner: (134.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(447211264)'')
		fullBounds: 	(118.0@54.0) corner: (134.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (88021504)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(447211264)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(118@55) mouseUp 6425195 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(879892992)
	Receiver's instance variables: 
		timeStamp: 	6425195
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(118@55)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(879892992)
	Arguments and temporary variables: 
		anEvent: 	[(118@55) mouseUp 6425195 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@54.0) corner: (134.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(447211264)'')
		fullBounds: 	(118.0@54.0) corner: (134.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (88021504)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(447211264)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(879892992)
	Arguments and temporary variables: 
		anEvent: 	[(118@55) mouseUp 6425195 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@54.0) corner: (134.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(447211264)'')
		fullBounds: 	(118.0@54.0) corner: (134.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (88021504)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(447211264)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(118@55) mouseUp 6425195 nil]
		focusHolder: 	a LOCell(879892992)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(118@55) corner: (134@71)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(118@55) corner: (134@71)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(667838976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(118@55) mouseUp 6425195 nil]
		targetOffset: 	(0.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6425195 118 55 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(118@55) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(625865472) a Sta...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(118@55) mouseUp 6425195 nil]
		focusHolder: 	a LOCell(879892992)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(118@55) corner: (134@71)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(118@55) corner: (134@71)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(667838976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(118@55) mouseUp 6425195 nil]
		targetOffset: 	(0.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6425195 118 55 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(118@55) mouseUp 6425195 nil]
		focusHolder: 	a LOCell(879892992)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(118@55) corner: (134@71)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(118@55) corner: (134@71)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(667838976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(118@55) mouseUp 6425195 nil]
		targetOffset: 	(0.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6425195 118 55 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(118@55) mouseUp 6425195 nil]
	Receiver's instance variables: 
		bounds: 	(118@55) corner: (134@71)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(118@55) corner: (134@71)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(667838976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(118@55) mouseUp 6425195 nil]
		targetOffset: 	(0.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6425195 118 55 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(118@55) mouseUp 6425195 nil]
		evt: 	[(118@55) mouseUp 6425195 nil]
	Receiver's instance variables: 
		bounds: 	(118@55) corner: (134@71)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(118@55) corner: (134@71)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(667838976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(118@55) mouseUp 6425195 nil]
		targetOffset: 	(0.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6425195 118 55 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(118@55) mouseUp 6425195 nil]
		evtBuf: 	#(1 6425195 118 55 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(118@55) corner: (134@71)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(118@55) corner: (134@71)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(667838976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(118@55) mouseUp 6425195 nil]
		targetOffset: 	(0.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6425195 118 55 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6425179
		lastStepMessage: 	nil
		lastCycleTime: 	6425199
		alarms: 	a Heap()
		lastAlarmTime: 	6425179
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6425179
		lastStepMessage: 	nil
		lastCycleTime: 	6425199
		alarms: 	a Heap()
		lastAlarmTime: 	6425179
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6425179
		lastStepMessage: 	nil
		lastCycleTime: 	6425199
		alarms: 	a Heap()
		lastAlarmTime: 	6425179
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6425179
		lastStepMessage: 	nil
		lastCycleTime: 	6425199
		alarms: 	a Heap()
		lastAlarmTime: 	6425179
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(625865472) a Sta...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:53:50.395731 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	5
		j: 	8
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	5
		j: 	8
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(708694528)
	Arguments and temporary variables: 
		anEvent: 	[(78@120) mouseUp 6438202 nil]
	Receiver's instance variables: 
		bounds: 	(70.0@118.0) corner: (86.0@134.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(512992000)'')
		fullBounds: 	(70.0@118.0) corner: (86.0@138.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (784514560)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(512992000)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(708694528)
	Arguments and temporary variables: 
		anEvent: 	[(78@120) mouseUp 6438202 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(70.0@118.0) corner: (86.0@134.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(512992000)'')
		fullBounds: 	(70.0@118.0) corner: (86.0@138.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (784514560)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(512992000)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(78@120) mouseUp 6438202 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(708694528)
	Receiver's instance variables: 
		timeStamp: 	6438202
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(78@120)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(708694528)
	Arguments and temporary variables: 
		anEvent: 	[(78@120) mouseUp 6438202 nil]
	Receiver's instance variables: 
		bounds: 	(70.0@118.0) corner: (86.0@134.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(512992000)'')
		fullBounds: 	(70.0@118.0) corner: (86.0@138.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (784514560)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(512992000)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(708694528)
	Arguments and temporary variables: 
		anEvent: 	[(78@120) mouseUp 6438202 nil]
	Receiver's instance variables: 
		bounds: 	(70.0@118.0) corner: (86.0@134.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(512992000)'')
		fullBounds: 	(70.0@118.0) corner: (86.0@138.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (784514560)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(512992000)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(78@120) mouseUp 6438202 nil]
		focusHolder: 	a LOCell(708694528)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(78@120) corner: (94@136)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(78@120) corner: (94@136)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(667838976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(78@120) mouseUp 6438202 nil]
		targetOffset: 	(8.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6438202 78 120 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(78@120) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(625865472) a Sta...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(78@120) mouseUp 6438202 nil]
		focusHolder: 	a LOCell(708694528)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(78@120) corner: (94@136)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(78@120) corner: (94@136)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(667838976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(78@120) mouseUp 6438202 nil]
		targetOffset: 	(8.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6438202 78 120 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(78@120) mouseUp 6438202 nil]
		focusHolder: 	a LOCell(708694528)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(78@120) corner: (94@136)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(78@120) corner: (94@136)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(667838976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(78@120) mouseUp 6438202 nil]
		targetOffset: 	(8.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6438202 78 120 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(78@120) mouseUp 6438202 nil]
	Receiver's instance variables: 
		bounds: 	(78@120) corner: (94@136)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(78@120) corner: (94@136)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(667838976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(78@120) mouseUp 6438202 nil]
		targetOffset: 	(8.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6438202 78 120 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(78@120) mouseUp 6438202 nil]
		evt: 	[(78@120) mouseUp 6438202 nil]
	Receiver's instance variables: 
		bounds: 	(78@120) corner: (94@136)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(78@120) corner: (94@136)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(667838976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(78@120) mouseUp 6438202 nil]
		targetOffset: 	(8.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6438202 78 120 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(78@120) mouseUp 6438202 nil]
		evtBuf: 	#(1 6438202 78 120 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(78@120) corner: (94@136)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(78@120) corner: (94@136)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(667838976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(78@120) mouseUp 6438202 nil]
		targetOffset: 	(8.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6438202 78 120 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6438180
		lastStepMessage: 	nil
		lastCycleTime: 	6438202
		alarms: 	a Heap()
		lastAlarmTime: 	6438180
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6438180
		lastStepMessage: 	nil
		lastCycleTime: 	6438202
		alarms: 	a Heap()
		lastAlarmTime: 	6438180
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6438180
		lastStepMessage: 	nil
		lastCycleTime: 	6438202
		alarms: 	a Heap()
		lastAlarmTime: 	6438180
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6438180
		lastStepMessage: 	nil
		lastCycleTime: 	6438202
		alarms: 	a Heap()
		lastAlarmTime: 	6438180
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(625865472) a Sta...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:57:19.430539 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	9
		j: 	4
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	9
		j: 	4
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(135@54) mouseUp 6647235 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(977069824)
	Receiver's instance variables: 
		timeStamp: 	6647235
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(135@54)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(135@54) corner: (151@70)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(135@54) corner: (151@70)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(135@54) mouseUp 6647235 nil]
		targetOffset: 	(1.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6647235 135 54 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(135@54) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(625865472) a Sta...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(135@54) corner: (151@70)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(135@54) corner: (151@70)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(135@54) mouseUp 6647235 nil]
		targetOffset: 	(1.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6647235 135 54 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(135@54) corner: (151@70)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(135@54) corner: (151@70)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(135@54) mouseUp 6647235 nil]
		targetOffset: 	(1.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6647235 135 54 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(135@54) corner: (151@70)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(135@54) corner: (151@70)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(135@54) mouseUp 6647235 nil]
		targetOffset: 	(1.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6647235 135 54 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		evt: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(135@54) corner: (151@70)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(135@54) corner: (151@70)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(135@54) mouseUp 6647235 nil]
		targetOffset: 	(1.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6647235 135 54 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(135@54) mouseUp 6647235 nil]
		evtBuf: 	#(1 6647235 135 54 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(135@54) corner: (151@70)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(135@54) corner: (151@70)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(135@54) mouseUp 6647235 nil]
		targetOffset: 	(1.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6647235 135 54 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6647218
		lastStepMessage: 	nil
		lastCycleTime: 	6647239
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6647218
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6647218
		lastStepMessage: 	nil
		lastCycleTime: 	6647239
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6647218
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6647218
		lastStepMessage: 	nil
		lastCycleTime: 	6647239
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6647218
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6647218
		lastStepMessage: 	nil
		lastCycleTime: 	6647239
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6647218
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(625865472) a Sta...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:57:21.504263 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	9
		j: 	4
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	9
		j: 	4
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(135@54) mouseUp 6647235 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(977069824)
	Receiver's instance variables: 
		timeStamp: 	6647235
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(135@54)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(97@137) corner: (113@153)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(97@137) corner: (113@153)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96740096)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(97@137) mouseUp 6649306 nil]
		targetOffset: 	(82.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6649306 97 137 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(135@54) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(497164800) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(97@137) corner: (113@153)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(97@137) corner: (113@153)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96740096)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(97@137) mouseUp 6649306 nil]
		targetOffset: 	(82.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6649306 97 137 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(97@137) corner: (113@153)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(97@137) corner: (113@153)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96740096)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(97@137) mouseUp 6649306 nil]
		targetOffset: 	(82.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6649306 97 137 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(97@137) corner: (113@153)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(97@137) corner: (113@153)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96740096)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(97@137) mouseUp 6649306 nil]
		targetOffset: 	(82.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6649306 97 137 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		evt: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(97@137) corner: (113@153)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(97@137) corner: (113@153)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96740096)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(97@137) mouseUp 6649306 nil]
		targetOffset: 	(82.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6649306 97 137 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(135@54) mouseUp 6647235 nil]
		evtBuf: 	#(1 6647235 135 54 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(97@137) corner: (113@153)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(97@137) corner: (113@153)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(96740096)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(97@137) mouseUp 6649306 nil]
		targetOffset: 	(82.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6649306 97 137 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6649290
		lastStepMessage: 	nil
		lastCycleTime: 	6649311
		alarms: 	a Heap()
		lastAlarmTime: 	6649290
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6649290
		lastStepMessage: 	nil
		lastCycleTime: 	6649311
		alarms: 	a Heap()
		lastAlarmTime: 	6649290
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6649290
		lastStepMessage: 	nil
		lastCycleTime: 	6649311
		alarms: 	a Heap()
		lastAlarmTime: 	6649290
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6649290
		lastStepMessage: 	nil
		lastCycleTime: 	6649311
		alarms: 	a Heap()
		lastAlarmTime: 	6649290
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(497164800) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:57:22.570887 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	9
		j: 	4
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	9
		j: 	4
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(135@54) mouseUp 6647235 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(977069824)
	Receiver's instance variables: 
		timeStamp: 	6647235
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(135@54)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(109@157) corner: (125@173)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(109@157) corner: (125@173)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(121183744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(109@157) mouseUp 6650372 nil]
		targetOffset: 	(74.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6650372 109 157 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(135@54) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(152910592) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(109@157) corner: (125@173)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(109@157) corner: (125@173)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(121183744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(109@157) mouseUp 6650372 nil]
		targetOffset: 	(74.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6650372 109 157 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(109@157) corner: (125@173)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(109@157) corner: (125@173)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(121183744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(109@157) mouseUp 6650372 nil]
		targetOffset: 	(74.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6650372 109 157 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(109@157) corner: (125@173)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(109@157) corner: (125@173)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(121183744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(109@157) mouseUp 6650372 nil]
		targetOffset: 	(74.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6650372 109 157 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		evt: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(109@157) corner: (125@173)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(109@157) corner: (125@173)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(121183744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(109@157) mouseUp 6650372 nil]
		targetOffset: 	(74.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6650372 109 157 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(135@54) mouseUp 6647235 nil]
		evtBuf: 	#(1 6647235 135 54 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(109@157) corner: (125@173)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(109@157) corner: (125@173)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(121183744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(109@157) mouseUp 6650372 nil]
		targetOffset: 	(74.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6650372 109 157 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6650354
		lastStepMessage: 	nil
		lastCycleTime: 	6650376
		alarms: 	a Heap()
		lastAlarmTime: 	6650354
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6650354
		lastStepMessage: 	nil
		lastCycleTime: 	6650376
		alarms: 	a Heap()
		lastAlarmTime: 	6650354
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6650354
		lastStepMessage: 	nil
		lastCycleTime: 	6650376
		alarms: 	a Heap()
		lastAlarmTime: 	6650354
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6650354
		lastStepMessage: 	nil
		lastCycleTime: 	6650376
		alarms: 	a Heap()
		lastAlarmTime: 	6650354
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(152910592) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:57:23.475731 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	9
		j: 	4
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	9
		j: 	4
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(135@54) mouseUp 6647235 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(977069824)
	Receiver's instance variables: 
		timeStamp: 	6647235
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(135@54)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(126@173) corner: (142@189)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(126@173) corner: (142@189)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(606311936)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(126@173) mouseUp 6651276 nil]
		targetOffset: 	(71.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6651276 126 173 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(135@54) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(463536896) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(126@173) corner: (142@189)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(126@173) corner: (142@189)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(606311936)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(126@173) mouseUp 6651276 nil]
		targetOffset: 	(71.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6651276 126 173 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(126@173) corner: (142@189)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(126@173) corner: (142@189)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(606311936)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(126@173) mouseUp 6651276 nil]
		targetOffset: 	(71.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6651276 126 173 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(126@173) corner: (142@189)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(126@173) corner: (142@189)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(606311936)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(126@173) mouseUp 6651276 nil]
		targetOffset: 	(71.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6651276 126 173 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		evt: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(126@173) corner: (142@189)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(126@173) corner: (142@189)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(606311936)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(126@173) mouseUp 6651276 nil]
		targetOffset: 	(71.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6651276 126 173 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(135@54) mouseUp 6647235 nil]
		evtBuf: 	#(1 6647235 135 54 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(126@173) corner: (142@189)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(126@173) corner: (142@189)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(606311936)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(126@173) mouseUp 6651276 nil]
		targetOffset: 	(71.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6651276 126 173 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6651260
		lastStepMessage: 	nil
		lastCycleTime: 	6651282
		alarms: 	a Heap()
		lastAlarmTime: 	6651260
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6651260
		lastStepMessage: 	nil
		lastCycleTime: 	6651282
		alarms: 	a Heap()
		lastAlarmTime: 	6651260
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6651260
		lastStepMessage: 	nil
		lastCycleTime: 	6651282
		alarms: 	a Heap()
		lastAlarmTime: 	6651260
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6651260
		lastStepMessage: 	nil
		lastCycleTime: 	6651282
		alarms: 	a Heap()
		lastAlarmTime: 	6651260
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(463536896) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:57:24.319683 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	9
		j: 	4
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	9
		j: 	4
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(135@54) mouseUp 6647235 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(977069824)
	Receiver's instance variables: 
		timeStamp: 	6647235
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(135@54)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(145@204) corner: (161@220)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(145@204) corner: (161@220)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1066360576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(145@204) mouseUp 6652124 nil]
		targetOffset: 	(70.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6652124 145 204 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(135@54) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(26138112) a Nautilus...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(145@204) corner: (161@220)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(145@204) corner: (161@220)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1066360576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(145@204) mouseUp 6652124 nil]
		targetOffset: 	(70.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6652124 145 204 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(145@204) corner: (161@220)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(145@204) corner: (161@220)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1066360576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(145@204) mouseUp 6652124 nil]
		targetOffset: 	(70.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6652124 145 204 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(145@204) corner: (161@220)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(145@204) corner: (161@220)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1066360576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(145@204) mouseUp 6652124 nil]
		targetOffset: 	(70.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6652124 145 204 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		evt: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(145@204) corner: (161@220)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(145@204) corner: (161@220)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1066360576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(145@204) mouseUp 6652124 nil]
		targetOffset: 	(70.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6652124 145 204 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(135@54) mouseUp 6647235 nil]
		evtBuf: 	#(1 6647235 135 54 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(145@204) corner: (161@220)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(145@204) corner: (161@220)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1066360576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(145@204) mouseUp 6652124 nil]
		targetOffset: 	(70.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6652124 145 204 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6652106
		lastStepMessage: 	nil
		lastCycleTime: 	6652128
		alarms: 	a Heap()
		lastAlarmTime: 	6652106
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6652106
		lastStepMessage: 	nil
		lastCycleTime: 	6652128
		alarms: 	a Heap()
		lastAlarmTime: 	6652106
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6652106
		lastStepMessage: 	nil
		lastCycleTime: 	6652128
		alarms: 	a Heap()
		lastAlarmTime: 	6652106
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6652106
		lastStepMessage: 	nil
		lastCycleTime: 	6652128
		alarms: 	a Heap()
		lastAlarmTime: 	6652106
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(26138112) a Nautilus...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:57:25.224385 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	9
		j: 	4
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	9
		j: 	4
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(135@54) mouseUp 6647235 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(977069824)
	Receiver's instance variables: 
		timeStamp: 	6647235
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(135@54)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(977069824)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(134.0@54.0) corner: (150.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(476185344)'')
		fullBounds: 	(134.0@54.0) corner: (150.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (650337792)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(476185344)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(160@218) corner: (176@234)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(160@218) corner: (176@234)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(731355904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(160@218) mouseUp 6653024 nil]
		targetOffset: 	(65.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6653024 160 218 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(135@54) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(759045888) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(160@218) corner: (176@234)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(160@218) corner: (176@234)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(731355904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(160@218) mouseUp 6653024 nil]
		targetOffset: 	(65.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6653024 160 218 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		focusHolder: 	a LOCell(977069824)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(160@218) corner: (176@234)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(160@218) corner: (176@234)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(731355904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(160@218) mouseUp 6653024 nil]
		targetOffset: 	(65.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6653024 160 218 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(160@218) corner: (176@234)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(160@218) corner: (176@234)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(731355904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(160@218) mouseUp 6653024 nil]
		targetOffset: 	(65.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6653024 160 218 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(135@54) mouseUp 6647235 nil]
		evt: 	[(135@54) mouseUp 6647235 nil]
	Receiver's instance variables: 
		bounds: 	(160@218) corner: (176@234)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(160@218) corner: (176@234)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(731355904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(160@218) mouseUp 6653024 nil]
		targetOffset: 	(65.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6653024 160 218 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(135@54) mouseUp 6647235 nil]
		evtBuf: 	#(1 6647235 135 54 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(160@218) corner: (176@234)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(160@218) corner: (176@234)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(731355904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(160@218) mouseUp 6653024 nil]
		targetOffset: 	(65.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6653024 160 218 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6653010
		lastStepMessage: 	nil
		lastCycleTime: 	6653030
		alarms: 	a Heap()
		lastAlarmTime: 	6653010
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6653010
		lastStepMessage: 	nil
		lastCycleTime: 	6653030
		alarms: 	a Heap()
		lastAlarmTime: 	6653010
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6653010
		lastStepMessage: 	nil
		lastCycleTime: 	6653030
		alarms: 	a Heap()
		lastAlarmTime: 	6653010
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6653010
		lastStepMessage: 	nil
		lastCycleTime: 	6653030
		alarms: 	a Heap()
		lastAlarmTime: 	6653010
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(759045888) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:57:29.505143 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	7
		j: 	3
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	7
		j: 	3
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(616242688)
	Arguments and temporary variables: 
		anEvent: 	[(116@43) mouseUp 6657294 nil]
	Receiver's instance variables: 
		bounds: 	(102.0@38.0) corner: (118.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(982645248)'')
		fullBounds: 	(102.0@38.0) corner: (118.0@58.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (98915072)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(982645248)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(616242688)
	Arguments and temporary variables: 
		anEvent: 	[(116@43) mouseUp 6657294 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(102.0@38.0) corner: (118.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(982645248)'')
		fullBounds: 	(102.0@38.0) corner: (118.0@58.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (98915072)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(982645248)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(116@43) mouseUp 6657294 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(616242688)
	Receiver's instance variables: 
		timeStamp: 	6657294
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(116@43)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(616242688)
	Arguments and temporary variables: 
		anEvent: 	[(116@43) mouseUp 6657294 nil]
	Receiver's instance variables: 
		bounds: 	(102.0@38.0) corner: (118.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(982645248)'')
		fullBounds: 	(102.0@38.0) corner: (118.0@58.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (98915072)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(982645248)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(616242688)
	Arguments and temporary variables: 
		anEvent: 	[(116@43) mouseUp 6657294 nil]
	Receiver's instance variables: 
		bounds: 	(102.0@38.0) corner: (118.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(982645248)'')
		fullBounds: 	(102.0@38.0) corner: (118.0@58.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (98915072)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(982645248)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(116@43) mouseUp 6657294 nil]
		focusHolder: 	a LOCell(616242688)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(116@43) corner: (132@59)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(116@43) corner: (132@59)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(116@43) mouseUp 6657294 nil]
		targetOffset: 	(14.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6657294 116 43 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(116@43) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(625865472) a Sta...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(116@43) mouseUp 6657294 nil]
		focusHolder: 	a LOCell(616242688)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(116@43) corner: (132@59)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(116@43) corner: (132@59)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(116@43) mouseUp 6657294 nil]
		targetOffset: 	(14.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6657294 116 43 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(116@43) mouseUp 6657294 nil]
		focusHolder: 	a LOCell(616242688)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(116@43) corner: (132@59)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(116@43) corner: (132@59)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(116@43) mouseUp 6657294 nil]
		targetOffset: 	(14.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6657294 116 43 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(116@43) mouseUp 6657294 nil]
	Receiver's instance variables: 
		bounds: 	(116@43) corner: (132@59)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(116@43) corner: (132@59)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(116@43) mouseUp 6657294 nil]
		targetOffset: 	(14.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6657294 116 43 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(116@43) mouseUp 6657294 nil]
		evt: 	[(116@43) mouseUp 6657294 nil]
	Receiver's instance variables: 
		bounds: 	(116@43) corner: (132@59)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(116@43) corner: (132@59)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(116@43) mouseUp 6657294 nil]
		targetOffset: 	(14.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6657294 116 43 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(116@43) mouseUp 6657294 nil]
		evtBuf: 	#(1 6657294 116 43 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(116@43) corner: (132@59)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(116@43) corner: (132@59)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(116@43) mouseUp 6657294 nil]
		targetOffset: 	(14.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6657294 116 43 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6657292
		lastStepMessage: 	nil
		lastCycleTime: 	6657314
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6657292
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6657292
		lastStepMessage: 	nil
		lastCycleTime: 	6657314
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6657292
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6657292
		lastStepMessage: 	nil
		lastCycleTime: 	6657314
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6657292
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6657292
		lastStepMessage: 	nil
		lastCycleTime: 	6657314
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6657292
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(625865472) a Sta...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:57:32.321526 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	8
		j: 	3
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	8
		j: 	3
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(673465088)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@38.0) corner: (134.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(455649024)'')
		fullBounds: 	(118.0@38.0) corner: (134.0@58.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (167533056)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(455649024)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(673465088)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(118.0@38.0) corner: (134.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(455649024)'')
		fullBounds: 	(118.0@38.0) corner: (134.0@58.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (167533056)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(455649024)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(124@46) mouseUp 6660130 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(673465088)
	Receiver's instance variables: 
		timeStamp: 	6660130
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(124@46)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(673465088)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@38.0) corner: (134.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(455649024)'')
		fullBounds: 	(118.0@38.0) corner: (134.0@58.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (167533056)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(455649024)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(673465088)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@38.0) corner: (134.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(455649024)'')
		fullBounds: 	(118.0@38.0) corner: (134.0@58.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (167533056)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(455649024)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
		focusHolder: 	a LOCell(673465088)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(124@46) corner: (140@62)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(124@46) corner: (140@62)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(124@46) mouseUp 6660130 nil]
		targetOffset: 	(6.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6660130 124 46 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(124@46) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(625865472) a Sta...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(124@46) mouseUp 6660130 nil]
		focusHolder: 	a LOCell(673465088)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(124@46) corner: (140@62)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(124@46) corner: (140@62)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(124@46) mouseUp 6660130 nil]
		targetOffset: 	(6.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6660130 124 46 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
		focusHolder: 	a LOCell(673465088)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(124@46) corner: (140@62)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(124@46) corner: (140@62)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(124@46) mouseUp 6660130 nil]
		targetOffset: 	(6.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6660130 124 46 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
	Receiver's instance variables: 
		bounds: 	(124@46) corner: (140@62)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(124@46) corner: (140@62)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(124@46) mouseUp 6660130 nil]
		targetOffset: 	(6.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6660130 124 46 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
		evt: 	[(124@46) mouseUp 6660130 nil]
	Receiver's instance variables: 
		bounds: 	(124@46) corner: (140@62)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(124@46) corner: (140@62)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(124@46) mouseUp 6660130 nil]
		targetOffset: 	(6.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6660130 124 46 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(124@46) mouseUp 6660130 nil]
		evtBuf: 	#(1 6660130 124 46 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(124@46) corner: (140@62)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(124@46) corner: (140@62)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(124@46) mouseUp 6660130 nil]
		targetOffset: 	(6.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6660130 124 46 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6660110
		lastStepMessage: 	nil
		lastCycleTime: 	6660132
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6660110
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6660110
		lastStepMessage: 	nil
		lastCycleTime: 	6660132
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6660110
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6660110
		lastStepMessage: 	nil
		lastCycleTime: 	6660132
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6660110
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6660110
		lastStepMessage: 	nil
		lastCycleTime: 	6660132
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6660110
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(625865472) a Sta...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:57:33.24942 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


Message>>sentTo:
	Receiver: toggleState
	Arguments and temporary variables: 
		receiver: 	a LOGame(449469952)
	Receiver's instance variables: 
		selector: 	#toggleState
		args: 	#()
		lookupClass: 	LOGame


LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	MessageNotUnderstood: LOGame>>toggleState
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	8
		j: 	3
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	8
		j: 	3
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(673465088)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@38.0) corner: (134.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(455649024)'')
		fullBounds: 	(118.0@38.0) corner: (134.0@58.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (167533056)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(455649024)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(673465088)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(118.0@38.0) corner: (134.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(455649024)'')
		fullBounds: 	(118.0@38.0) corner: (134.0@58.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (167533056)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(455649024)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(124@46) mouseUp 6660130 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(673465088)
	Receiver's instance variables: 
		timeStamp: 	6660130
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(124@46)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(673465088)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@38.0) corner: (134.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(455649024)'')
		fullBounds: 	(118.0@38.0) corner: (134.0@58.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (167533056)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(455649024)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(673465088)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@38.0) corner: (134.0@54.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(455649024)'')
		fullBounds: 	(118.0@38.0) corner: (134.0@58.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (167533056)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(455649024)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
		focusHolder: 	a LOCell(673465088)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(108@140) corner: (124@156)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(108@140) corner: (124@156)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(967095040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(108@140) mouseUp 6661050 nil]
		targetOffset: 	(93.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6661050 108 140 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(124@46) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(755346176) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(124@46) mouseUp 6660130 nil]
		focusHolder: 	a LOCell(673465088)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(108@140) corner: (124@156)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(108@140) corner: (124@156)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(967095040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(108@140) mouseUp 6661050 nil]
		targetOffset: 	(93.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6661050 108 140 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
		focusHolder: 	a LOCell(673465088)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(108@140) corner: (124@156)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(108@140) corner: (124@156)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(967095040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(108@140) mouseUp 6661050 nil]
		targetOffset: 	(93.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6661050 108 140 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
	Receiver's instance variables: 
		bounds: 	(108@140) corner: (124@156)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(108@140) corner: (124@156)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(967095040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(108@140) mouseUp 6661050 nil]
		targetOffset: 	(93.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6661050 108 140 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(124@46) mouseUp 6660130 nil]
		evt: 	[(124@46) mouseUp 6660130 nil]
	Receiver's instance variables: 
		bounds: 	(108@140) corner: (124@156)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(108@140) corner: (124@156)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(967095040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(108@140) mouseUp 6661050 nil]
		targetOffset: 	(93.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6661050 108 140 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(124@46) mouseUp 6660130 nil]
		evtBuf: 	#(1 6660130 124 46 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(108@140) corner: (124@156)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(108@140) corner: (124@156)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(967095040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(108@140) mouseUp 6661050 nil]
		targetOffset: 	(93.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6661050 108 140 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6661034
		lastStepMessage: 	nil
		lastCycleTime: 	6661054
		alarms: 	a Heap()
		lastAlarmTime: 	6661034
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6661034
		lastStepMessage: 	nil
		lastCycleTime: 	6661054
		alarms: 	a Heap()
		lastAlarmTime: 	6661034
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6661034
		lastStepMessage: 	nil
		lastCycleTime: 	6661054
		alarms: 	a Heap()
		lastAlarmTime: 	6661034
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6661034
		lastStepMessage: 	nil
		lastCycleTime: 	6661054
		alarms: 	a Heap()
		lastAlarmTime: 	6661034
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(755346176) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
Message>>sentTo:
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:57:47.54784 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	2
		j: 	5
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	2
		j: 	5
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(558781952)
	Arguments and temporary variables: 
		anEvent: 	[(34@83) mouseUp 6675353 nil]
	Receiver's instance variables: 
		bounds: 	(22.0@70.0) corner: (38.0@86.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(465262080)'')
		fullBounds: 	(22.0@70.0) corner: (38.0@90.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (675043072)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(465262080)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(558781952)
	Arguments and temporary variables: 
		anEvent: 	[(34@83) mouseUp 6675353 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(22.0@70.0) corner: (38.0@86.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(465262080)'')
		fullBounds: 	(22.0@70.0) corner: (38.0@90.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (675043072)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(465262080)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(34@83) mouseUp 6675353 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(558781952)
	Receiver's instance variables: 
		timeStamp: 	6675353
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(34@83)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(558781952)
	Arguments and temporary variables: 
		anEvent: 	[(34@83) mouseUp 6675353 nil]
	Receiver's instance variables: 
		bounds: 	(22.0@70.0) corner: (38.0@86.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(465262080)'')
		fullBounds: 	(22.0@70.0) corner: (38.0@90.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (675043072)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(465262080)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(558781952)
	Arguments and temporary variables: 
		anEvent: 	[(34@83) mouseUp 6675353 nil]
	Receiver's instance variables: 
		bounds: 	(22.0@70.0) corner: (38.0@86.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(465262080)'')
		fullBounds: 	(22.0@70.0) corner: (38.0@90.0)
		color: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		extension: 	a MorphExtension (675043072)
		borderWidth: 	2
		borderColor: 	#inset
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(465262080)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(34@83) mouseUp 6675353 nil]
		focusHolder: 	a LOCell(558781952)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(34@83) corner: (50@99)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(34@83) corner: (50@99)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@83) mouseUp 6675353 nil]
		targetOffset: 	(12.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6675353 34 83 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(34@83) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(625865472) a Sta...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(34@83) mouseUp 6675353 nil]
		focusHolder: 	a LOCell(558781952)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(34@83) corner: (50@99)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(34@83) corner: (50@99)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@83) mouseUp 6675353 nil]
		targetOffset: 	(12.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6675353 34 83 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(34@83) mouseUp 6675353 nil]
		focusHolder: 	a LOCell(558781952)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(34@83) corner: (50@99)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(34@83) corner: (50@99)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@83) mouseUp 6675353 nil]
		targetOffset: 	(12.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6675353 34 83 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(34@83) mouseUp 6675353 nil]
	Receiver's instance variables: 
		bounds: 	(34@83) corner: (50@99)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(34@83) corner: (50@99)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@83) mouseUp 6675353 nil]
		targetOffset: 	(12.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6675353 34 83 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(34@83) mouseUp 6675353 nil]
		evt: 	[(34@83) mouseUp 6675353 nil]
	Receiver's instance variables: 
		bounds: 	(34@83) corner: (50@99)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(34@83) corner: (50@99)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@83) mouseUp 6675353 nil]
		targetOffset: 	(12.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6675353 34 83 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(34@83) mouseUp 6675353 nil]
		evtBuf: 	#(1 6675353 34 83 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(34@83) corner: (50@99)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(34@83) corner: (50@99)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(68702720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@83) mouseUp 6675353 nil]
		targetOffset: 	(12.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6675353 34 83 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6675335
		lastStepMessage: 	nil
		lastCycleTime: 	6675357
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6675335
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6675335
		lastStepMessage: 	nil
		lastCycleTime: 	6675357
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6675335
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6675335
		lastStepMessage: 	nil
		lastCycleTime: 	6675357
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6675335
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6675335
		lastStepMessage: 	nil
		lastCycleTime: 	6675357
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(495212288)))
		lastAlarmTime: 	6675335
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(625865472) a Sta...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:57:51.984749 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	8
		j: 	4
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	8
		j: 	4
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(879892992)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6679789 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@54.0) corner: (134.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(447211264)'')
		fullBounds: 	(118.0@54.0) corner: (134.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (88021504)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(447211264)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(879892992)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6679789 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(118.0@54.0) corner: (134.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(447211264)'')
		fullBounds: 	(118.0@54.0) corner: (134.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (88021504)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(447211264)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(119@69) mouseUp 6679789 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(879892992)
	Receiver's instance variables: 
		timeStamp: 	6679789
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(119@69)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(879892992)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6679789 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@54.0) corner: (134.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(447211264)'')
		fullBounds: 	(118.0@54.0) corner: (134.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (88021504)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(447211264)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(879892992)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6679789 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@54.0) corner: (134.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(447211264)'')
		fullBounds: 	(118.0@54.0) corner: (134.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (88021504)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(447211264)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6679789 nil]
		focusHolder: 	a LOCell(879892992)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(119@69) corner: (135@85)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(119@69) corner: (135@85)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(46655232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(119@69) mouseUp 6679789 nil]
		targetOffset: 	(1.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6679789 119 69 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(119@69) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(680549120) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(119@69) mouseUp 6679789 nil]
		focusHolder: 	a LOCell(879892992)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(119@69) corner: (135@85)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(119@69) corner: (135@85)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(46655232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(119@69) mouseUp 6679789 nil]
		targetOffset: 	(1.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6679789 119 69 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6679789 nil]
		focusHolder: 	a LOCell(879892992)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(119@69) corner: (135@85)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(119@69) corner: (135@85)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(46655232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(119@69) mouseUp 6679789 nil]
		targetOffset: 	(1.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6679789 119 69 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6679789 nil]
	Receiver's instance variables: 
		bounds: 	(119@69) corner: (135@85)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(119@69) corner: (135@85)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(46655232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(119@69) mouseUp 6679789 nil]
		targetOffset: 	(1.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6679789 119 69 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6679789 nil]
		evt: 	[(119@69) mouseUp 6679789 nil]
	Receiver's instance variables: 
		bounds: 	(119@69) corner: (135@85)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(119@69) corner: (135@85)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(46655232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(119@69) mouseUp 6679789 nil]
		targetOffset: 	(1.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6679789 119 69 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(119@69) mouseUp 6679789 nil]
		evtBuf: 	#(1 6679789 119 69 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(119@69) corner: (135@85)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(119@69) corner: (135@85)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(46655232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(119@69) mouseUp 6679789 nil]
		targetOffset: 	(1.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6679789 119 69 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6679771
		lastStepMessage: 	nil
		lastCycleTime: 	6679793
		alarms: 	a Heap()
		lastAlarmTime: 	6679771
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6679771
		lastStepMessage: 	nil
		lastCycleTime: 	6679793
		alarms: 	a Heap()
		lastAlarmTime: 	6679771
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6679771
		lastStepMessage: 	nil
		lastCycleTime: 	6679793
		alarms: 	a Heap()
		lastAlarmTime: 	6679771
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(260594176))(a SearchMorp...etc...
		lastStepTime: 	6679771
		lastStepMessage: 	nil
		lastCycleTime: 	6679793
		alarms: 	a Heap()
		lastAlarmTime: 	6679771
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(680549120) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 3:57:52.517143 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	8
		j: 	4
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	8
		j: 	4
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(879892992)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6680319 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@54.0) corner: (134.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(447211264)'')
		fullBounds: 	(118.0@54.0) corner: (134.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (88021504)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(447211264)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(879892992)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6680319 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(118.0@54.0) corner: (134.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(447211264)'')
		fullBounds: 	(118.0@54.0) corner: (134.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (88021504)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(447211264)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(119@69) mouseUp 6680319 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(879892992)
	Receiver's instance variables: 
		timeStamp: 	6680319
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(119@69)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	2


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(879892992)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6680319 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@54.0) corner: (134.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(447211264)'')
		fullBounds: 	(118.0@54.0) corner: (134.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (88021504)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(447211264)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(879892992)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6680319 nil]
	Receiver's instance variables: 
		bounds: 	(118.0@54.0) corner: (134.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(447211264)'')
		fullBounds: 	(118.0@54.0) corner: (134.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (88021504)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(447211264)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6680319 nil]
		focusHolder: 	a LOCell(879892992)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(119@69) corner: (135@85)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(119@69) corner: (135@85)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(484476416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(119@69) mouseUp 6680319 nil]
		targetOffset: 	(1.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6680319 119 69 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(119@69) mouseOver yellow nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(813732608) a SpecWin...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(119@69) mouseUp 6680319 nil]
		focusHolder: 	a LOCell(879892992)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(119@69) corner: (135@85)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(119@69) corner: (135@85)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(484476416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(119@69) mouseUp 6680319 nil]
		targetOffset: 	(1.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6680319 119 69 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6680319 nil]
		focusHolder: 	a LOCell(879892992)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(119@69) corner: (135@85)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(119@69) corner: (135@85)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(484476416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(119@69) mouseUp 6680319 nil]
		targetOffset: 	(1.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6680319 119 69 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6680319 nil]
	Receiver's instance variables: 
		bounds: 	(119@69) corner: (135@85)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(119@69) corner: (135@85)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(484476416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(119@69) mouseUp 6680319 nil]
		targetOffset: 	(1.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6680319 119 69 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(119@69) mouseUp 6680319 nil]
		evt: 	[(119@69) mouseUp 6680319 nil]
	Receiver's instance variables: 
		bounds: 	(119@69) corner: (135@85)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(119@69) corner: (135@85)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(484476416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(119@69) mouseUp 6680319 nil]
		targetOffset: 	(1.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6680319 119 69 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(119@69) mouseUp 6680319 nil]
		evtBuf: 	#(1 6680319 119 69 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(119@69) corner: (135@85)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(119@69) corner: (135@85)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(484476416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(119@69) mouseUp 6680319 nil]
		targetOffset: 	(1.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6680319 119 69 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6680305
		lastStepMessage: 	nil
		lastCycleTime: 	6680327
		alarms: 	a Heap()
		lastAlarmTime: 	6680305
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6680305
		lastStepMessage: 	nil
		lastCycleTime: 	6680327
		alarms: 	a Heap()
		lastAlarmTime: 	6680305
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6680305
		lastStepMessage: 	nil
		lastCycleTime: 	6680327
		alarms: 	a Heap()
		lastAlarmTime: 	6680305
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(67083008))(a DropListM...etc...
		lastStepTime: 	6680305
		lastStepMessage: 	nil
		lastCycleTime: 	6680327
		alarms: 	a Heap()
		lastAlarmTime: 	6680305
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SpecWindow(813732608) a SpecWin...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 4:00:12.034507 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	6
		j: 	4
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	6
		j: 	4
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(698995456)
	Arguments and temporary variables: 
		anEvent: 	[(102@117) mouseUp 6819839 nil]
	Receiver's instance variables: 
		bounds: 	(86.0@54.0) corner: (102.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(205644288)'')
		fullBounds: 	(86.0@54.0) corner: (102.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (965585664)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(205644288)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(698995456)
	Arguments and temporary variables: 
		anEvent: 	[(102@117) mouseUp 6819839 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(86.0@54.0) corner: (102.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(205644288)'')
		fullBounds: 	(86.0@54.0) corner: (102.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (965585664)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(205644288)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(102@117) mouseUp 6819839 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(698995456)
	Receiver's instance variables: 
		timeStamp: 	6819839
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(102@117)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(698995456)
	Arguments and temporary variables: 
		anEvent: 	[(102@117) mouseUp 6819839 nil]
	Receiver's instance variables: 
		bounds: 	(86.0@54.0) corner: (102.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(205644288)'')
		fullBounds: 	(86.0@54.0) corner: (102.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (965585664)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(205644288)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(698995456)
	Arguments and temporary variables: 
		anEvent: 	[(102@117) mouseUp 6819839 nil]
	Receiver's instance variables: 
		bounds: 	(86.0@54.0) corner: (102.0@70.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(205644288)'')
		fullBounds: 	(86.0@54.0) corner: (102.0@74.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (965585664)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(205644288)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(102@117) mouseUp 6819839 nil]
		focusHolder: 	a LOCell(698995456)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(102@117.0) corner: (118@133.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(102@117.0) corner: (118@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(102@117) mouseUp 6819839 nil]
		targetOffset: 	(14.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6819839 102 117 0 0 0 1)
		lastKeyScanCode: 	58
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(102@117) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a LOGame(1026248192) a StandardWi...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(102@117) mouseUp 6819839 nil]
		focusHolder: 	a LOCell(698995456)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(102@117.0) corner: (118@133.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(102@117.0) corner: (118@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(102@117) mouseUp 6819839 nil]
		targetOffset: 	(14.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6819839 102 117 0 0 0 1)
		lastKeyScanCode: 	58
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(102@117) mouseUp 6819839 nil]
		focusHolder: 	a LOCell(698995456)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(102@117.0) corner: (118@133.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(102@117.0) corner: (118@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(102@117) mouseUp 6819839 nil]
		targetOffset: 	(14.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6819839 102 117 0 0 0 1)
		lastKeyScanCode: 	58
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(102@117) mouseUp 6819839 nil]
	Receiver's instance variables: 
		bounds: 	(102@117.0) corner: (118@133.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(102@117.0) corner: (118@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(102@117) mouseUp 6819839 nil]
		targetOffset: 	(14.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6819839 102 117 0 0 0 1)
		lastKeyScanCode: 	58
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(102@117) mouseUp 6819839 nil]
		evt: 	[(102@117) mouseUp 6819839 nil]
	Receiver's instance variables: 
		bounds: 	(102@117.0) corner: (118@133.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(102@117.0) corner: (118@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(102@117) mouseUp 6819839 nil]
		targetOffset: 	(14.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6819839 102 117 0 0 0 1)
		lastKeyScanCode: 	58
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(102@117) mouseUp 6819839 nil]
		evtBuf: 	#(1 6819839 102 117 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(102@117.0) corner: (118@133.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(102@117.0) corner: (118@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(102@117) mouseUp 6819839 nil]
		targetOffset: 	(14.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6819839 102 117 0 0 0 1)
		lastKeyScanCode: 	58
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6695324
		lastStepMessage: 	nil
		lastCycleTime: 	6819843
		alarms: 	a Heap()
		lastAlarmTime: 	6819822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6695324
		lastStepMessage: 	nil
		lastCycleTime: 	6819843
		alarms: 	a Heap()
		lastAlarmTime: 	6819822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6695324
		lastStepMessage: 	nil
		lastCycleTime: 	6819843
		alarms: 	a Heap()
		lastAlarmTime: 	6819822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6695324
		lastStepMessage: 	nil
		lastCycleTime: 	6819843
		alarms: 	a Heap()
		lastAlarmTime: 	6819822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a LOGame(1026248192) a StandardWi...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 4:00:29.142576 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	6
		j: 	5
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	6
		j: 	5
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(550966784)
	Arguments and temporary variables: 
		anEvent: 	[(98@79) mouseUp CMD 6836938 nil]
	Receiver's instance variables: 
		bounds: 	(86.0@70.0) corner: (102.0@86.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(762929664)'')
		fullBounds: 	(86.0@70.0) corner: (102.0@90.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (1010969344) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(762929664)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(550966784)
	Arguments and temporary variables: 
		anEvent: 	[(98@79) mouseUp CMD 6836938 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(86.0@70.0) corner: (102.0@86.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(762929664)'')
		fullBounds: 	(86.0@70.0) corner: (102.0@90.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (1010969344) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(762929664)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(98@79) mouseUp CMD 6836938 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(550966784)
	Receiver's instance variables: 
		timeStamp: 	6836938
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	64
		position: 	(98@79)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	10


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(550966784)
	Arguments and temporary variables: 
		anEvent: 	[(98@79) mouseUp CMD 6836938 nil]
	Receiver's instance variables: 
		bounds: 	(86.0@70.0) corner: (102.0@86.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(762929664)'')
		fullBounds: 	(86.0@70.0) corner: (102.0@90.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (1010969344) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(762929664)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(550966784)
	Arguments and temporary variables: 
		anEvent: 	[(98@79) mouseUp CMD 6836938 nil]
	Receiver's instance variables: 
		bounds: 	(86.0@70.0) corner: (102.0@86.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(762929664)'')
		fullBounds: 	(86.0@70.0) corner: (102.0@90.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (1010969344) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(762929664)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(98@79) mouseUp CMD 6836938 nil]
		focusHolder: 	a LOCell(550966784)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(98@79.0) corner: (114@95.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(98@79.0) corner: (114@95.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(98@79) mouseUp CMD 6836938 nil]
		targetOffset: 	(12.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6836938 98 79 0 8 0 1)
		lastKeyScanCode: 	56
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(98@79) mouseOver CMD SHIFT yellow nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(685206016) a LOG...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(98@79) mouseUp CMD 6836938 nil]
		focusHolder: 	a LOCell(550966784)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(98@79.0) corner: (114@95.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(98@79.0) corner: (114@95.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(98@79) mouseUp CMD 6836938 nil]
		targetOffset: 	(12.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6836938 98 79 0 8 0 1)
		lastKeyScanCode: 	56
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(98@79) mouseUp CMD 6836938 nil]
		focusHolder: 	a LOCell(550966784)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(98@79.0) corner: (114@95.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(98@79.0) corner: (114@95.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(98@79) mouseUp CMD 6836938 nil]
		targetOffset: 	(12.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6836938 98 79 0 8 0 1)
		lastKeyScanCode: 	56
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(98@79) mouseUp CMD 6836938 nil]
	Receiver's instance variables: 
		bounds: 	(98@79.0) corner: (114@95.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(98@79.0) corner: (114@95.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(98@79) mouseUp CMD 6836938 nil]
		targetOffset: 	(12.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6836938 98 79 0 8 0 1)
		lastKeyScanCode: 	56
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(98@79) mouseUp CMD 6836938 nil]
		evt: 	[(98@79) mouseUp CMD 6836938 nil]
	Receiver's instance variables: 
		bounds: 	(98@79.0) corner: (114@95.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(98@79.0) corner: (114@95.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(98@79) mouseUp CMD 6836938 nil]
		targetOffset: 	(12.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6836938 98 79 0 8 0 1)
		lastKeyScanCode: 	56
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(98@79) mouseUp CMD 6836938 nil]
		evtBuf: 	#(1 6836938 98 79 0 8 0 1)
		type: 	1
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(98@79.0) corner: (114@95.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(98@79.0) corner: (114@95.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(98@79) mouseUp CMD 6836938 nil]
		targetOffset: 	(12.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6836938 98 79 0 8 0 1)
		lastKeyScanCode: 	56
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6695324
		lastStepMessage: 	nil
		lastCycleTime: 	6836952
		alarms: 	a Heap()
		lastAlarmTime: 	6836930
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6695324
		lastStepMessage: 	nil
		lastCycleTime: 	6836952
		alarms: 	a Heap()
		lastAlarmTime: 	6836930
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6695324
		lastStepMessage: 	nil
		lastCycleTime: 	6836952
		alarms: 	a Heap()
		lastAlarmTime: 	6836930
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6695324
		lastStepMessage: 	nil
		lastCycleTime: 	6836952
		alarms: 	a Heap()
		lastAlarmTime: 	6836930
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(685206016) a LOG...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>toggleState
1 May 2017 4:00:49.243324 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #toggleState
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		aMessage: 	toggleState
		exception: 	MessageNotUnderstood: LOGame>>toggleState
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOGame>>toggleNeighboursOfCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	6
		j: 	8
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
	Receiver: a LOGame(449469952)
	Arguments and temporary variables: 
		i: 	6
		j: 	8
		c: 	nil
		origin: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a LOCell(1059494656) a LOCell(1067091456) a LOCell(97338342...etc...
		fullBounds: 	(5@5) corner: (167@170)
		color: 	Color blue
		extension: 	a MorphExtension (560814848) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOGame(449469952) a LOGame(449469952) a LOGame(449469952) a LOGame(44...etc...


LOCell>>mouseUp:
	Receiver: a LOCell(334990080)
	Arguments and temporary variables: 
		anEvent: 	[(99@125) mouseUp 6857031 nil]
	Receiver's instance variables: 
		bounds: 	(86.0@118.0) corner: (102.0@134.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(897266176)'')
		fullBounds: 	(86.0@118.0) corner: (102.0@138.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (725670656)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(897266176)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleMouseUp:
	Receiver: a LOCell(334990080)
	Arguments and temporary variables: 
		anEvent: 	[(99@125) mouseUp 6857031 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(86.0@118.0) corner: (102.0@134.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(897266176)'')
		fullBounds: 	(86.0@118.0) corner: (102.0@138.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (725670656)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(897266176)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


MouseButtonEvent>>sentTo:
	Receiver: [(99@125) mouseUp 6857031 nil]
	Arguments and temporary variables: 
		anObject: 	a LOCell(334990080)
	Receiver's instance variables: 
		timeStamp: 	6857031
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(99@125)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	2


LOCell(Morph)>>handleEvent:
	Receiver: a LOCell(334990080)
	Arguments and temporary variables: 
		anEvent: 	[(99@125) mouseUp 6857031 nil]
	Receiver's instance variables: 
		bounds: 	(86.0@118.0) corner: (102.0@134.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(897266176)'')
		fullBounds: 	(86.0@118.0) corner: (102.0@138.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (725670656)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(897266176)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


LOCell(Morph)>>handleFocusEvent:
	Receiver: a LOCell(334990080)
	Arguments and temporary variables: 
		anEvent: 	[(99@125) mouseUp 6857031 nil]
	Receiver's instance variables: 
		bounds: 	(86.0@118.0) corner: (102.0@134.0)
		owner: 	a LOGame(449469952)
		submorphs: 	an Array(a StringMorph(897266176)'')
		fullBounds: 	(86.0@118.0) corner: (102.0@138.0)
		color: 	Color paleYellow
		extension: 	a MorphExtension (725670656)
		borderWidth: 	2
		borderColor: 	#raised
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color paleYellow
		label: 	a StringMorph(897266176)''
		onColor: 	(Color r: 0.8 g: 0.897 b: 0.915 alpha: 1.0)
		offColor: 	Color paleYellow
		mouseAction: 	[ self toggleNeighboursOfCellAt: i at: j ]


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(99@125) mouseUp 6857031 nil]
		focusHolder: 	a LOCell(334990080)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(99@125.0) corner: (115@141.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(99@125.0) corner: (115@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(99@125) mouseUp 6857031 nil]
		targetOffset: 	(13.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6857031 99 125 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	[(99@125) mouseOver yellow nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a LOGame(1026248192) a StandardWi...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(99@125) mouseUp 6857031 nil]
		focusHolder: 	a LOCell(334990080)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(99@125.0) corner: (115@141.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(99@125.0) corner: (115@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(99@125) mouseUp 6857031 nil]
		targetOffset: 	(13.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6857031 99 125 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(99@125) mouseUp 6857031 nil]
		focusHolder: 	a LOCell(334990080)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(99@125.0) corner: (115@141.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(99@125.0) corner: (115@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(99@125) mouseUp 6857031 nil]
		targetOffset: 	(13.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6857031 99 125 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(99@125) mouseUp 6857031 nil]
	Receiver's instance variables: 
		bounds: 	(99@125.0) corner: (115@141.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(99@125.0) corner: (115@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(99@125) mouseUp 6857031 nil]
		targetOffset: 	(13.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6857031 99 125 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[(99@125) mouseUp 6857031 nil]
		evt: 	[(99@125) mouseUp 6857031 nil]
	Receiver's instance variables: 
		bounds: 	(99@125.0) corner: (115@141.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(99@125.0) corner: (115@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(99@125) mouseUp 6857031 nil]
		targetOffset: 	(13.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6857031 99 125 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		evt: 	[(99@125) mouseUp 6857031 nil]
		evtBuf: 	#(1 6857031 99 125 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(99@125.0) corner: (115@141.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(99@125.0) corner: (115@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(99@125) mouseUp 6857031 nil]
		targetOffset: 	(13.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6857031 99 125 0 0 0 1)
		lastKeyScanCode: 	55
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(757873920)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6695324
		lastStepMessage: 	nil
		lastCycleTime: 	6857049
		alarms: 	a Heap()
		lastAlarmTime: 	6857027
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6695324
		lastStepMessage: 	nil
		lastCycleTime: 	6857049
		alarms: 	a Heap()
		lastAlarmTime: 	6857027
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6695324
		lastStepMessage: 	nil
		lastCycleTime: 	6857049
		alarms: 	a Heap()
		lastAlarmTime: 	6857027
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	a FormCanvas on: DisplayScreen(976x721x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	6695324
		lastStepMessage: 	nil
		lastCycleTime: 	6857049
		alarms: 	a Heap()
		lastAlarmTime: 	6857027
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a LOGame(1026248192) a StandardWi...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #toggleState
LOGame>>toggleNeighboursOfCellAt:at:
[ self toggleNeighboursOfCellAt: i at: j ] in LOGame>>newCellAt:at:
LOCell>>mouseUp:
LOCell(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
LOCell(Morph)>>handleEvent:
LOCell(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame>>openWorld
2 May 2017 2:13:11.506257 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame(Object)>>doesNotUnderstand: #openWorld
	Receiver: a LOGame(410450688)
	Arguments and temporary variables: 
		aMessage: 	openWorld
		exception: 	MessageNotUnderstood: LOGame>>openWorld
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (167.0@167.0)
		owner: 	nil
		submorphs: 	an Array(a LOCell(109363712) a LOCell(904991232) a LOCell(635505920)...etc...
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (439418624)
		borderWidth: 	1
		borderColor: 	Color black
		cells: 	(a LOCell(113354752) a LOCell(336665600) a LOCell(793875200) a LOCell(34...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'LOGame new openWorld.'
		itsSelection: 	a Text for 'LOGame new openWorld.'
		itsSelectionString: 	'LOGame new openWorld.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ LOGame new openWorld
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
	Receiver: RubSmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		superclass: 	RubTextEditor
		methodDict: 	a MethodDictionary(#atCompletionPosition->RubSmalltalkEditor>>#atCo...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RubSmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Rubric-Editing-Code'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		anArg: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(302330368)
		secondArg: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(302330368)
		secondArg: 	a RubEditingArea(302330368)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a RubEditingArea(302330368)
		category: 	a KMCategory
		morph: 	a RubEditingArea(302330368)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


Set>>do:
	Receiver: a Set(#methodStringsContainingIt on Meta + Shift + E do [ :target | target editor methodSt...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	6
		each: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		tally: 	13
		array: 	an Array(#methodStringsContainingIt on Meta + Shift + E do [ :target | t...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a RubEditingArea(302330368)
		category: 	a KMCategory
		morph: 	a RubEditingArea(302330368)


[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(302330368)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	4


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(302330368)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a RubEditingArea(302330368)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(302330368)
		directKeymaps: 	a KMCategory


RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(258036736) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(26@263)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(258036736) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(26@263)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		timeStamp: 	8423360
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(26@251.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(258036736) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(26@263)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleFocusEvent:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@31)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(258036736) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@31)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(26@263)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(302330368)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(307@472.0) corner: (323@488.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(307@472.0) corner: (323@488.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(302330368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(307@472) mouseOver nil nil]
		targetOffset: 	(26.0@263.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8390430 307 472 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(302330368)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(307@472.0) corner: (323@488.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(307@472.0) corner: (323@488.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(302330368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(307@472) mouseOver nil nil]
		targetOffset: 	(26.0@263.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8390430 307 472 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(302330368)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(307@472.0) corner: (323@488.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(307@472.0) corner: (323@488.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(302330368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(307@472) mouseOver nil nil]
		targetOffset: 	(26.0@263.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8390430 307 472 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
LOGame(Object)>>doesNotUnderstand: #openWorld
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>evaluateSelectionAndDo:
RubSmalltalkEditor>>evaluateSelection
RubSmalltalkEditor>>doIt
RubSmalltalkEditor>>doIt:
[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LOGame class>>delete
2 May 2017 2:14:25.014392 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGame class(Object)>>doesNotUnderstand: #delete
	Receiver: LOGame
	Arguments and temporary variables: 
		aMessage: 	delete
		exception: 	MessageNotUnderstood: LOGame class>>delete
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	BorderedMorph
		methodDict: 	a MethodDictionary(#cellsPerSide->LOGame>>#cellsPerSide #initialize...etc...
		format: 	65545
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'LOGame delete instance.'
		itsSelection: 	a Text for 'LOGame delete instance.'
		itsSelectionString: 	'LOGame delete instance.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ LOGame delete instance
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
	Receiver: RubSmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		superclass: 	RubTextEditor
		methodDict: 	a MethodDictionary(#atCompletionPosition->RubSmalltalkEditor>>#atCo...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RubSmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Rubric-Editing-Code'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		anArg: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(302330368)
		secondArg: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(302330368)
		secondArg: 	a RubEditingArea(302330368)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a RubEditingArea(302330368)
		category: 	a KMCategory
		morph: 	a RubEditingArea(302330368)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


Set>>do:
	Receiver: a Set(#methodStringsContainingIt on Meta + Shift + E do [ :target | target editor methodSt...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	6
		each: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		tally: 	13
		array: 	an Array(#methodStringsContainingIt on Meta + Shift + E do [ :target | t...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a RubEditingArea(302330368)
		category: 	a KMCategory
		morph: 	a RubEditingArea(302330368)


[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(302330368)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	4


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(302330368)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a RubEditingArea(302330368)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(302330368)
		directKeymaps: 	a KMCategory


RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@50)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(167848192) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@50)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(77@64)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@50)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(167848192) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@50)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(77@64)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		timeStamp: 	8496888
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(77@64.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@50)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(167848192) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@50)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(77@64)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleFocusEvent:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@50)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(167848192) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@50)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(77@64)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(302330368)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(358@285.0) corner: (374@301.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(358@285.0) corner: (374@301.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(302330368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(358@285) mouseOver nil nil]
		targetOffset: 	(77.0@64.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8475647 358 285 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a LOGame(131022592) a StandardWin...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(302330368)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(358@285.0) corner: (374@301.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(358@285.0) corner: (374@301.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(302330368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(358@285) mouseOver nil nil]
		targetOffset: 	(77.0@64.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8475647 358 285 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(302330368)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(358@285.0) corner: (374@301.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(358@285.0) corner: (374@301.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(302330368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(358@285) mouseOver nil nil]
		targetOffset: 	(77.0@64.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8475647 358 285 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
LOGame class(Object)>>doesNotUnderstand: #delete
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>evaluateSelectionAndDo:
RubSmalltalkEditor>>evaluateSelection
RubSmalltalkEditor>>doIt
RubSmalltalkEditor>>doIt:
[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

2 May 2017 2:16:51.443104 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		bounds: 	(129@159.0) corner: (145@175.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(129@159) mouseOver nil nil]
		targetOffset: 	(358@49)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8639334 129 159 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(129@159.0) corner: (145@175.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(129@159) mouseOver nil nil]
		targetOffset: 	(358@49)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8639334 129 159 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@721)
		hand: 	a HandMorph(757873920)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	8614201
		lastStepMessage: 	nil
		lastCycleTime: 	8642946
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(563423488)))
		lastAlarmTime: 	8642926
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@721)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('5501efbf-7b5a-4d2a-a36a-4f2fe1008076')
		creationTime: 	2017-05-02T11:52:48.236686+09:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('5501efbf-7b5a-4d2a-a36a-4f2fe1008076')
		creationTime: 	2017-05-02T11:52:48.236686+09:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('5501efbf-7b5a-4d2a-a36a-4f2fe1008076')
		creationTime: 	2017-05-02T11:52:48.236686+09:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay) a ClassSessionHa...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	45
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay) a ClassSessionHa...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('5501efbf-7b5a-4d2a-a36a-4f2fe1008076')
		creationTime: 	2017-05-02T11:52:48.236686+09:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('5501efbf-7b5a-4d2a-a36a-4f2fe1008076')
		creationTime: 	2017-05-02T11:52:48.236686+09:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	an UUID('5501efbf-7b5a-4d2a-a36a-4f2fe1008076')
		creationTime: 	2017-05-02T11:52:48.236686+09:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

2 May 2017 2:34:44.88 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		bounds: 	(129@159.0) corner: (145@175.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(129@159) mouseOver nil nil]
		targetOffset: 	(358@49)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8639334 129 159 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(129@159.0) corner: (145@175.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(129@159) mouseOver nil nil]
		targetOffset: 	(358@49)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8639334 129 159 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@721)
		hand: 	a HandMorph(757873920)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	8614201
		lastStepMessage: 	nil
		lastCycleTime: 	8642946
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(563423488)))
		lastAlarmTime: 	8642926
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@721)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('0bbb3ca3-06af-4d83-b012-dabdd2474cd0')
		creationTime: 	2017-05-02T14:34:44.643281+09:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('0bbb3ca3-06af-4d83-b012-dabdd2474cd0')
		creationTime: 	2017-05-02T14:34:44.643281+09:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('0bbb3ca3-06af-4d83-b012-dabdd2474cd0')
		creationTime: 	2017-05-02T14:34:44.643281+09:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay) a ClassSessionHa...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	45
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay) a ClassSessionHa...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('0bbb3ca3-06af-4d83-b012-dabdd2474cd0')
		creationTime: 	2017-05-02T14:34:44.643281+09:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('0bbb3ca3-06af-4d83-b012-dabdd2474cd0')
		creationTime: 	2017-05-02T14:34:44.643281+09:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('0bbb3ca3-06af-4d83-b012-dabdd2474cd0')
		creationTime: 	2017-05-02T14:34:44.643281+09:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

2 May 2017 2:35:28.091724 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		bounds: 	(129@159.0) corner: (145@175.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(129@159) mouseOver nil nil]
		targetOffset: 	(358@49)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8639334 129 159 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(129@159.0) corner: (145@175.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(129@159) mouseOver nil nil]
		targetOffset: 	(358@49)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8639334 129 159 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@721)
		hand: 	a HandMorph(757873920)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	8614201
		lastStepMessage: 	nil
		lastCycleTime: 	8642946
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(563423488)))
		lastAlarmTime: 	8642926
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@721)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('b580aa91-ad2a-41f7-8392-c9dedf4fc5eb')
		creationTime: 	2017-05-02T14:35:27.853311+09:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('b580aa91-ad2a-41f7-8392-c9dedf4fc5eb')
		creationTime: 	2017-05-02T14:35:27.853311+09:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('b580aa91-ad2a-41f7-8392-c9dedf4fc5eb')
		creationTime: 	2017-05-02T14:35:27.853311+09:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay) a ClassSessionHa...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	45
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay) a ClassSessionHa...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('b580aa91-ad2a-41f7-8392-c9dedf4fc5eb')
		creationTime: 	2017-05-02T14:35:27.853311+09:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('b580aa91-ad2a-41f7-8392-c9dedf4fc5eb')
		creationTime: 	2017-05-02T14:35:27.853311+09:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('b580aa91-ad2a-41f7-8392-c9dedf4fc5eb')
		creationTime: 	2017-05-02T14:35:27.853311+09:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

3 May 2017 8:47:56.263749 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@69)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1023428096) a RubCursor(56342348...etc...
		fullBounds: 	(0@0) corner: (690@69)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(358@49)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		bounds: 	(129@159.0) corner: (145@175.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(129@159) mouseOver nil nil]
		targetOffset: 	(358@49)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8639334 129 159 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(129@159.0) corner: (145@175.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(129@159) mouseOver nil nil]
		targetOffset: 	(358@49)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8639334 129 159 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@721)
		hand: 	a HandMorph(757873920)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(757873920))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(757873920))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(757873920))
		viewBox: 	(0@0) corner: (976@721)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	8614201
		lastStepMessage: 	nil
		lastCycleTime: 	8642946
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(563423488)))
		lastAlarmTime: 	8642926
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (976@721)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('6e786e59-8f2d-4808-888b-25c27a5dad41')
		creationTime: 	2017-05-03T20:47:55.98431+09:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('6e786e59-8f2d-4808-888b-25c27a5dad41')
		creationTime: 	2017-05-03T20:47:55.98431+09:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('6e786e59-8f2d-4808-888b-25c27a5dad41')
		creationTime: 	2017-05-03T20:47:55.98431+09:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay) a ClassSessionHa...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	45
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay) a ClassSessionHa...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Delay...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('6e786e59-8f2d-4808-888b-25c27a5dad41')
		creationTime: 	2017-05-03T20:47:55.98431+09:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('6e786e59-8f2d-4808-888b-25c27a5dad41')
		creationTime: 	2017-05-03T20:47:55.98431+09:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	an UUID('6e786e59-8f2d-4808-888b-25c27a5dad41')
		creationTime: 	2017-05-03T20:47:55.98431+09:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ThreadSafeTranscript>>show
3 May 2017 8:58:16.070877 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

ThreadSafeTranscript(Object)>>doesNotUnderstand: #show
	Receiver: Transcript
	Arguments and temporary variables: 
		aMessage: 	show
		exception: 	MessageNotUnderstood: ThreadSafeTranscript>>show
		resumeValue: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(783463168) a RubPluggableTextMorph...etc...
		announceur: 	an Announcer
		stream: 	a WriteStream
		accessSemaphore: 	a Mutex
		deferredClear: 	false
		deferredEndEntry: 	false
		stepContents: 	'128'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		game: 	a LOGame(716683520)
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| game |
game := LOGame new.
Transcript show game cellsPerSide...etc...
		itsSelection: 	a Text for '| game |
game := LOGame new.
Transcript show game cel...etc...
		itsSelectionString: 	'| game |
game := LOGame new.
Transcript show game cellsPer...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| game |
	game := LOGame new.
	^ Transcript show game cellsPerSide
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
	Receiver: RubSmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		superclass: 	RubTextEditor
		methodDict: 	a MethodDictionary(#atCompletionPosition->RubSmalltalkEditor>>#atCo...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RubSmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Rubric-Editing-Code'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		anArg: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(302330368)
		secondArg: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(302330368)
		secondArg: 	a RubEditingArea(302330368)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a RubEditingArea(302330368)
		category: 	a KMCategory
		morph: 	a RubEditingArea(302330368)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


Set>>do:
	Receiver: a Set(#methodStringsContainingIt on Meta + Shift + E do [ :target | target editor methodSt...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	6
		each: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		tally: 	13
		array: 	an Array(#methodStringsContainingIt on Meta + Shift + E do [ :target | t...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a RubEditingArea(302330368)
		category: 	a KMCategory
		morph: 	a RubEditingArea(302330368)


[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(302330368)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	4


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(302330368)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a RubEditingArea(302330368)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(302330368)
		directKeymaps: 	a KMCategory


RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@145)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(863280384) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@145)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(202@111)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@145)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(863280384) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@145)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(202@111)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		timeStamp: 	620323
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(-361@55.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@145)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(863280384) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@145)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(202@111)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleFocusEvent:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@145)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(863280384) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@145)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(202@111)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(302330368)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(-80@276.0) corner: (-64@292.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(-80@276.0) corner: (-64@292.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(302330368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(-80@276) mouseOver nil nil]
		targetOffset: 	(82.99998474121094@165.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 619895 -80 276 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(302330368)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(-80@276.0) corner: (-64@292.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(-80@276.0) corner: (-64@292.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(302330368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(-80@276) mouseOver nil nil]
		targetOffset: 	(82.99998474121094@165.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 619895 -80 276 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(302330368)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(-80@276.0) corner: (-64@292.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(-80@276.0) corner: (-64@292.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(302330368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(-80@276) mouseOver nil nil]
		targetOffset: 	(82.99998474121094@165.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 619895 -80 276 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
ThreadSafeTranscript(Object)>>doesNotUnderstand: #show
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>evaluateSelectionAndDo:
RubSmalltalkEditor>>evaluateSelection
RubSmalltalkEditor>>doIt
RubSmalltalkEditor>>doIt:
[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ThreadSafeTranscript>>show
3 May 2017 8:58:49.188465 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

ThreadSafeTranscript(Object)>>doesNotUnderstand: #show
	Receiver: Transcript
	Arguments and temporary variables: 
		aMessage: 	show
		exception: 	MessageNotUnderstood: ThreadSafeTranscript>>show
		resumeValue: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(783463168) a RubPluggableTextMorph...etc...
		announceur: 	an Announcer
		stream: 	a WriteStream
		accessSemaphore: 	a Mutex
		deferredClear: 	false
		deferredEndEntry: 	false
		stepContents: 	'128'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		game: 	a LOGame(403394560)
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'
| game |
game := LOGame new.
Transcript show game cellsPerSid...etc...
		itsSelection: 	a Text for '
| game |
game := LOGame new.
Transcript show game ce...etc...
		itsSelectionString: 	'
| game |
game := LOGame new.
Transcript show game cellsPe...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| game |
	game := LOGame new.
	^ Transcript show game cellsPerSide
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(302330368)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
	Receiver: RubSmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		superclass: 	RubTextEditor
		methodDict: 	a MethodDictionary(#atCompletionPosition->RubSmalltalkEditor>>#atCo...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RubSmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Rubric-Editing-Code'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		anArg: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(302330368)
		secondArg: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :target | target editor doIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(302330368)
		secondArg: 	a RubEditingArea(302330368)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	272
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a RubEditingArea(302330368)
		category: 	a KMCategory
		morph: 	a RubEditingArea(302330368)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Meta + D do [ :target | target editor doIt: nil ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :target | target editor doIt: nil ]
		name: 	#doIt
		shortcut: 	Meta + D
		defaultShortcut: 	Meta + D
		description: 	'Do it'


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
		entry: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


Set>>do:
	Receiver: a Set(#methodStringsContainingIt on Meta + Shift + E do [ :target | target editor methodSt...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	6
		each: 	#doIt on Meta + D do [ :target | target editor doIt: nil ]

	Receiver's instance variables: 
		tally: 	13
		array: 	an Array(#methodStringsContainingIt on Meta + Shift + E do [ :target | t...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a KMDispatcher)...etc...
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Windows->a KMStorage #all->a KMSt...etc...


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a RubEditingArea(302330368)
		category: 	a KMCategory
		morph: 	a RubEditingArea(302330368)


[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(302330368)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	4


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(302330368)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a RubEditingArea(302330368)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(302330368)
		directKeymaps: 	a KMCategory


RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@145)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(863280384) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@145)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(130@132)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@145)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(863280384) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@145)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(130@132)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(302330368)
	Receiver's instance variables: 
		timeStamp: 	653441
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(183@148.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@145)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(863280384) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@145)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(130@132)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleFocusEvent:
	Receiver: a RubEditingArea(302330368)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (690@145)
		owner: 	a TransformWithLayoutMorph(321528320)
		submorphs: 	an Array(a RubPrimarySelectionMorph(863280384) a RubCursor(563423488...etc...
		fullBounds: 	(0@0) corner: (690@145)
		color: 	Color transparent
		extension: 	a MorphExtension (1054743296) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(185521920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(563423488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(302330368)
		mouseDownPoint: 	(130@132)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(302330368)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(464@369.0) corner: (480@385.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(464@369.0) corner: (480@385.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(302330368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(464@369) mouseOver nil nil]
		targetOffset: 	(130@132)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 645232 464 369 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(757873920)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@721)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a StandardWindow(600748288) a Nau...etc...
		fullBounds: 	(0@0) corner: (976@721)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (948355072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(302330368)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(464@369.0) corner: (480@385.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(464@369.0) corner: (480@385.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(302330368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(464@369) mouseOver nil nil]
		targetOffset: 	(130@132)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 645232 464 369 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(757873920)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a RubEditingArea(302330368)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(464@369.0) corner: (480@385.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(464@369.0) corner: (480@385.0)
		color: 	Color blue
		extension: 	a MorphExtension (610345728)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(302330368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(464@369) mouseOver nil nil]
		targetOffset: 	(130@132)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 645232 464 369 0 0 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
ThreadSafeTranscript(Object)>>doesNotUnderstand: #show
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>evaluateSelectionAndDo:
RubSmalltalkEditor>>evaluateSelection
RubSmalltalkEditor>>doIt
RubSmalltalkEditor>>doIt:
[ :target | target editor doIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Got 11 instead of 10.
3 May 2017 9:28:18.805645 pm

VM: Mac OS - intel - 1094 - CoInterpreter VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
StackToRegisterMappingCogit VMMaker.oscog-HolgerHansPeterFreyther.1880 uuid: 16138eb3-2390-40f5-a6c8-15f0494936f8 Oct 10 2016
git@github.com:pharo-project/pharo-vm.git Commit: 06744effac0f0aa3b4b32e17636448f9d51d6707 Date: 2016-09-30 08:40:43 +0200 By: GitHub <noreply@github.com> 

Image: Pharo5.0 [Latest update: #50771]

LOGameTest(TestAsserter)>>assert:description:
	Receiver: LOGameTest>>#testCellsPerSide
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	[ self comparingStringBetween: actual and: expected ]
		aString: 	'Got 11 instead of 10.'
	Receiver's instance variables: 
		testSelector: 	#testCellsPerSide
		expectedFails: 	nil


LOGameTest(TestAsserter)>>assert:equals:
	Receiver: LOGameTest>>#testCellsPerSide
	Arguments and temporary variables: 
		actual: 	11
		expected: 	10
	Receiver's instance variables: 
		testSelector: 	#testCellsPerSide
		expectedFails: 	nil


LOGameTest>>testCellsPerSide
	Receiver: LOGameTest>>#testCellsPerSide
	Arguments and temporary variables: 
		game: 	a LOGame(165111040)
	Receiver's instance variables: 
		testSelector: 	#testCellsPerSide
		expectedFails: 	nil


LOGameTest(TestCase)>>performTest
	Receiver: LOGameTest>>#testCellsPerSide
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCellsPerSide
		expectedFails: 	nil


[ self setUp.
self performTest ] in LOGameTest(TestCase)>>runCase
	Receiver: LOGameTest>>#testCellsPerSide
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCellsPerSide
		expectedFails: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	LOGameTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


LOGameTest(TestCase)>>runCase
	Receiver: LOGameTest>>#testCellsPerSide
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCellsPerSide
		expectedFails: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	LOGameTest>>#testCellsPerSide
	Receiver's instance variables: 
		timeStamp: 	2017-05-03T21:28:18.761575+09:00
		failures: 	a Set(LOGameTest>>#testCellsPerSide)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase annou...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	74
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	LOGameTest>>#testCellsPerSide
	Receiver's instance variables: 
		timeStamp: 	2017-05-03T21:28:18.761575+09:00
		failures: 	a Set(LOGameTest>>#testCellsPerSide)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in LOGameTest(TestCase)>>debug
	Receiver: LOGameTest>>#testCellsPerSide
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testCellsPerSide
		expectedFails: 	#()


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	LOGameTest(TestCase)>>debug
		startpc: 	50
		numArgs: 	0


LOGameTest(TestCase)>>debug
	Receiver: LOGameTest>>#testCellsPerSide
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testCellsPerSide
		expectedFails: 	#()


LOGameTest class(TestCase class)>>debug:
	Receiver: LOGameTest
	Arguments and temporary variables: 
		aSymbol: 	#testCellsPerSide
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#testCellsPerSide->LOGameTest>>#testCellsPerSide...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LOGameTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PBE-LightsOut-Tests'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set(#testC...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	LOGameTest>>#testCellsPerSide
		aBoolean: 	true
		testMethod: 	LOGameTest>>#testCellsPerSide
		testClass: 	LOGameTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 182)
		format: 	65558
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


NautilusUI>>runTestForAMethod:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aMethod: 	LOGameTest>>#testCellsPerSide
		aBoolean: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(495917312)
		sourceCodePanel: 	a PanelMorph(410809600)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(318363392)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a MethodDefinitionAcceptor
		classCommentTextModel: 	a RubScrolledTextModel
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(383216128)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'PBE'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(152562688)


[ :each | 
each isTestMethod
	ifTrue: [ self runTestForAMethod: each notifying: aBoolean ] ] in NautilusUI(AbstractNautilusUI)>>runTestForMethods:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection(LOGameTest>>#testCellsPerSide)
		aBoolean: 	true
		each: 	LOGameTest>>#testCellsPerSide
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(495917312)
		sourceCodePanel: 	a PanelMorph(410809600)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(318363392)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a MethodDefinitionAcceptor
		classCommentTextModel: 	a RubScrolledTextModel
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(383216128)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'PBE'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(152562688)


OrderedCollection>>do:
	Receiver: an OrderedCollection(LOGameTest>>#testCellsPerSide)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
each isTestMethod
	ifTrue: [ self runTestForAMethod: each no...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	{LOGameTest>>#testCellsPerSide. nil. nil. nil. nil. nil. nil. nil. nil. ...etc...
		firstIndex: 	1
		lastIndex: 	1


NautilusUI(AbstractNautilusUI)>>runTestForMethods:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection(LOGameTest>>#testCellsPerSide)
		aBoolean: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(495917312)
		sourceCodePanel: 	a PanelMorph(410809600)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(318363392)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a MethodDefinitionAcceptor
		classCommentTextModel: 	a RubScrolledTextModel
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(383216128)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	'PBE'
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(152562688)


[ target runTestForMethods: selectedMethods notifying: true ] in MethodWidget class>>elementsMenu:
	Receiver: MethodWidget
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		selectedMethods: 	an OrderedCollection(LOGameTest>>#testCellsPerSide)
		tmp: 	nil
		target: 	a NautilusUI
	Receiver's instance variables: 
		superclass: 	AbstractWidget
		methodDict: 	a MethodDictionary(#buildMethodsList->MethodWidget>>#buildMethodsLi...etc...
		format: 	65542
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MethodWidget
		classPool: 	a Dictionary(#MethodsIconsCache->a WeakIdentityKeyDictionary(LOGameT...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ target runTestForMethods: selectedMethods notifying: true ]
	Arguments and temporary variables: 
		anArg: 	a NautilusUI
	Receiver's instance variables: 
		outerContext: 	MethodWidget class>>elementsMenu:
		startpc: 	862
		numArgs: 	0


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(432049408)'Run tests'
	Arguments and temporary variables: 
		evt: 	[(771@326) mouseUp 2423015 nil]
		w: 	a WorldMorph(562956288) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(583.0@316.0) corner: (819.0@333.0)
		owner: 	a MenuMorph(231596032)
		submorphs: 	#()
		fullBounds: 	(583.0@316.0) corner: (819.0@333.0)
		color: 	Color black
		extension: 	a MorphExtension (26696960)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Run tests'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target runTestForMethods: selectedMethods notifying: true ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'j, m'


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	138
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(432049408)'Run tests'
	Arguments and temporary variables: 
		evt: 	[(771@326) mouseUp 2423015 nil]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(583.0@316.0) corner: (819.0@333.0)
		owner: 	a MenuMorph(231596032)
		submorphs: 	#()
		fullBounds: 	(583.0@316.0) corner: (819.0@333.0)
		color: 	Color black
		extension: 	a MorphExtension (26696960)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Run tests'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target runTestForMethods: selectedMethods notifying: true ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'j, m'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(432049408)'Run tests'
	Arguments and temporary variables: 
		evt: 	[(771@326) mouseUp 2423015 nil]
	Receiver's instance variables: 
		bounds: 	(583.0@316.0) corner: (819.0@333.0)
		owner: 	a MenuMorph(231596032)
		submorphs: 	#()
		fullBounds: 	(583.0@316.0) corner: (819.0@333.0)
		color: 	Color black
		extension: 	a MorphExtension (26696960)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Run tests'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target runTestForMethods: selectedMethods notifying: true ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'j, m'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(432049408)'Run tests'
	Arguments and temporary variables: 
		anEvent: 	[(771@326) mouseUp 2423015 nil]
	Receiver's instance variables: 
		bounds: 	(583.0@316.0) corner: (819.0@333.0)
		owner: 	a MenuMorph(231596032)
		submorphs: 	#()
		fullBounds: 	(583.0@316.0) corner: (819.0@333.0)
		color: 	Color black
		extension: 	a MorphExtension (26696960)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Run tests'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target runTestForMethods: selectedMethods notifying: true ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'j, m'


MouseButtonEvent>>sentTo:
	Receiver: [(771@326) mouseUp 2423015 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(432049408)'Run tests'
	Receiver's instance variables: 
		timeStamp: 	2423015
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(771@326)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(432049408)'Run tests'
	Arguments and temporary variables: 
		anEvent: 	[(771@326) mouseUp 2423015 nil]
	Receiver's instance variables: 
		bounds: 	(583.0@316.0) corner: (819.0@333.0)
		owner: 	a MenuMorph(231596032)
		submorphs: 	#()
		fullBounds: 	(583.0@316.0) corner: (819.0@333.0)
		color: 	Color black
		extension: 	a MorphExtension (26696960)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Run tests'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target runTestForMethods: selectedMethods notifying: true ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'j, m'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(771@326) mouseUp 2423015 nil]
		aMorph: 	a ToggleMenuItemMorph(432049408)'Run tests'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(432049408)'Run tests'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(771@326) mouseUp 2423015 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(432049408)'Run tests'


MouseButtonEvent>>sentTo:
	Receiver: [(771@326) mouseUp 2423015 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	2423015
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(771@326)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(771@326) mouseUp 2423015 nil]
		aMorph: 	a ToggleMenuItemMorph(432049408)'Run tests'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(432049408)'Run tests'


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(771@326) mouseUp 2423015 nil]
		aMorph: 	a ToggleMenuItemMorph(432049408)'Run tests'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(432049408)'Run tests'


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(432049408)'Run tests'
	Arguments and temporary variables: 
		anEvent: 	[(771@326) mouseUp 2423015 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(583.0@316.0) corner: (819.0@333.0)
		owner: 	a MenuMorph(231596032)
		submorphs: 	#()
		fullBounds: 	(583.0@316.0) corner: (819.0@333.0)
		color: 	Color black
		extension: 	a MorphExtension (26696960)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Run tests'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target runTestForMethods: selectedMethods notifying: true ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'j, m'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(771@326) mouseUp 2423015 nil]
		aMorph: 	a MenuMorph(231596032)
		localEvt: 	[(771@326) mouseUp 2423015 nil]
		index: 	13
		child: 	a ToggleMenuItemMorph(432049408)'Run tests'
		morphs: 	an Array(a ToggleMenuItemMorph(110007552)'Refactoring' a ToggleMenuItem...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(432049408)'Run tests'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(771@326) mouseUp 2423015 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(432049408)'Run tests'


MouseButtonEvent>>sentTo:
	Receiver: [(771@326) mouseUp 2423015 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	2423015
		source: 	a HandMorph(757873920)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(771@326)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4



--- The full stack ---
LOGameTest(TestAsserter)>>assert:description:
LOGameTest(TestAsserter)>>assert:equals:
LOGameTest>>testCellsPerSide
LOGameTest(TestCase)>>performTest
[ self setUp.
self performTest ] in LOGameTest(TestCase)>>runCase
BlockClosure>>ensure:
LOGameTest(TestCase)>>runCase
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCase.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in LOGameTest(TestCase)>>debug
BlockClosure>>ensure:
LOGameTest(TestCase)>>debug
LOGameTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
NautilusUI>>runTestForAMethod:notifying:
[ :each | 
each isTestMethod
	ifTrue: [ self runTestForAMethod: each notifying: aBoolean ] ] in NautilusUI(AbstractNautilusUI)>>runTestForMethods:notifying:
OrderedCollection>>do:
NautilusUI(AbstractNautilusUI)>>runTestForMethods:notifying:
[ target runTestForMethods: selectedMethods notifying: true ] in MethodWidget class>>elementsMenu:
BlockClosure>>cull:
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ [ World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

